<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript深入理解之Array详解]]></title>
    <url>%2FJavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8BArray%E8%AF%A6%E8%A7%A3.html</url>
    <content type="text"><![CDATA[写在前面Array类型可以说是ECMAScript中最常用的一种类型了。和其他语言中的Array类型相比，ECMAScript中的Array类型可以说是厉害多了，它能比它们多做很多事情，当然也同样存在更多使用上的隐患。以前也遇到了很多关于Array使用上的问题，一直没有时间整理总结，下面总结一下我对Array的理解。 定义 Array 对象用于在单个的变量中存储多个值。 与其他数组的不同: ECMAScript 数组中的每一项都可以保存不同类型的数据，也就是说你可以第一个位置保存一个数值，第二个位置保存一个字符串，第三个位置保存一个Boolean值。只要你有需要，这样的数组都是合法的。 1var arr = [1 , "hello" , true]; 数组的长度大小是可变的，也就是说你可以随意的向数组增添数据，如果大小不够时，数组会自动增长以容纳新的数据。 12345var arr = [1 , 2];console.log(arr.length); // 2arr.push(3);console.log(arr.length); // 3 创建方式创建数组的方式一共有两种。 使用Array构造函数 1var colors = new Array(); //注意这里的new操作符是可省的 使用数组字面量表示法。数组字面量由一对包含数组项的方括号表示，多个数组项之间用逗号隔开。这种方法不会调用Array的构造函数。 123var names = []; // 创建一个空数组var colors = ["red","blue","white"] //创建一个包含3项的数组 length属性数组的项数保存在它的length属性中，这个属性不是只读的，也就是说我们可以通过修改这个属性来从数组末尾移除项或添加新的项。 1234567var colors = ["red","blue","white"];console.log(colors[2]) // "white"colors.length = 2; //通过减小数组的长度来移除末尾项console.log(colors[2]); // undefined 利用length属性也可以很方便地在数组末尾添加新项，下面是我们平常使用最多的一种写法 12345var colors = ["red","blue","white"];colors[colors.length] = "black"; // 在数组，末尾添加新元素console.log(colors[3]); // "black" 数组检测自从ES3做出规定以后，如何判断某个对象是否为数组就成为了一个经典问题。一共有两种方法可以判断。 对于一个网页或者一个全局作用域而言，使用instanceof就可已解决问题。不过如果网页中存在多个框架，就意味着存在多个全局作用域,从而存在两个版本以上的Array的构造函数。如果我们从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中的原生创建的数组分别具有不同的构造函数，这种情况下就无法使用instanceof来判断了。 123if(value instanceof Array)&#123; //对数组执行某些操作&#125; 针对上面的情况，ES5新增克Array.isArray()方法。这个方法可以最终确定某个值到底是不是数组，而不管它是在哪个全局执行环境中创建的。 123if(Array.isArray(value))&#123; //对数组进行某些操作&#125; 数组转换在实际应用中，很多时候我们需要将数组转换为字符串的形式来表示，那么应该如何转换呢？将一个数组转化为字符串形式表示一共有三种方法。 使用toString()方法。调用数组的toString()方法会返回数组的每个值的字符串形式拼接而成的一个以逗号分隔的字符串。实际上，为了创建这个字符串，会调用数组的每一项的toString()方法。 123var colors = ["red","blue","white"];console.log(colors.toString()); // red,blue,white 使用toLocalString()方法。调用这个方法得到的结果其实和调用toString()方法得到的结果多数情况下是相同的。不同的是,使用该方法创建字符串时，会调用数组的每一项的toLocalString()方法，而不再是toString()方法。 123var colors = ["red","blue","white"];console.log(colors.toLocalString()); // red,blue,white 使用join()方法。在很多情况下，我们希望能够自己定义分隔符，这个时候使用join方法就很方便了。join方法接受一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串。注意如果不传入参数，则默认使用逗号作为分隔符。 123var colors = ["red","blue","white"];console.log(colors.join("||")); // red||blue||white 栈方法我们知道栈是一种先进后出的数据结构，也就是最新添加的项最后被移除。而且栈中项的插入和移除只发生在一个位置——栈的顶部。ECMAScript为数组专门提供了push()和pop()方法，以此来实现类似栈的行为。 push()方法可以接收任意数量的参数，并把他们逐个添加到数组末尾，并返回修改后数组的长度。pop()方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。 1234567891011var colors = ["red","blue"];var count = colors.push("green"); //入栈，推入一项console.log(colors); // ["red","blue","green"]console.log(count); // 3var item = colors.pop(); // 弹栈，弹出最后一项console.log(colors); // ["red","blue"]console.log(item); // "green" 队列方法栈数据结构的访问规则是先进后出，而队列数据结构的访问规则是先进先出。队列在列表的末端添加项，从列表的前端移除项。由于push()方法已经实现了向数组末端添加项的方法，因此模拟队列只需要一个从数组前端获取项的方法就行了。实现这一操作的数组方法是shift(),它能够移除数据组中的第一个项并返回该项，同时将数组长度减一。结合使用shift()和push()方法，就可以像使用队列一样使用数组。 1234567891011var colors = ["red","blue"];var count = colors.push("green"); //入队列，推入一项console.log(colors); // ["red","blue","green"]console.log(count); // 3var item = colors.shift(); // 出队列，移除数组第一项console.log(colors); // ["blue","green"]console.log(item); // "red" ECMAScript还为数组提供了一个unshift()方法。这个方法的作用刚好和shift()方法相反，它能在数组前端添加任意个项并返回新数组的长度。因此使用unshift()和pop()方法，可以从相反的方向来模拟队列，即在数组的前端添加项，从数组末端移除项。 重排序方法数值中有两种可以直接用来重排序的方法，一种是reverse()方法，另一种是sort()方法。 reverse()方法可以反转数组项的顺序，注意该方法是直接在原始数组上进行操作的。 12345var numbers = [1,2,3,4,5,6,7,8,9];numbers.reverse();console.log(numbers); // [9,8,7,6,5,4,3,2,1] sort()方法，在默认情况下会按升序序列排列数组项——即最小的值位于最前面，最大的值排在最后面。不过这个升序的比较，比较的不是数值的大小，为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定该如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串。 12345var numbers = [0,1,5,10,15];numbers.sort();console.log(numbers); // [0,1,10,15,5] 从上面的例子中可以看出，虽然数值5小于10，但在进行字符串比较时，”10”则位于”5”的前面，于是数组的顺序就修改了。这种方法显然大多数情况下不会符合我们的需要，那么有什么其他办法吗？其实sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。 比较函数接收两个参数，如果第一个参数应该位于第二个参数则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个之后则返回一个正数。 123456789var numbers = [0,1,5,10,15];numbers.sort(compare);console.log(numbers); // [15,10,5,1,0]function compare(value1,value2)&#123; retrun value2 - value1&#125; 操作方法ECMAScript为数组操作提供了很多方法，这些方法在我们实际应用中经常会用到，下面我们来一一介绍。 concat()方法conact()方法可以基于当前数组中的所有项和传入参数构建一个新的数组。这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个参数的末尾，最后返回这个新的数组。需要注意的是: 在没有给concat()方法传递参数的情况下，它只是复制当前数组并返回脚本。 如果传递给concat()方法的是一个或多个数组，则该方法会将这些数组的每一项都添加到结果数组中。 如果传递的值不是数组这些值会被简单地添加到数组的末尾。 原始数组不受影响 12345var colors = ["red","green","blue"];var colors2 = colors.concat("yellow",["black","brown"]);console.log(colors); // red,green,blueconsole.log(coloers2); // red,green,blue,yellow,black,brown slice()方法slice()方法它能够基于当前数组中的一个或多个项创建一个新数组，简单理解为可以用于截取数组中的一部分。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。需要注意的是： 在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。 如果有两个参数，该方法返回起始位置和结束位置之间的项，但不包括结束位置的项。 如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。 如果结束位置小于初始位置，则返回空数组 原始数组不受影响 12345678var colors = ["red","green","blue","yellow","purple"];var colors2 = colors.slice(1);var colors3 = colors.slice(1,4);var colors4 = colors.slice(-2,-1); // 相当于调用slice(3,4)console.log(colors2); // green,blue,yellow,purpleconsole.log(colors3); // green,blue,yellowconsole.log(colors4); // yellow splice()方法splice()方法可以说是最强大的数组方法了，它的用法有很多。splice()方法接受三个参数，起始位置，要删除的项数和要插入的任意数量的项，splice()方法始终会返回一个数组，该数组汇中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。使用这种方法的方式有如下三种: 删除: 可以删除任意数量的项，只需要指定两个参数：起始位置和要删除的项数。 12345var colors = ["red","green","blue","yellow"];var removed = colors.splice(0,2) //删除数组中的前两项console.log(colors); // blue,yellowconsole.log(removed) // red,green 插入: 可以向指定位置插入任意数量的项，需要提供三个参数，起始位置，0(要删除的项数)和要插入的项。 12345var colors = ["red","green","blue","yellow"];var removed = colors.splice(1,0,"white","black"); //从位置一开始插入两项console.log(colors); // red,white,black,green,blue,yellowconsole.log(removed) // 返回的是一个空数组 替换: 可以向指定位置插入任意数量的项。插入的项数不必和删除的项数相等，需要三个参数，起始位置，要删除的项数和要插入的任意数量的项。 12345var colors = ["red","green","blue","yellow"];var removed = colors.splice(1,1,"white","black"); //删除位置一项，然后插入两项console.log(colors); // red,white,black,blue,yellowconsole.log(removed); // green 位置方法ES5为数组实例添加了两个位置方法：indexOf()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和表示查找起点位置的索引(可选)。其中，indexOf()方法从数组的开头(位置0)开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找。这两个方法都是用于返回要查找的项在数组中第一次匹配到的位置，或者在没有找到的情况下返回-1。注意在比较第一个参数与数组中的每一项时，会使用全等操作符===，也就是说，要求查找的项必须严格相等。 123456789var numbers = [1,2,3,4,5,4,3,2,1];console.log(numbers.indexOf(4)); // 3 console.log(numbers.lastIndexOf(4)); // 5console.log(nmbers.indexOf(4,4)); // 从位置4开始向后匹配console.log(numbers.lastIndexOf(4,4)) // 从位置4开始向前匹配 迭代方法相信我们平时使用中，对数组操作最多的都是数组的遍历迭代。ES5中为数组定义了五个方法。每个方法都接收两个参数，要在数组没每一项上运行的函数和运行该函数的作用域对象——影响this的值(可选)。传入这些方法中的函数会接受三个参数：数组项的值，该项在数组中的位置和数组对象本身。根据使用方法的不同，这个函数执行后的返回值可能也可能不会影响方法的值。下面我们分别介绍这五个迭代方法，注意这些方法都不会修改原始数组包含的值。 every()方法every()方法，该方法对数组中的每一项都运行给定函数，如果该函数对每一项都返回true，则返回true。这种方法适用于判断数组中的项是否都满足某个条件。该方法的返回值为Boolean。12345678var numbers = [1,2,3,4,5,6,7,8,9];//判断数组项否都小于10var everyResult = numbers.every(function(item , index , array)&#123; retrun item &lt; 10;&#125;);console.log(everyResult); // true 证明数组项都小于10 some()方法some()方法，该方法对数组中的每一项运行给定函数，如果该函数汇中某一项返回true，则返回true。这种方法和every()方法使用很像，不过some()方法用于判断数组中是否含有满足某个条件的项。该方法的返回值为Boolean。12345678var numbers = [1,2,3,4,5,6,7,8,9];//判断数组中是否有小于10的项var someResult = numbers.some(function(item , index , array)&#123; retrun item &lt; 10;&#125;);console.log(someResult); // true 证明数组中含有小于10的项 filter()方法filter()方法，对数组中的每一项运行给定函数，返回该函数会返回true的项的数组。这种方法适用于数组的过滤，得到数组中满足特定条件的项。该方法会返回一个包含符合条件项的数组。 12345678var numbers = [1,2,3,4,5,6,7,8,9];// 返回数组中大于5的项var filterResult = numbers.filter(function(item , index , array)&#123; retrun item &gt; 5;&#125;);console.log(filterResult); // [6,7,8,9] map()方法map()方法，对数组的每一项运行给定函数，返回每次函数调用的结果的数组。这种方法使用在需要对数组中的元素整体进行一些操作的时候情况。该方法会返回一个对数组每项进行操作后的数组。12345678var numbers = [1,2,3,4,5,6,7,8,9];// 对数组中的每一项的乘2var mapResult = numbers.map(function(item , index , array)&#123; retrun item * 2;&#125;);console.log(mapResult); // [2,4,6,8,10,12,14,16,18] forEach()方法forEach()方法，对数组中的每一项运行给定函数。这种方法本质上与for循环迭代数组一样。这个方法没有返回值。 12345var numbers = [1,2,3,4,5,6,7,8,9];numbers.forEach(function(item , index , array)&#123; // 执行某些操作&#125;); 归并方法ES5中新增了两个归并数组的方法: reduce() 和 reduceRight()。这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而reduceRight方法则从数组的最后一项开始，向前遍历到第一项。这两个方法都接收两个参数：一个在每一项上调用的函数和作为归并基础的特殊值(可选)。传入reduce()和reduceRight()的函数接收4个参数：前一个值、当前值、项的索引和数组对象这个函数返回的任何值都会作为第一个参数自动传给下一项，也就是说第一个参数均为上一次迭代返回的结果。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项。第二个参数就是数组的第二项。使用reduce() 和 reduceRight()方法可以执行求数组中所有值之和的操作。123456789101112var values = [1,2,3,4,5];var sum = values.reduce(function(pre, cur, index, arrray)&#123; return pre + cur;&#125;)console.log(sum); //15var sumRight = values.reduceRight(function(pre, cur, index, arrray)&#123; return pre + cur;&#125;)console.log(sumRight); //15 写在最后不总结不知道，一种总结才发现Array涉及到的知识点和用法真的太多了。以前只会使用一些简单的循环来判断，没有发现其实ECMAScript已经为我们提供了很多方便的方法。这样总结了一下，感觉对Array对象的认识更深了一些，收获挺大的。希望我的学习总结可以给你带来帮助。本文章纯属个人的学习总结，如果文章中存在错误，也希望大家能够给我指出！]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript深入理解之undefined与null]]></title>
    <url>%2FJavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8Bundefined%E4%B8%8Enull.html</url>
    <content type="text"><![CDATA[写在前面JavaScript中有两个特殊的值，undefined与null。平常在写项目时，遇到需要判断一个值是否为空的时候，我总会想到undefined与null。既然都是代表空值(以前我就是这么认为的)，那么它们有没有区别呢？反正我是一直傻傻分不清楚，看了又忘了。最近查阅了一些资料，才发现自己以前真的是误解它们了，知错就改，下面总结一下它们的用法和区别。 基本数据类型在介绍undefined与null之前，我们先来了解一下ECMAScript中的数据类型。在ECMAScript中有五种简单数据类型(也称为基本数据类型): Undefined、Null、Boolean、Number 和 String 。还有一种复杂数据类型——Object。 没错，首字母大写的Undefined与Null其实都属于ECMAScript中的基本数据类型。这两个数据类型是五种数据类型中最特殊的两个类型，因为它们都只有唯一的一个值，分别是undefined与null，就是我们今天要介绍的两个主角。 Undefined 类型定义上面我们说过了，Undefined类型只有一个值，就是特殊的undefined，在两种情况下我们会得到undefined： 声明了一个变量，但未对其初始化时，这个变量的值就是undefined。 var data; console.log(data === undefined); //true 那么我么是否可以显式地把一个变量初始化为undefined呢，答案是可以的。 var data = undefined; console.log(data === undefined); //true var value = 1; console.log(data); //1 value = undefined; console.log(data === undefined); // true 一般而言，我们不存在需要显式地把一个变量设置为undefined值的情况，因为对于未经初始化的值默认就会取得undefined值，而已经初始化的值再将其赋值为undefined来表示空值是没有意义且不可取的。况且字面值undefined的主要目的以用于比较，来区分空对象指针(后面我们会介绍到这指的就是null)与未经初始化的变量的情况。 对未定义的变量执行typeof操作符也会返回undefined //data变量未定义 var value; console.log(typeof data); // "undefined" console.log(typeof value); // "undefined" 这里我们没有使用===来判断，因为对于尚未声明过的变量，我们只能执行一项操作，即使用typeof操作符检测其数据类型，使用其他的操作都会报错。 //data变量未定义 console.log(data === undefined); //报错 结果表明对未初始化和未声明的变量执行typeof操作符都返回了undefined值，这个结果有其逻辑上的合理性。因为虽然这两种变量从技术角度看有本质区别，但实际上无论对哪种变量也不可能执行真正的操作。 还有其他几种情况也会返回undefined，比如一个函数如果没有使用return语句指定返回值，就会返回一个undefined值，或者调用函数时没有传参数值，参数同样也会被初始化为undefined值。这些都是属于上面两种情况在代码中的体现，这里就不单独解释了。 全局属性 window.undefined从上面的例子我们可以看出，无论我们是否初始化过变量，都可以给变量赋值为undefined。其实这里用于赋值的undefined不是一个值，它是一个属性名，undefined是全局对象的一个属性，也就是说，它是全局作用域的一个变量，即window.undefined，而window.undefined这个属性的值才是前面所说的原始值undefined。data = undefined;这就相当于把一个变量window.undefined的值赋值给另一个变量data，这个值就是原始值undefined。其实在JavaScript代码中,我们看到的undefined大多数情况指的都是window.undefined(本篇文章中多数情况下也是，原始值undefined除外)，原始值undefined多数情况下只存在于文档或规范中,不存在于JavaScript代码中(具体可以理解为代码中参与判断、比较或赋值的都是window.undefined，而在控制台中输出，或函数中返回的则是原始值undefined)。 console.log(window.undefined); //原始值undefined 注意，在ES3之前其实是没有原始值undefined这个值的，第三版引入这个值，其实是为了正式区分空对象指针(后面我们会介绍到这指的就是null)与未经初始化的变量。在ES3中,window.undefined就是一个普通的属性，我们完全可以把它的值改为任何真值。但从ES5之后,window.undefined成了一个不可写,不可配置的数据属性,它的值永远是undefined。 局部属性 undefined大家可能注意到了，上面我提到的是在大多数情况下undefined指的都是window.undefined，那还有什么其他情况吗？其实在ECMAScript中，undefined不是一个保留字，这意味着什么呢？也就是说我们可以将undefined作为一个局部变量来使用，就像局部作用域中任何其他普通变量一样，没有任何特殊性，我们可以对其赋予任何类型的值。 (function() { var undefined = 'not is undefined'; console.log(undefined); //"not is undefined" console.log(typeof undefined) // "string" })() 我们可以看到undefined的值和类型都已经改变，这样的做法是非常不友好的，这样会使我们的代码难以维护和排错。 undefined 判断如何判断一个变量是否为undefined，这里有两种方法。 使用严格相等符===或不相等操作符!==来决定一个变量是否拥有值，这里不使用标准相等操作符==,是因为标准相等符还会会检查变量是不是为null，但是严格相等操作符不会检查。null不等同于undefined，这点我们会在后面讲到。 使用typeof操作符，这种方式我们在上面已经使用过了，对未定义的变量检测时只能使用这种方式，要不然会出现报错。 void 0上面我们提到过了，undefined作为局部变量使用是可以被重写的，那么如果我们使用下面这种判断方式，是有风险的。 if(data === undefined){ //do something } 那么我们怎样做才能确保万无一失呢?让我们先来了解一下void运算符,官方文档是这样解释的: The void operator evaluates the given expression and then returns undefined. void 运算符 对给定的表达式进行求值，然后返回 undefined 什么意思呢？就是使用void对后面的表达式求值，无论结果是多少，都会返回原始值undefined。因此我们可以用void 0来代替undefined进行判断，因为void 0始终返回的都是原始值undefined。 var data; console.log(data === void 0); //true Null类型定义Null类型是第二个只有一个值的数据类型，这个特殊的值就是null。值 null 是一个字面量，它不像undefined 是全局对象的一个属性。从逻辑角度来看，null值表示一个空对象指针，指示变量未指向任何对象。把 null 作为尚未创建的对象，也许更好理解。在 APIs 中，null 常在返回类型是对象，但没关联值的地方使用，就像下面一个例子。 //document.getElementById() 可以返回对拥有指定 ID 的第一个对象的引用 var $container = document.getElementById("container"); // 注意:container是不存在的 console.log($container); // null typeof null当我们使用typeof操作符检测null值，我们理所应当地认为应该返”Null”类型呀，但是事实返回的类型却是”object”。 var data = null; console.log(typeof data); // "object" 是不是很奇怪？其实我们可以从两方面来理解这个结果 一方面从逻辑角度来看，null值表示一个空对象指针，它代表的其实就是一个空对象，所以使用typeof操作符检测时返回”object”也是可以理解的。 另一方面，其实在JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null的类型标签也成为了 0，typeof null就错误的返回了”object”。在ES6中，当时曾经有提案为历史平凡, 将type null的值纠正为null, 但最后提案被拒了,所以还是保持”object”类型。 null 判断null的判断可以使用严格相等符===或不相等操作符!==判断，不使用标准相等符的原因是因为undefined会影响判断结果。和undefined不一样，不能使用typeof来判断一个值是否为null，原因上边已经讲了，使用typeof来检测null会返回”object”,这样的话我们是没办法判断的。 if(data === null){ console.log("data中没有保存对象引用！"); } null 使用那么我们在什么情况下需要将变量赋值为null呢？这里我想到的有两种情况。 如果定义的变量在将来用于保存对象，那么最好将该变量初始化为null，而不是其他值。换句话说，只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null值，这样有助于进一步区分null和undefined。 当一个数据不再需要使用时，我们最好通过将其值设置为null来释放其引用，这个做法叫做解除引用。不过解除一个值的引用并不意味着自动回收改值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器在下次运行时将其回收。解除引用还有助于消除有可能出现的循环引用的情况。这一做法适用于大多数全局变量和全局对象的属性，局部变量会在它们离开执行环境时(函数执行完时)自动被解除引用。 undefined 与 null实际上undefined值是派生自null值的，因此ECMA-262规定对它们的相等性测试要返回true: console.log(null == undefined); //true 因为使用的是标准相等符==,这个操作符出于目的会转换其操作数为相同类型后再做比较，如果我们使用严格相等符比较，我们会发现它们是不相等的，因为严格相等符不会进行类型转换，然而undefined与null属于不同的类型，所以不相等。 console.log(null === undefined); //false 尽管null和undefined有这样的关系，但上面我们已经提到过了，它们的用途完全不同，我们在平常使用时一定要学会区分。 参考文献《JavaScript高级程序设计(第三版)》 JavaScript中undefined和null的区别 JavaScript 参考文档 null JavaScript 参考文档 undefined JavaScript 参考文档 typeof (void 0) 与 undefined 之间的小九九 写在最后花了一些时间来总结undefined与null的用法和区别，以前一直没有注意，经过这次总结才发现它们所代表的的意义和用法完全不同。可能在平常使用的时候我们不需要考虑这么多问题，但通过重新看一些东西，总结一些东西，通过这样的方式对我来说收获挺大的。本篇文章纯属个人的学习总结，如果文章中存在错误的地方，希望大家可以向我指出。]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>数据类型</tag>
        <tag>undefined</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些自律到极致的人，都拥有了开挂的人生]]></title>
    <url>%2F%E9%82%A3%E4%BA%9B%E8%87%AA%E5%BE%8B%E5%88%B0%E6%9E%81%E8%87%B4%E7%9A%84%E4%BA%BA%EF%BC%8C%E9%83%BD%E6%8B%A5%E6%9C%89%E4%BA%86%E5%BC%80%E6%8C%82%E7%9A%84%E4%BA%BA%E7%94%9F.html</url>
    <content type="text"><![CDATA[写在前面今天早上起床看到了这篇文章，感触很多。一直想做一个自律的人，拥有一个自律的、向上的生活。但往往我会在下定决心的第二天、第三天就选择放弃。不是不知道自己想要什么，只是自己更多的选择了随波逐流的安逸。每天都浑浑噩噩的混过一天，让人很难接受。我希望自己的生活有所改变，谨以此文勉励自己，不要在最该奋斗的年纪蹉跎了芳华。 我从来不相信什么懒洋洋的自由。我向往的自由是通过勤奋和努力实现的更广阔的人生。我要做一个自由又自律的人，靠势必实现的决心认真地活着。不要做欲望的奴隶，自律可以令我们活得更高级。 一、自律，可以让我们活得更高级在新的一年，做到自律，你才能活得更高级。 前些天，男神钟汉良在一天内发了 4 条微博，晒出了他的早餐、午餐和晚餐。 早餐是一片吐司加蛋，外加两颗蘑菇和圣女果。 午餐是满满的一盘蔬菜，搭配米兰大教堂形状的意大利面。 晚餐是自制蔬菜沙拉和燕麦小点心。 清淡又营养的三餐里，藏着他在饮食方面的自律。 出道 20 多年，钟汉良始终保持着良好的身材和不变的容颜。连见多识广的记者、节目主持人也惊叹于他皮肤的质感，调侃他是不是睡在冰箱里。 然而，正如泰迪·罗斯福所说：“有了自律能力，没有什么事情是你做不到的。” 多少人羡慕着别人的身材与样貌，羡慕着别人的成功与精彩。但是当了解到其背后付出的艰辛和近乎残酷的自我管理后，又迅速打起了退堂鼓。在浑浑噩噩、随波逐流的日子里，继续毫无意义地耗费生命。 知乎上有这样一个问题：你最深刻的错误认识是什么？ 点赞最高的回答是：以为自由就是想做什么就做什么，后来才发现自律者才会有自由。 当一个人缺乏自律的时候，他做的事情总是在受习惯和及时诱惑的影响，要么就是被他人的思想观念所扰，几乎永远不可能去做内心真正渴望的事。 你会发现：那些自律到极致的人，都拥有了开挂的人生。 二、自律，是解决人生问题的首要方案谷歌有位高级工程师，叫马特·卡茨。 他给自己定下了一个 30 天改变的计划，每天做一些之前未能坚持的事。 比如：每天骑自行车上班，每天步行 10000 步，每天拍一张照片，写一本 5 万字的小说； 不看电视，不吃糖，不玩推特，拒绝咖啡因….. 可以说这份计划充满了挑战性，做不到自律的人势必无法完成。 但马特坚持了下来。 30 天后，昔日那个肥腻的宅男工程师不见了，他开始发自内心地喜欢上骑自行车去工作，甚至完成了在非洲最高峰乞力马扎罗山的远足。 心理学家曾经总结过这样的规律： 自律的前期是兴奋的，中期是痛苦的，后期是享受的。 但有没有发现，大部分人都在自律的中期——痛苦期徘徊太久，以至于把痛苦当作是自律。 而当你自律到极致，你会发现：自律能够带给你发自内心的平静和享受。 因为你知道，自己在一天天地改变，自律已经变成了一种深入骨髓的习惯。 正如李开复所说：“千万不要放纵自己，给自己找借口。对自己严格一点，时间长了，自律便成为一种习惯，一种生活方式，你的人格和智慧也因此变得更加完美。” 《少有人走的路》里有这样一句话： 解决人生问题的首要方案，乃是自律。缺少了这一环，你不可能解决任何麻烦和困难。 那么，如何才能将自律坚持到极致？ 三、自律，其实并没有那么难《毅力——如何培养自律的习惯》这本书中介绍了 3 种方法，更新了我对自律的认知。 ① 设立具体目标，坚持无一例外原则 我的表妹小蕊，每天嚷嚷着减肥，却从未成功过。 原因之一，想必就在于没有设定具体的目标。 无数研究显示：当人们用具体的条文对他们的目标进行定义后，他们成功的可能性就会大大增加。 大多数制定了明确目标的减肥者（比如：我要在 2 个月内瘦下 10 斤），会比那些目标含糊不清的减肥者减肥效果要好得多。 目标明确是很重要的，因为明确的目标可以减少思想上的歧义和执行中的变异。 设定目标之后，需要坚持“无一例外”的原则。 比方说，目标是在 2 个月内瘦下 10 斤，就坚持在达到减肥目标之前，一点甜点都不吃。 如果不坚持这项原则，那么每次面对甜点时，都必须决定是否要放纵自己。 在进行考虑的过程中，将会耗费能量，而这些能量，是维持毅力的关键。 所以，一旦给自己下了绝对不破例的原则，就不会再把能量花在一遍又一遍、无休止的自我纠结上。 那些自律到极致的人，都坚持了无一例外原则。 蔡依林从不吃任何有油的食品，甚至有三年的时间内没有吃过米饭； 杨丽萍为了呈现最完美的舞蹈，几乎没有吃过一顿饱饭； 刘德华为了保持身材，几十年来都保持着每天一杯酸奶的习惯。 一旦你对某件事情百分之百地投入，那就不可能再有例外。事情已成定局，再也没有商量的余地。 放纵如山倒，自律如抽丝。 不要给自己找借口放纵，对自己严格一点，让自律成为一种习惯、原则。 ② 一次只完成一项任务，不要过多消耗毅力 在改变自己的道路上，许多人会一次性给自己定下太多目标： 比如，半年内练出马甲线、考过 XX 考试、看 50 本书、看美剧不需要字幕…… 然而，毅力就像人的肌肉一样，会产生疲劳。同时接受太多挑战，通常无法坚持实施下去。 有一个著名的实验： 100 个人被随机分为三组。 A 组中的每个成员都得到了一盘小萝卜，并被要求全部吃光。 B 组中的每个成员都得到了一盘饼干，并被要求全部吃光。 C 组中的每个成员可以选择他想要吃的东西，或者什么都不吃。 在所有的萝卜和饼干都被吃光以后，每个人都被要求解答同一道难题，这道难题实际上根本没有答案。 B 组和 C 组的人在猜了大约 15 分钟之后放弃，A 组的人只猜了 7 分钟就缴械投降了。 研究者从这次实验中得出结论：A 组成员已经耗尽了所有的毅力去吃掉那些萝卜，而 B 组和 C 组成员仍有大量的毅力去解那道难题。 意志力就像手机的剩余电量一样。 每天早晨你都是充满电的，随着你不断使用你的电力，最后电力耗尽，你也就毫无意志力可言。 你在一件事上用的意志力太多，不等它恢复就投入下一件事，那么肯定会疲惫不堪。 注意保存你的意志力，以便在最需要的时候使用。 ③ 把挑战分解成小而易于管理的目标 太多人幻想着能够一蹴而就，一夜之间达成目标。 当完成一个任务所需的时间跨度很长、难度很大时，许多人容易半途而废。 这个时候，需要学会对任务进行分解。 日本著名的马拉松运动员山田本一，曾在自传中写到自己成功的秘密： 每次比赛前，我都要乘车把比赛的路线仔细看一遍，并把沿途比较醒目的标志画下来。比如，第一标志是银行，第二标志是古怪的大树，第三标志是一座高楼……这样一直画到赛程的结束。比赛开始后，我就奋力向第一个目标冲去，到达第一个目标后，我又以同样的速度向第二个目标冲去。40 多公里的赛程，被我分解成几个小目标，跑起来就轻松多了。开始我把我的目标定在终点线的旗帜上，结果跑到十几公里的时候就疲惫不堪了，因为我被前面那段遥远的路吓到了。 通往目的地的道路是由许多细小的、易于管理的步骤组成的。 不要总想着毕其功于一役。 慢一点、稳一点，关键在于把大目标分解成易于消化、循序渐进的小目标。 四、自律，人生自由的必经之路以前总觉得，人生苦短，应及时行乐。 今朝有酒今朝醉，人不风流枉少年。 直到后来，我渐渐发现： 每一个不自律的行为，都会给你带来更大的痛苦。 长期暴饮暴食、缺乏运动，会让你不得不为自己的健康付出代价； 熬夜打游戏、刷微博，带来的是第二天的无精打采、浑浑噩噩； 没有目标、得过且过，会让你迷失方向、日渐空虚。 设计师山本耀司说： 我从来不相信什么懒洋洋的自由。我向往的自由是通过勤奋和努力实现的更广阔的人生。 我要做一个自由又自律的人，靠势必实现的决心认真地活着。 不要做欲望的奴隶，自律可以令我们活得更高级。 新的一年，成为自律的人，共勉。 原文地址那些自律到极致的人，都拥有了开挂的人生——原文地址 写在最后我从来不相信什么懒洋洋的自由。我向往的自由是通过勤奋和努力实现的更广阔的人生。以此共勉！]]></content>
      <categories>
        <category>心得感悟</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>自律</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云ECS基于Linux系统部署javaweb项目]]></title>
    <url>%2F%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%9F%BA%E4%BA%8ELinux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2javaweb%E9%A1%B9%E7%9B%AE.html</url>
    <content type="text"><![CDATA[写在前面最近发现阿里云上推出了一个云翼计划，大学生购买 ECS 实例最低只要 9.9 元/月(不是打广告),真的是太实惠了有没有。算一算我还有两年才毕业，这要是不申请一个来试试都不好意思说自己读过大学…本来对服务器这一块不是很了解，正好借此机会学习学习。纯基础教学，带你一步一步了解如何使用 ECS 部署你的 javaweb 项目。 云服务器 ECS 购买因为我们需要部署一个 javaweb 项目，所以我们需要在服务器配置相应的 JAVA 环境。当然我们购买最基本的 ECS 实例然后再安装对应的 mysql，tomcat 这些也是可以的。这里我们有一个一步到位的方法，就是选择已经配置好的镜像。大家可以通过在阿里云的云市场里边搜索找到 JAVA 环境（CentOS7.4 Nginx Tomcat8 JDK）这一个镜像，然后点击购买(这一个镜像是免费的)。下面是地址: JAVA 环境（CentOS7.4 Nginx Tomcat8 JDK）镜像 如图: 点击立即购买，然后进入 ECS 实例的购买配置页面，如果没有特殊需求，按照默认的配置购买即可，大学生的话可以享受 9.9 元/月的优惠，好像买一年还会送域名的代金券。 配置安全组购买了服务器后我们可以登陆阿里云的管理控制台查看我们购买的 ECS 示例，然后选择安全组，如图: 配置安全组可以让我们访问以及使用 mysql 远程连接数据库等，点击配置规则，如图: 点击快速创建规则，先创建第一个规则，一定要和我的一致，如图: 点击添加安全组规则，创建第二个规则，如图: 点击添加安全组规则，创建第三个规则，如图: 我们还要添加一个出方向的规则，如图: 配置好后我们就可以通过我们的公网 ip 访问我们的服务器了，访问公网 ip 出现如下界面说明我们的安全组配置成功了，如图: 参数优化我们可以通过 Xshell 5 来远程连接到我们的服务器，如图: 点击确定后需要输入密码，就是在购买实例时设置的密码。 由于镜像制作是下 1 核 1G 内存配置完成，Nginx、MySQL、JVM 参数还是该配置的参数，如果不是这个配置，我们需要执行下面优化脚本(建议都执行一下) 12cd /root/oneinstack //必须进入oneinstack目录下执行./optimize.sh //请勿bash ./optimize.sh（或者sh）这样执行 需要注意: 可能需要等待 1 分钟，请勿中断 此脚本会根据系统配置，自动优化 Nginx、MySQL、JVM 等参数 优化成功，如下图: MySQL 数据库管理由于我们需要部署 javaweb 项目，肯定会使用到数据库。直接使用 cmd 界面管理肯定不方便，所以我们需要使用如 Navicat Premium 这样的工具来远程连接数据库进行操作。不过直接远程连接是不行的，因为我们没有开放权限。 我们先来看一下数据库默认 root 的密码 12cd /root/oneinstackgrep dbrootpwd options.conf //显示数据库root密码 如下图: 默认密码太复杂了，我们想要重置密码怎么办呢？可以这样做 12cd /root/oneinstack./reset_db_root_password.sh 如下图: 好了，进入正题，如何获取权限远程连接 mysql 首先登陆，然后打开 mysql 数据库 12mysql -u root -h localhost -puse mysql //打开mysql数据库 然后将 host 设置为%表示任何 ip 都能连接 mysql，当然您也可以将 host 指定为某个 ip 1update user set host=&apos;%&apos; where user=&apos;root&apos; and host=&apos;localhost&apos;; 最后刷新权限表，使配置生效 1flush privileges; 如果您想关闭远程连接，恢复 mysql 的默认设置（只能本地连接），只需重复上述步骤，将host=&#39;%&#39;改为host=&#39;localhost&#39;就行了。 使用 Navicat Premium 来远程连接到数据库，如图: 上传项目文件到服务器上传项目文件到服务器上，我们需要用到 WinSCP,连接配置和其他远程连接需要输入的基本相同，这里就不列举了。我们需要把如下项目文件上传到服务器/data/wwwroot/default/目录下，如图: 这里需要注意的是，这一种方法是通用方法，即你未绑定域名也可使用。我们绑定域名后可以需要创建虚拟主机，然后将项目文件存放到相应的以域名为名的文件夹下。绑定域名后需要备案，要不然是不能访问的。额….最近我还在弄这个备案，等备案好后我会再更新一下这部分内容。 是不是这样就能访问了呢？我们还需要做最后几步工作。 默认 Tomcat 是以一般 www 用户运行，所以我们要将网站代码权限改为 www，执行命令： 1chown -R www.www /data/wwwroot 如图: 最后，我们重启一下 Tomcat 就行了。 1service tomcat restart 访问主页下面我们访问一下我们网站的主页试试，这里要注意网站的根目录是 default 目录，所以我们需要注意一下我们访问的页面的路径。这是我的图片分享网站的首页，大家可以参考一下: 写在最后好了，终于将我们的 javaweb 部署到服务器上了。虽然弄了很久…..但还是很高兴，感觉通过部署服务器学到了很多东西，对网站的创建和运行有了一定的了解。希望我的总结也能够给你提供一点帮助，如果文章中出现错误或存在不严谨的地方，也希望大家给我留言指出。]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零搭建Spring+SpringMVC+Mybatis]]></title>
    <url>%2F%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BASpring-SpringMVC-Mybatis.html</url>
    <content type="text"><![CDATA[写在前面最近在写一个图片分享网站类型的小 demo，后端采用了 Spring+SpringMVC+Mybatis 来进行框架的搭建。因为一直写前端，对后端的一些实现一直不太了解，也导致在项目开发中后端运行出现了什么问题，我也不能及时察觉到。所以希望通过写这个小 demo，能够了解后端项目是如何创建、管理和实现的。所以先总结一下如何从零搭建 Spring+SpringMVC+Mybatis。 开发环境 IntelliJ IDEA 2017.3.3 x64 apache-maven-3.3.9 apache-tomcat-9.0.4 具体下载方法及使用可以自行百度一下。 创建 Maven Web 项目第一步我们需要创建一个基本的使用 Maven 管理 的 web 项目。 打开 idea 之后，在左上角点击 file -&gt; new -&gt; project，在弹出的 new project 页面，选择 maven -&gt; 勾选 Create from artifactype -&gt; 选中 webapp（注意：这个地方有两个 app，选择 maven-archetype-webapp）, next 。如下图 接下来就是填写 groupId 和 archetypeId 了，点击 next。这里需要注意的是 GroupID 实际对应 JAVA 的包的结构，是 main 目录里 java 的目录结构。 ArtifactID 就是项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。如下图 然后下一步，首先我们需要配置本地 maven 的安装路径，然后点击右侧的加号。如下图 输入对应的 name 和 value，然后点击 OK。点击 Next。这里需要注意 archetypeCatalog 表示插件使用的 archetype 元数据，不加这个参数时默认为 remote，local，即中央仓库 archetype 元数据，由于中央仓库的 archetype 太多了，所以导致很慢，指定 internal 来表示仅使用内部元数据。 然后填写 project name 和 module name，并选择项目所在的路径。注意 module name 默认和 project name 一样的，但是如果这个项目只有这一个 module，不改无所谓的，如果有很多的 module，那肯定是修改一下。 填完点击 finish。如下图 在创建过程中，这时候在 Idea 主窗口的右下角部分,我们可以看到一个滚动条在执行,说明我们的项目正在 build 中.右上角有一个提示框如下图所示: 这个提示框大概意思是:Maven 项目需要被导入.我们选择 Enable Auto-Import(自动导入) 当我们看见如下目录时，说明我们的项目已经创建好了。如下图 修改项目目录创建完项目后，我们可以发现我们项目的目录不全，我们需要自己手动添加。 初始结构图如下: 修改后目录如下: 需要的主体目录对应解释: 1234567891011121314src //源码、资源等文件的根目录 -main //项目开发主要目录之一,可以放java代码和一些资源文件. -java //开发的主要的java代码存放目录 -com.photoshareweb //我的应用程序的包名 -controller //控制类代码 -dao //mybatis-generator生成的dao映射类 -entitys //mybatis-generator生成的实体类 -mapping //mybatis-generator生成的映射文件 -service //服务器类代码 -resources //开发中的主要的资源文件存放目录 -webapp //web页面和其他web配置、资源文件存放目录 -test //项目开发中的测试模块存放路径,包含java代码和资源文件. -java //测试代码存放目录 -resources //测试资源文件存放目录 下面我们讲一下如何创建 main 下的 java 目录 我们先右键点击 main 目录,接着选中 New→Directory,在弹出的对话框中输入 java。 接着我们需要把 java 目录标记为源文目录。 在 java 目录下创建包，这里有一个很容易尴尬的地方就是，有的情况下我们创建的目录不能自动识别，然后直接会生成一串。如果遇到这个问题，大家可以参考一下这个解决办法。 创建好相应目录后，一定要记得将该目录标记为相应的类型，如果是普通目录则不需要标记。 配置 pom.xml 文件我们根据项目引入相应的资源库，我的具体配置如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.photoshareweb&lt;/groupId&gt; &lt;artifactId&gt;PhotoShareWeb&lt;/artifactId&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;PhotoShareWeb Maven Webapp&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 1.日志 --&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 2.数据库 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--druid==&gt;阿里巴巴数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;com.alibaba.druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- DAO: MyBatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;com.mybatis.mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;com.mybatis.mybatis_spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis-generator.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 3.Servlet web --&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--json工具--&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;$&#123;com.google.gson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--Servlet版本设置--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;$&#123;javax.servlet.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 4.Spring --&gt; &lt;!-- 1)Spring核心 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 2)Spring DAO层 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 3)Spring web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 4)Spring test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- redis客户端:Jedis --&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;$&#123;redis.clients.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt; &lt;version&gt;$&#123;com.dyuproject.protostuff.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt; &lt;version&gt;$&#123;com.dyuproject.protostuff.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Map工具类 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--文件上传工具--&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;PhotoShareWeb&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis-generator.version&#125;&lt;/version&gt; &lt;!-- 数据库驱动 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 自动生成 --&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;generate&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;!-- 指定文件位置好像不起作用，始终默认读取src/main/resources/generatorConfig.xml文件 --&gt; &lt;configurationFile&gt;src/main/resources/generatorConfig.xml&lt;/configurationFile&gt; &lt;!--允许移动生成的文件--&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;!--允许覆盖生成的文件--&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.5&lt;/source&gt; &lt;target&gt;1.5&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;include&gt;**/*.tld&lt;/include&gt; &lt;/includes&gt; &lt;!-- 这里是false，用true会报 数据库连接 错误 --&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;include&gt;**/*.tld&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt; &lt;!-- 配置可变版本号,也就是常说的版本管理 （Spring、SpringMvc、Mybatis、Gson、Druid） --&gt; &lt;!-- 要针对某个依赖进行升级的时候只需要更改下面对应的版本号 --&gt; &lt;!-- 在上面使用版本号的时候需要用固定格式,如: $&#123;包名.version&#125; --&gt; &lt;properties&gt; &lt;slf4j.version&gt;1.7.7&lt;/slf4j.version&gt; &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt; &lt;org.apache.slf4j.log4j.version&gt;1.5.6&lt;/org.apache.slf4j.log4j.version&gt; &lt;mysql.version&gt;5.1.37&lt;/mysql.version&gt; &lt;com.alibaba.druid.version&gt;1.0.25&lt;/com.alibaba.druid.version&gt; &lt;com.mybatis.mybatis.version&gt;3.4.1&lt;/com.mybatis.mybatis.version&gt; &lt;com.mybatis.mybatis_spring.version&gt;1.3.0&lt;/com.mybatis.mybatis_spring.version&gt; &lt;com.google.gson.version&gt;2.7&lt;/com.google.gson.version&gt; &lt;javax.servlet.version&gt;3.1.0&lt;/javax.servlet.version&gt; &lt;org.springframework.version&gt;4.3.2.RELEASE&lt;/org.springframework.version&gt; &lt;redis.clients.version&gt;2.7.3&lt;/redis.clients.version&gt; &lt;com.dyuproject.protostuff.version&gt;1.0.8&lt;/com.dyuproject.protostuff.version&gt; &lt;developer.organization&gt;&lt;![CDATA[scengine]]&gt;&lt;/developer.organization&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;mybatis-generator.version&gt;1.3.2&lt;/mybatis-generator.version&gt; &lt;/properties&gt;&lt;/project&gt; 整合 Spring+SpringMVC+Mybatis刚才我们已经配置好了基本的目录，也引入了相应的项目资源库，接下我们需要对 Spring+SpringMvc+Mybatis 进行整合。 我们先打开 webapp 目录下面的 WEB-INF 目录中的 web.xml 文件,web.xml 文件是整合 web 项目的配置中心.我们在 web.xml 中加入如下内容: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;!DOCTYPE web-app PUBLIC"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN""http://java.sun.com/dtd/web-app_2_3.dtd" &gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1" metadata-complete="true"&gt; &lt;!--默认的首页--&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt;&lt;!-- 如果是用maven命令生成的xml，需要修改servlet版本为3.1 --&gt; &lt;!-- 配置DispatcherServlet --&gt; &lt;servlet&gt; &lt;display-name&gt;MyDemo&lt;/display-name&gt; &lt;!-- 项目名称 --&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;!-- mvc调度器 --&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 配置springMVC需要加载的配置文件 spring-dao.xml,spring-service.xml,spring-web.xml Mybatis - &gt; spring -&gt; springmvc --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;!-- 默认匹配所有的静态资源,此处配置出错,会产生错误500 --&gt; &lt;url-pattern&gt;/js/*&lt;/url-pattern&gt; &lt;url-pattern&gt;/css/*&lt;/url-pattern&gt; &lt;url-pattern&gt;/images/*&lt;/url-pattern&gt; &lt;url-pattern&gt;/fonts/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!--druid ==&gt; WEB方式监控配置--&gt; &lt;servlet&gt; &lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt; &lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt; &lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;druidWebStatFilter&lt;/filter-name&gt; &lt;filter-class&gt;com.alibaba.druid.support.http.WebStatFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;exclusions&lt;/param-name&gt; &lt;param-value&gt;/public/*,*.js,*.css,/druid*,*.jsp,*.swf&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;principalSessionName&lt;/param-name&gt; &lt;param-value&gt;sessionInfo&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;profileEnable&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;druidWebStatFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/static/view/404.html&lt;/location&gt; &lt;/error-page&gt;&lt;/web-app&gt; 在配置好 web.xml 文件后会报错，是因为我们有一些文件还没有创建。在 IDEA 中我们只需选中报错处，按下 Alt+Enter 即可生成相应的目录或文件。 我们首先需要在 src→main→resources 下创建一个 spring 目录，然后在 spring 目录下创建 spring 相关的控制文件。 在 spring 目录下创建 spring-dao.xml 文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;!-- 配置整合mybatis过程 --&gt; &lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt; &lt;!-- 使用数据库配置文件解耦 --&gt; &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; &lt;!-- 下面的druid配置都是基本配置,具体优化设置可以上网查询,也可以去github上面直接搜索druid --&gt; &lt;!-- 2.数据库连接池 --&gt; &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt; &lt;!-- 配置连接池属性 --&gt; &lt;property name="driverClassName" value="$&#123;jdbc.driver&#125;"/&gt; &lt;property name="url" value="$&#123;jdbc.url&#125;"/&gt; &lt;property name="username" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name="initialSize" value="1" /&gt; &lt;property name="minIdle" value="1" /&gt; &lt;property name="maxActive" value="10" /&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name="maxWait" value="10000" /&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name="timeBetweenEvictionRunsMillis" value="60000" /&gt; &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt; &lt;property name="minEvictableIdleTimeMillis" value="300000" /&gt; &lt;property name="testWhileIdle" value="true" /&gt; &lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt; &lt;property name="testOnBorrow" value="true" /&gt; &lt;property name="testOnReturn" value="false" /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name="poolPreparedStatements" value="true" /&gt; &lt;property name="maxPoolPreparedStatementPerConnectionSize" value="20" /&gt; &lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --&gt; &lt;property name="defaultAutoCommit" value="true" /&gt; &lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt; &lt;property name="validationQuery" value="select 1 " /&gt; &lt;property name="filters" value="stat" /&gt; &lt;property name="proxyFilters"&gt; &lt;list&gt; &lt;ref bean="logFilter" /&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 3.配置SqlSessionFactory对象 --&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;!-- 注入数据库连接池 --&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt; &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt; &lt;!-- 扫描entity包 使用别名 --&gt; &lt;!-- cn.acheng1314是我的应用程序的包名,你们需要使用你们自己的包名,也就是前面我们提到过的GroupId --&gt; &lt;property name="typeAliasesPackage" value="com.photoshareweb.entitys"/&gt; &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt; &lt;property name="mapperLocations" value="classpath:com/photoshareweb/mapping/*.xml"/&gt; &lt;/bean&gt; &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;!-- 注入sqlSessionFactory --&gt; &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt; &lt;!-- 给出需要扫描Dao接口包 --&gt; &lt;property name="basePackage" value="com.photoshareweb.dao"/&gt; &lt;/bean&gt; &lt;!-- 上面的druid的配置 --&gt; &lt;bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"&gt; &lt;property name="statementExecutableSqlLogEnable" value="false" /&gt; &lt;/bean&gt;&lt;/beans&gt; 上面的配置中,肯定也会出现报错的情况,这时候我们只需要选中报错的地方按下 Alt+Enter 就能生成相关的资源. 在 spring 目录下创建 spring-service.xml 文件 1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt; &lt;!-- 扫描service包下所有使用注解的类型 --&gt; &lt;!-- com.photoshareweb为我们应用的包名,当然也是我们前面提到过的GroupId --&gt; &lt;context:component-scan base-package="com.photoshareweb.service" /&gt; &lt;!-- 配置事务管理器 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;!-- 注入数据库连接池 --&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;/bean&gt; &lt;!-- 配置基于注解的声明式事务 --&gt; &lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;&lt;/beans&gt; 在 spring 目录下创建 spring-web.xml 文件 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt; &lt;!-- 配置SpringMVC --&gt; &lt;!-- 1.开启SpringMVC注解模式 --&gt; &lt;!-- 简化配置： (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 --&gt; &lt;mvc:annotation-driven/&gt; &lt;!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：js,gif,png (2)允许使用"/"做整体映射 --&gt; &lt;mvc:resources mapping="/css/**" location="/static/css/" /&gt; &lt;mvc:resources mapping="/images/**" location="/static/images/" /&gt; &lt;mvc:resources mapping="/view/**" location="/static/view/" /&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!-- 3.配置jsp 显示ViewResolver --&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt; &lt;property name="prefix" value="/WEB-INF/"/&gt; &lt;property name="suffix" value=".jsp"/&gt; &lt;/bean&gt; &lt;!-- 4.扫描web相关的bean配置 --&gt; &lt;context:component-scan base-package="com.photoshareweb"&gt; &lt;!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 --&gt; &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt; &lt;/context:component-scan&gt;&lt;/beans&gt; 现在我们会发现我们的 jdbc.properties 和 mybatis-config.xml 文件都是空的,我们需要继续写入内容。 jdbc.properties 是数据库连接的配置文件.如下: 1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/photosharewebjdbc.username=数据库用户名jdbc.password=数据库用户名对应的密码 上面的 jdbc.driver 为数据库连接的驱动,jdbc.url 为数据库的连接地址. mybatis-config.xml 顾名思义是 mybatis 的配置文件,如下: 1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;!-- 配置全局属性 --&gt; &lt;settings&gt; &lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt; &lt;setting name="useGeneratedKeys" value="true" /&gt; &lt;!-- 使用列别名替换列名 默认:true --&gt; &lt;setting name="useColumnLabel" value="true" /&gt; &lt;!-- 开启驼峰命名转换:Table&#123;create_time&#125; -&gt; Entity&#123;createTime&#125; --&gt; &lt;setting name="mapUnderscoreToCamelCase" value="true" /&gt; &lt;/settings&gt;&lt;/configuration&gt; 我们还需要为日志记录添加一个配置文件，我们需要在资源目录下面添加一个默认的配置文件 log4j2.xml 即可，如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- status=debug 可以查看log4j的装配过程 --&gt;&lt;configuration status="off" monitorInterval="1800"&gt; &lt;properties&gt; &lt;!--日志目录--&gt; &lt;property name="LOG_HOME"&gt;/logs/webLog&lt;/property&gt; &lt;!-- 日志备份目录 --&gt; &lt;property name="BACKUP_HOME"&gt;&#123;LOG_HOME&#125;/backup&lt;/property&gt; &lt;property name="STAT_NAME"&gt;stat&lt;/property&gt; &lt;property name="SERVER_NAME"&gt;global&lt;/property&gt; &lt;/properties&gt; &lt;appenders&gt; &lt;!-- 定义控制台输出 --&gt; &lt;Console name="Console" target="SYSTEM_OUT" follow="true"&gt; &lt;PatternLayout pattern="%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread][%file:%line] - %msg%n"/&gt; &lt;/Console&gt; &lt;!-- 程序员调试日志 --&gt; &lt;RollingRandomAccessFile name="DevLog" fileName="$&#123;LOG_HOME&#125;/$&#123;SERVER_NAME&#125;" filePattern="$&#123;LOG_HOME&#125;/$&#123;SERVER_NAME&#125;.%d&#123;yyyy-MM-dd-HH&#125;.log"&gt; &lt;PatternLayout pattern="%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread][%file:%line] - %msg%n"/&gt; &lt;Policies&gt; &lt;TimeBasedTriggeringPolicy interval="1" modulate="true"/&gt; &lt;/Policies&gt; &lt;/RollingRandomAccessFile&gt; &lt;!-- 游戏产品数据分析日志 --&gt; &lt;RollingRandomAccessFile name="ProductLog" fileName="$&#123;LOG_HOME&#125;/$&#123;SERVER_NAME&#125;_$&#123;STAT_NAME&#125;" filePattern="$&#123;LOG_HOME&#125;/$&#123;SERVER_NAME&#125;_$&#123;STAT_NAME&#125;.%d&#123;yyyy-MM-dd-HH&#125;.log"&gt; &lt;PatternLayout pattern="%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread][%file:%line] - %msg%n"/&gt; &lt;Policies&gt; &lt;TimeBasedTriggeringPolicy interval="1" modulate="true"/&gt; &lt;/Policies&gt; &lt;/RollingRandomAccessFile&gt; &lt;/appenders&gt; &lt;loggers&gt; &lt;!-- 3rdparty Loggers --&gt; &lt;logger name="org.springframework.core" level="info"&gt; &lt;/logger&gt; &lt;logger name="org.springframework.beans" level="info"&gt; &lt;/logger&gt; &lt;logger name="org.springframework.context" level="info"&gt; &lt;/logger&gt; &lt;logger name="org.springframework.web" level="info"&gt; &lt;/logger&gt; &lt;logger name="org.jboss.netty" level="warn"&gt; &lt;/logger&gt; &lt;logger name="org.apache.http" level="warn"&gt; &lt;/logger&gt; &lt;logger name="com.mchange.v2" level="warn"&gt; &lt;/logger&gt; &lt;!-- Game Stat logger --&gt; &lt;logger name="com.u9.global.service.log" level="info" additivity="false"&gt; &lt;appender-ref ref="ProductLog"/&gt; &lt;/logger&gt; &lt;!-- Root Logger --&gt; &lt;root level="DEBUG"&gt; &lt;appender-ref ref="DevLog"/&gt; &lt;appender-ref ref="Console"/&gt; &lt;/root&gt; &lt;/loggers&gt;&lt;/configuration&gt; 因为我们使用的是 mybatis-generator 来自动生成实体类和映射文件，因此我们还需要在资源目录下添加 mybatis_generator.properties 和 generatorConfig 两个文件。 mybatis_generator.properties 是 mybatis 连接数据库的文件，如下: 12345678910jdbc_driver=com.mysql.jdbc.Driverjdbc_url=jdbc:mysql://localhost:3306/photosharewebjdbc_username=数据库用户名jdbc_password=数据库用户名对应的密码targetProject=src/main/javamodelPackage=com.photoshareweb.entityssqlMapperPackage=com.photoshareweb.mappingdaoMapperPackage=com.photoshareweb.dao generatorConfig 是 mybatis-generator 的配置文件，如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;!-- 该配置文件说明插件需要如何生成，以及生成对应的包名，路径等信息。 还有重要的就是我们要生成的实体类所对应的的表或者试图 --&gt;&lt;generatorConfiguration&gt; &lt;properties resource="mybatis_generator.properties" /&gt; &lt;context id="MBG" targetRuntime="MyBatis3" defaultModelType="conditional"&gt; &lt;!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection, javaTypeResolver?,javaModelGenerator,sqlMapGenerator?, javaClientGenerator?,table+ --&gt; &lt;!--&lt;plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" /&gt;--&gt; &lt;!--&amp;lt;!&amp;ndash; 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法 &amp;ndash;&amp;gt;--&gt; &lt;!--&lt;plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/&gt;--&gt; &lt;commentGenerator&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt; &lt;property name="suppressAllComments" value="false"/&gt; &lt;!-- 不希望生成的注释中包含时间戳 --&gt; &lt;property name="suppressDate" value="true" /&gt; &lt;!-- 是否 自动为每一个生成的类创建一个构造方法--&gt; &lt;property name="constructorBased" value="false"/&gt; &lt;/commentGenerator&gt; &lt;!-- 数据库连接 --&gt; &lt;jdbcConnection driverClass="$&#123;jdbc_driver&#125;" connectionURL="$&#123;jdbc_url&#125;" userId="$&#123;jdbc_username&#125;" password="$&#123;jdbc_password&#125;"&gt; &lt;/jdbcConnection&gt; &lt;!-- 指定生成的类型为java类型，避免数据库中number等类型字段 --&gt; &lt;javaTypeResolver&gt; &lt;property name="forceBigDecimals" value="false"/&gt; &lt;/javaTypeResolver&gt; &lt;!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 --&gt; &lt;javaModelGenerator targetPackage="$&#123;modelPackage&#125;" targetProject="$&#123;targetProject&#125;"&gt; &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt; &lt;property name="trimStrings" value="true"/&gt; &lt;/javaModelGenerator&gt; &lt;!--对应的xml mapper文件 --&gt; &lt;sqlMapGenerator targetPackage="$&#123;sqlMapperPackage&#125;" targetProject="$&#123;targetProject&#125;" &gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 对应的dao接口 --&gt; &lt;javaClientGenerator type="XMLMAPPER" targetPackage="$&#123;daoMapperPackage&#125;" targetProject="$&#123;targetProject&#125;" &gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;/javaClientGenerator&gt; &lt;!-- 表名对应生成的实体 --&gt; &lt;table tableName="webuser" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false" /&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 好啦，到这里具体的配置文件都搞定了！ 配置 Tomcat我们想要把项目跑起来，当然还需要配置 Tomcat 服务器啦！ 首先我们在主页面的点击右上角点击那个下拉框，再点击 Edit Configurations。 然后在弹出的对话框中点击+号，找到 Tomcat Server ，选择 Local. 在弹出的对话框中，选择 Deployment,点击右侧的+号，选择 Artifact。 在弹出的对话框中选择后缀为:exploded 的选项 最后回到 Server 选项卡，配置一下 Tomcat 的基本参数，最后点击 Ok 即可 回到主界面点击右上角的 Debug 按钮，如果出现以下界面，就说明服务器启动成功了。 写在最后好啦，我们一个最基本的基于 Spring+SpringMVC+Mybatis 搭建的 web 项目就建好了，希望我的总结也能够给你提供一点帮助，如果文章中出现错误或存在不严谨的地方，也请大家能够批评指出。]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过Java生成七牛云uptoken]]></title>
    <url>%2F%E9%80%9A%E8%BF%87java%E7%94%9F%E6%88%90%E4%B8%83%E7%89%9B%E4%BA%91uptoken.html</url>
    <content type="text"><![CDATA[写在前面最近在写一个图片分享网站类型的小 demo，使用七牛云图片上传需要服务端生成上传凭证 uptoken。本来对后端了解的不是很多，看了官网的说明，写了一个最基本的生成方法，所以总结一下生成 uptoken 的具体步骤。我这里介绍的是使用七牛云 Java SDK 的生成方法。 简介 此 SDK 适用于 Java 7 及以上版本。使用此 SDK 构建您的网络应用程序，能让您以非常便捷地方式将数据安全地存储 到七牛云上。无论您的网络应用是一个网站程序，还是包括从云端（服务端程序）到终端（手持设备应用）的架构服务或应 用，通过七牛云及其 SDK，都能让您应用程序的终端用户高速上传和下载，同时也让您的服务端更加轻盈。Java SDK 属于七牛服务端 SDK 之一，主要有如下功能： 提供生成客户端上传所需的上传凭证的功能 提供文件从服务端直接上传七牛的功能 提供对七牛空间中文件进行管理的功能 提供对七牛空间中文件进行处理的功能 提供七牛 CDN 相关的刷新，预取，日志功能 官方文档 七牛云 java-sdk 官方文档 安装我们需要安装七牛云的 java-sdk，我这里介绍的是 Maven 的安装方法 12345&lt;dependency&gt; &lt;groupId&gt;com.qiniu&lt;/groupId&gt; &lt;artifactId&gt;qiniu-java-sdk&lt;/artifactId&gt; &lt;version&gt;[7.2.0, 7.2.99]&lt;/version&gt;&lt;/dependency&gt; 这里的 version 指定了一个版本范围，每次更新 pom.xml 的时候会尝试去下载 7.2.x 版本中的最新版本，我们也可以手动指定一个固定的版本。 使用引入 java-sdk 以后，我们需要创建一个 Auth 类，这个类的代码如下package com.qiniu.util;import com.qiniu.http.Client;import javax.crypto.Mac;import javax.crypto.spec.SecretKeySpec;import java.net.URI;import java.security.GeneralSecurityException;public final class Auth &#123; /** * 上传策略 * 参考文档：&lt;a href="https://developer.qiniu.com/kodo/manual/put-policy"&gt;上传策略&lt;/a&gt; */ private static final String[] policyFields = new String[]&#123; "callbackUrl", "callbackBody", "callbackHost", "callbackBodyType", "callbackFetchKey", "returnUrl", "returnBody", "endUser", "saveKey", "insertOnly", "isPrefixalScope", "detectMime", "mimeLimit", "fsizeLimit", "fsizeMin", "persistentOps", "persistentNotifyUrl", "persistentPipeline", "deleteAfterDays", "fileType", &#125;; private static final String[] deprecatedPolicyFields = new String[]&#123; "asyncOps", &#125;; public final String accessKey; private final SecretKeySpec secretKey; private Auth(String accessKey, SecretKeySpec secretKeySpec) &#123; this.accessKey = accessKey; this.secretKey = secretKeySpec; &#125; public static Auth create(String accessKey, String secretKey) &#123; if (StringUtils.isNullOrEmpty(accessKey) || StringUtils.isNullOrEmpty(secretKey)) &#123; throw new IllegalArgumentException("empty key"); &#125; byte[] sk = StringUtils.utf8Bytes(secretKey); SecretKeySpec secretKeySpec = new SecretKeySpec(sk, "HmacSHA1"); return new Auth(accessKey, secretKeySpec); &#125; private static void copyPolicy(final StringMap policy, StringMap originPolicy, final boolean strict) &#123; if (originPolicy == null) &#123; return; &#125; originPolicy.forEach(new StringMap.Consumer() &#123; @Override public void accept(String key, Object value) &#123; if (StringUtils.inStringArray(key, deprecatedPolicyFields)) &#123; throw new IllegalArgumentException(key + " is deprecated!"); &#125; if (!strict || StringUtils.inStringArray(key, policyFields)) &#123; policy.put(key, value); &#125; &#125; &#125;); &#125; private Mac createMac() &#123; Mac mac; try &#123; mac = javax.crypto.Mac.getInstance("HmacSHA1"); mac.init(secretKey); &#125; catch (GeneralSecurityException e) &#123; e.printStackTrace(); throw new IllegalArgumentException(e); &#125; return mac; &#125; public String sign(byte[] data) &#123; Mac mac = createMac(); String encodedSign = UrlSafeBase64.encodeToString(mac.doFinal(data)); return this.accessKey + ":" + encodedSign; &#125; public String sign(String data) &#123; return sign(StringUtils.utf8Bytes(data)); &#125; public String signWithData(byte[] data) &#123; String s = UrlSafeBase64.encodeToString(data); return sign(StringUtils.utf8Bytes(s)) + ":" + s; &#125; public String signWithData(String data) &#123; return signWithData(StringUtils.utf8Bytes(data)); &#125; /** * 生成HTTP请求签名字符串 * * @param urlString * @param body * @param contentType * @return */ public String signRequest(String urlString, byte[] body, String contentType) &#123; URI uri = URI.create(urlString); String path = uri.getRawPath(); String query = uri.getRawQuery(); Mac mac = createMac(); mac.update(StringUtils.utf8Bytes(path)); if (query != null &amp;&amp; query.length() != 0) &#123; mac.update((byte) ('?')); mac.update(StringUtils.utf8Bytes(query)); &#125; mac.update((byte) '\n'); if (body != null &amp;&amp; Client.FormMime.equalsIgnoreCase(contentType)) &#123; mac.update(body); &#125; String digest = UrlSafeBase64.encodeToString(mac.doFinal()); return this.accessKey + ":" + digest; &#125; /** * 验证回调签名是否正确 * * @param originAuthorization 待验证签名字符串，以 "QBox "作为起始字符 * @param url 回调地址 * @param body 回调请求体。原始请求体，不要解析后再封装成新的请求体--可能导致签名不一致。 * @param contentType 回调ContentType * @return */ public boolean isValidCallback(String originAuthorization, String url, byte[] body, String contentType) &#123; String authorization = "QBox " + signRequest(url, body, contentType); return authorization.equals(originAuthorization); &#125; /** * 下载签名 * * @param baseUrl 待签名文件url，如 http://img.domain.com/u/3.jpg 、 * http://img.domain.com/u/3.jpg?imageView2/1/w/120 * @return */ public String privateDownloadUrl(String baseUrl) &#123; return privateDownloadUrl(baseUrl, 3600); &#125; /** * 下载签名 * * @param baseUrl 待签名文件url，如 http://img.domain.com/u/3.jpg 、 * http://img.domain.com/u/3.jpg?imageView2/1/w/120 * @param expires 有效时长，单位秒。默认3600s * @return */ public String privateDownloadUrl(String baseUrl, long expires) &#123; long deadline = System.currentTimeMillis() / 1000 + expires; return privateDownloadUrlWithDeadline(baseUrl, deadline); &#125; public String privateDownloadUrlWithDeadline(String baseUrl, long deadline) &#123; StringBuilder b = new StringBuilder(); b.append(baseUrl); int pos = baseUrl.indexOf("?"); if (pos &gt; 0) &#123; b.append("&amp;e="); &#125; else &#123; b.append("?e="); &#125; b.append(deadline); String token = sign(StringUtils.utf8Bytes(b.toString())); b.append("&amp;token="); b.append(token); return b.toString(); &#125; /** * scope = bucket * 一般情况下可通过此方法获取token * * @param bucket 空间名 * @return 生成的上传token */ public String uploadToken(String bucket) &#123; return uploadToken(bucket, null, 3600, null, true); &#125; /** * scope = bucket:key * 同名文件覆盖操作、只能上传指定key的文件可以可通过此方法获取token * * @param bucket 空间名 * @param key key，可为 null * @return 生成的上传token */ public String uploadToken(String bucket, String key) &#123; return uploadToken(bucket, key, 3600, null, true); &#125; /** * 生成上传token * * @param bucket 空间名 * @param key key，可为 null * @param expires 有效时长，单位秒 * @param policy 上传策略的其它参数，如 new StringMap().put("endUser", "uid").putNotEmpty("returnBody", "")。 * scope通过 bucket、key间接设置，deadline 通过 expires 间接设置 * @return 生成的上传token */ public String uploadToken(String bucket, String key, long expires, StringMap policy) &#123; return uploadToken(bucket, key, expires, policy, true); &#125; /** * 生成上传token * * @param bucket 空间名 * @param key key，可为 null * @param expires 有效时长，单位秒。默认3600s * @param policy 上传策略的其它参数，如 new StringMap().put("endUser", "uid").putNotEmpty("returnBody", "")。 * scope通过 bucket、key间接设置，deadline 通过 expires 间接设置 * @param strict 是否去除非限定的策略字段，默认true * @return 生成的上传token */ public String uploadToken(String bucket, String key, long expires, StringMap policy, boolean strict) &#123; long deadline = System.currentTimeMillis() / 1000 + expires; return uploadTokenWithDeadline(bucket, key, deadline, policy, strict); &#125; public String uploadTokenWithDeadline(String bucket, String key, long deadline, StringMap policy, boolean strict) &#123; // TODO UpHosts Global String scope = bucket; if (key != null) &#123; scope = bucket + ":" + key; &#125; StringMap x = new StringMap(); copyPolicy(x, policy, strict); x.put("scope", scope); x.put("deadline", deadline); String s = Json.encode(x); return signWithData(StringUtils.utf8Bytes(s)); &#125; public String uploadTokenWithPolicy(Object obj) &#123; String s = Json.encode(obj); return signWithData(StringUtils.utf8Bytes(s)); &#125; public StringMap authorization(String url, byte[] body, String contentType) &#123; String authorization = "QBox " + signRequest(url, body, contentType); return new StringMap().put("Authorization", authorization); &#125; public StringMap authorization(String url) &#123; return authorization(url, null, null); &#125; /** * 生成HTTP请求签名字符串 * * @param urlString * @param body * @param contentType * @return */ public String signRequestV2(String urlString, String method, byte[] body, String contentType) &#123; URI uri = URI.create(urlString); Mac mac = createMac(); StringBuilder sb = new StringBuilder(); sb.append(String.format("%s %s", method, uri.getPath())); if (uri.getQuery() != null) &#123; sb.append(String.format("?%s", uri.getQuery())); &#125; sb.append(String.format("\nHost: %s", uri.getHost())); if (uri.getPort() &gt; 0) &#123; sb.append(String.format(":%d", uri.getPort())); &#125; if (contentType != null) &#123; sb.append(String.format("\nContent-Type: %s", contentType)); &#125; // body sb.append("\n\n"); if (body != null &amp;&amp; body.length &gt; 0 &amp;&amp; !StringUtils.isNullOrEmpty(contentType)) &#123; if (contentType.equals(Client.FormMime) || contentType.equals(Client.JsonMime)) &#123; sb.append(new String(body)); &#125; &#125; System.out.println(sb.toString()); mac.update(StringUtils.utf8Bytes(sb.toString())); String digest = UrlSafeBase64.encodeToString(mac.doFinal()); return this.accessKey + ":" + digest; &#125; public StringMap authorizationV2(String url, String method, byte[] body, String contentType) &#123; String authorization = "Qiniu " + signRequestV2(url, method, body, contentType); return new StringMap().put("Authorization", authorization); &#125; public StringMap authorizationV2(String url) &#123; return authorizationV2(url, "GET", null, null); &#125;&#125; 如果出现报错，只要导入相应的包即可，Auth 代码的 github 地址为 Auth 代码 github 地址 创建 Auth 类后，下面我们就来看一下如何生成一个最简单的上传凭证。最简单的上传凭证只需要 AccessKey，SecretKey 和 Bucket 就可以。 123456String accessKey = "access key";//七牛云账号对应的公匙String secretKey = "secret key";//七牛云账号对应的司匙String bucket = "bucket name";//上传图片到的存储空间Auth auth = Auth.create(accessKey, secretKey);String upToken = auth.uploadToken(bucket);//获取uptoken 接口示例我在这里展示一下我的 demo 中获取 uptoken 接口的示例，大家可以参考一下 1234567891011121314151617181920212223242526package com.photoshareweb.controller;import com.photoshareweb.common.Auth;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(value = "/PhotoShareWeb/share/auth")public class AuthController &#123; //通过七牛云上传凭证 @RequestMapping(value = "/getUpToken",method = RequestMethod.GET) public @ResponseBody String getUpToken()&#123; String accessKey = "access key";//七牛云账号对应的公匙 String secretKey = "secret key";//七牛云账号对应的司匙 String bucket = "bucket name";//上传图片到的存储空间 Auth auth = Auth.create(accessKey, secretKey); String upToken = auth.uploadToken(bucket); return upToken; &#125;&#125; 写在最后好啦，这样我们就可以生成一个最基本的 uptoken 了，当然只是最基本的，更多的用法大家可以参考官方文档。]]></content>
      <categories>
        <category>七牛云</category>
      </categories>
      <tags>
        <tag>七牛云</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过JavaScript实现七牛云图片上传]]></title>
    <url>%2F%E9%80%9A%E8%BF%87JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0.html</url>
    <content type="text"><![CDATA[写在前面最近在做一个图片分享网站类型的小 demo，我的想法是将用户上传的图片保存到七牛云上，然后将获取的链接存入数据库中。虽然以前写博客一直都是用七牛云来存储配图，但对于如何通过七牛云 JS 的 SDK 来完成上传操作还真是不太了解。在看了官网的教程后，有一些地方不是很明确，查了一些资料，所以总结一下前端如何通过 js 上传图片到七牛云。 官方文档 七牛云 Qiniu-JavaScript-SDK 官方文档 概述 Qiniu-JavaScript-SDK （下文简称为 JS-SDK）适用于 IE8+、Chrome、Firefox、Safari 等浏览器，基于七牛云存储官方 API 构建，其中上传功能基于 Plupload 插件封装。开发者基于 JS-SDK 可以方便的从浏览器端上传文件至七牛云存储，并对上传成功后的图片进行丰富的数据处理操作。 安装因为七牛云的 JS-SDK 是基于 Plupload 插件封装的，所以我们需要在引入七牛云的 js 依赖文件前，引入 Plupload 的相关 js 依赖文件。我这里介绍使用 NPM 安装的方法。 Plupload 下载 1npm install Plupload --save-dev qiniu-js 下载 1npm install qiniu-js --save-dev 使用在使用前我们需要在页面里引入相应的 js 依赖文件。 在页面中引入 plupload，plupload.full.min.js（生产环境）或 引入 plupload.dev.js 和 moxie.js（开发调试）。这些 js 文件可在 node_modules 文件夹下的 plupload 的文件夹中找到。 在页面中引入 qiniu.min.js（生产环境）或 qiniu.js（开发调试）这些 js 文件可在 node_modules 文件夹下的 qiniu-js 的文件夹中找到。 例如 1234//import js 具体路径可能会不同require("../../js/qiniu/plupload/plupload.dev.js");require("../../js/qiniu/plupload/moxie.js");require("../../js/qiniu/qiniu.js"); 然后需要在页面中初始化 uploader，如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596var uploader = Qiniu.uploader(&#123; disable_statistics_report: false, // 禁止自动发送上传统计信息到七牛，默认允许发送 runtimes: "html5,flash,html4", // 上传模式,依次退化 browse_button: "pickfiles", // 上传选择的点选按钮，**必需** // 在初始化时，uptoken, uptoken_url, uptoken_func 三个参数中必须有一个被设置 // 切如果提供了多个，其优先级为 uptoken &gt; uptoken_url &gt; uptoken_func // 其中 uptoken 是直接提供上传凭证，uptoken_url 是提供了获取上传凭证的地址，如果需要定制获取 uptoken 的过程则可以设置 uptoken_func uptoken: "&lt;Your upload token&gt;", // uptoken 是上传凭证，由其他程序生成 // uptoken_url: "/uptoken", // Ajax 请求 uptoken 的 Url，**强烈建议设置**（服务端提供） // uptoken_func: function(file)&#123; // 在需要获取 uptoken 时，该方法会被调用 // // do something // return uptoken; // &#125;, get_new_uptoken: false, // 设置上传文件的时候是否每次都重新获取新的 uptoken // downtoken_url: '/downtoken', // Ajax请求downToken的Url，私有空间时使用,JS-SDK 将向该地址POST文件的key和domain,服务端返回的JSON必须包含`url`字段，`url`值为该文件的下载地址 unique_names: false, // 默认 false，key 为文件名。若开启该选项，JS-SDK 会为每个文件自动生成key（文件名） save_key: false, // 默认 false。若在服务端生成 uptoken 的上传策略中指定了 `save_key`，则开启，SDK在前端将不对key进行任何处理 domain: "&lt;Your upload token&gt;", // bucket 域名（就是你在七牛云上创建的存储空间的测试域名），下载资源时用到，如：'http://xxx.bkt.clouddn.com/' **必需** container: "container", // 上传区域 DOM ID，默认是 browser_button 的父元素， max_file_size: "10mb", // 最大文件体积限制 flash_swf_url: "../plupload/Moxie.swf", //引入 flash,相对路径，这个也可以在 plupload 的文件夹中找到 max_retries: 3, // 上传失败最大重试次数 dragdrop: true, // 开启可拖曳上传 drop_element: "photo-container", // 拖曳上传区域元素的 ID，拖曳文件或文件夹后可触发上传 chunk_size: "4mb", // 分块上传时，每块的体积 auto_start: true, // 选择文件后自动上传，若关闭需要自己绑定事件触发上传, //x_vars : &#123; // 自定义变量，参考http://developer.qiniu.com/docs/v6/api/overview/up/response/vars.html // 'time' : function(up,file) &#123; // var time = (new Date()).getTime(); // do something with 'time' // return time; // &#125;, // 'size' : function(up,file) &#123; // var size = file.size; // do something with 'size' // return size; // &#125; //&#125;, init: &#123; FilesAdded: function(up, files) &#123; plupload.each(files, function(file) &#123; // 文件添加进队列后,处理相关的事情 &#125;); &#125;, BeforeUpload: function(up, file) &#123; // 每个文件上传前,处理相关的事情 console.log("上传开始"); &#125;, UploadProgress: function(up, file) &#123; // 每个文件上传时,处理相关的事情 console.log("上传中"); &#125;, FileUploaded: function(up, file, info) &#123; // 每个文件上传成功后,处理相关的事情 // 其中 info.response 是文件上传成功后，服务端返回的json，形式如 // &#123; // "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98", // "key": "gogopher.jpg" // &#125; // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html var domain = up.getOption("domain"); var res = JSON.parse(info.response); var sourceLink = domain + res.key; //获取上传成功后的文件的Url; &#125;, Error: function(up, err, errTip) &#123; base.hideLoading(); //上传出错时,处理相关的事情 if (file.code == "-600") &#123; base.showAlertDialog("上传图片的大小不能超过10mb！"); &#125; else if (file.code == "-601") &#123; base.showAlertDialog("上传图片的格式有误！"); &#125; else &#123; base.showAlertDialog(err); &#125; &#125;, UploadComplete: function() &#123; //队列文件处理完毕后,处理相关的事情 &#125;, Key: function(up, file) &#123; // 若想在前端对每个文件的key进行个性化处理，可以配置该函数 // 我使用的是图片名加上当前时间来定义key // 该配置必须要在 unique_names: false , save_key: false 时才生效 // do something with key here var timestamp = Date.parse(new Date()); var key = file.name + "/" + timestamp; return key; &#125; &#125; // domain 为七牛空间（bucket)对应的域名，选择某个空间后，可通过"空间设置-&gt;基本设置-&gt;域名设置"查看获取 // uploader 为一个 plupload 对象，继承了所有 plupload 的方法，参考http://plupload.com/docs&#125;); 以上 uploader 的配置适用于单文件上传的情况。相信小伙伴们看完都有一个疑惑，什么是 uptoken 呢？ uptoken 是 我们图片上传的上传凭证，它会根据你的 Access Key 和 Secret Key 还有你上传图片到的存储空间 bucket 来生成(最基本的三项)。那么怎么生成 uptoken 呢？这当然不是由我们前端自己来生成的，这个时候就需要我们后端的小伙伴来帮帮忙了。具体可以参考我的另一篇博客,通过 java 生成七牛云 uptoken。 写在最后关于七牛云上传组件的用法还有很多，如对上传的图片生成水印等，大家可以好好参考一下官方文档。我总结的只是一些最简单的用法，目前我的小 demo 只需要用到这一些，以后有需要再继续拓展 :)]]></content>
      <categories>
        <category>七牛云</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>七牛云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown—文档解读]]></title>
    <url>%2FMarkdownStudy.html</url>
    <content type="text"><![CDATA[写在前面记得第一次接触 Markdown 应该是在 github 上，当时看每一个仓库里的 README 文档都是 md 格式的，文档内容的排版让我眼前一亮。诶这是什么东西，好奇的我赶紧百度了一下，看完官方文档，感觉自己推开了新世界的大门，有没有很方便！看完文档后，感觉文档一些东西介绍的有一点晦涩，不容易理解。所以我就想分享一下我对 Markdown 的一些认识。 一、认识 Markdown什么是 Markdown Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 创始人 John Gruber 的 Markdown 语法说明 Markdown 中文版语法说明 Markdown 其实是一种文档编辑的标记语言，它的目标是实现「易读易写」，成为一种适用于网络的书写语言。那怎样才能算易读易写呢？我们在书写文档时，有时候最头疼的就是文章的排版问题，这个时候使用 Markdown 就很方便了。试想一下在写文档时，用键盘一气呵成敲好内容，而且这个时候文章已经排版好了，大声告诉我，是不是很方便。现在很多网站都支持 Markdown 形式的文档书写，比如简书、掘金、github……Markdown 在很大程度上能提高你的码字效率和体验，如果你想快速编写格式丰富并且美观的文章，Markdown 是你的不二选择，怎么有一种打广告的感觉…… 兼容 HTML相信大家对超文本标记语言 HTML 都不陌生，那么 Markdown 和 HTML 有什么关系呢？简单来说就是，HTML 是一种发布的格式，而 Markdown 是一种书写的格式。什么意思呢，就是你在浏览器里边看到的所有东西都是由 HTML 标记组成的。那么 Markdown 想要显示对应的内容该怎么办呢，答案就是将其解析为 HTML 的形式来显示内容。 举一个例子，在 Markdown 语法中，有序列表使用数字接着一个英文句点来表示: 1231. Bird2. McHale3. Parish 上面的列表所产生的 HTML 标记为： 12345&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt; 上面的例子就是 Markdown 到 HTML 的转换。这个时候可能有的同学就会提问了，那如果我在 Markdown 里边插入 HTML 标签，这时候该怎么显示呢？这就是我想告诉大家的 Markdown 的一个特性兼容 HTML。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown 只要直接加标签就可以了。要制约的只有一些 HTML 区块元素――比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p&gt; 标签。也就是说你如果在 Markdown 文档里添加了一个&lt;table&gt;标签，最后解析完成后，它仍然是一个&lt;table&gt;标签，不会解析错误，当然你如果想以代码段的形式呈现就是另外的情况了。 特殊字符自动转换在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;但你如果使用 Markdown，你就无需担心这些问题，它让你可以自然地书写字符，如果需要转换则全由它来处理。 Markdown 编辑器工欲善其事必先利其器，那么我们该用什么来编辑 Markdown 文档了？当然你用文本编辑器也是可以的…..现在支持 Markdown 语法编辑的有很多，每个人的习惯不同可能选择不同，只要自己用着顺手就行，这里我推荐几个比较热门的编辑器。 在线编辑器 Dillinger Dillinger 简洁却不失强大，同样支持支持 md, styled HTML, pdf 文件导出。 支持 dropbox, onedrive，google drive, github 存储。 Windows 平台编辑器 MarkdownPad MarkdownPad一款非常强大的 win 系统桌面端编辑器，支持实时预览，PDF 导出及导出格式自定义，公式编辑代码，桌面端使用最为广泛的 markown 编辑工具之一，推荐适用 pro 版，有破解版。 OS X 平台编辑器 Mou Mou 是 Mac 下杰出的 Markdown 编辑器，提供语法高亮、在线预览、同步滚动、全屏模式，支持自定保存、自动匹配，允许自定义主题，支持 CSS，HTML 和 PDF 导出等。 多平台编辑器 vscode 我现在一般使用 vscode 进行编辑，只需要安装Markdown Preview Enhanced插件，因为现在码代码基本都用 vscode，所以我用起来还是挺顺手的，强行安利一波。 下面再给大家提供一些 Markdown 编辑器参考网址，总能找到适合你的一款。 10 款流行的 Markdown 编辑器，总有一款适合你 Markdown 编辑器一览,总有一款适合你 Markdown 编辑器之比较 好用的 Markdown 编辑器一览 二、Markdown 语法介绍段落一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。空行的定义即是在显示上看起来像是空的，便会被视为空行。比如，若某一行只包含空格和制表符，那么该行不会显示任何东西，则该行也会被视为空行。 这里还需要注意的一点是，我们在写文章时，经常会习惯使用空格或制表符来缩进段落，但在 Markdown 语法里边普通段落是不能用空格或制表符来表示缩进的，即便加了也不会显示缩进。这是因为 Markdown 作为一种轻量级的文本编辑标记语言一开始只是为英文设计的，所以省去了缩进式的写法使书写更为简洁。那么如果我们一定要使用缩进呢？这里有四种方法可以实现。 在段落开头插入半角空格: &amp;ensp;或 &amp;#8194; 在段落开头插入全角空格: &amp;emsp;或 &amp;#8195; 在段落开头插入不换行空格: &amp;nbsp;或 &amp;#160; 如果是网页的话，最好使用样式表,将下段代码插入相应 css 即可。 123p &#123; text-indent: 2em; /*首行缩进*/&#125; 换行 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符） 在 Markdown 语法中，除了段落自动换行以外，我们可以通过插入换行符来使段落强制换行。这里需要注意的一点是 Markdown 语法中换行符的插入和其他大部分的 text-to-HTML 格式不一样。一般是点击回车即可换行，但在 Markdown 语法中必须在文字末尾输入 2 个及以上的空格，再点击回车才可实现换行。不过在一些编辑器中可以设置为回车换行，我使用的 Markdown Preview Enhanced 插件里默认的换行方式就是使用回车换行，当然你如果不习惯也可以更改设置。 空行刚开始使用 Markdown 语法时，我发现无论两个段落之间相距了多少行，在不做其他处理的情况下，最终显示时两个段落间的距离都只有一个空行。后来了解到 markdown 会把多余空行省略，这是它的成功之处之一，文章结构不靠空行来区分。但有时候我们需要添加空行来调整段落间的距离时，这个时候该怎么办呢？其实原理和实现缩进是一样的，这里有五种方法可以实现。 使用半角空格来代表空行: &amp;ensp;或 &amp;#8194; 使用全角空格来代表空行: &amp;emsp;或 &amp;#8195; 使用换行空格来代表空行: &amp;nbsp;或 &amp;#160; 直接插入换行符: &lt;br/&gt; 调整 markdown 的 css，改变 p 的 margin-bottom 属性，也可以实现段落间的距离的调整，不过这种方式是全局性的，可能不会每种情况都适用。 标题Markdown 支持两种标题的语法，类 Setext 形式 和类 Atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），任何数量的 = 和 - 都可以有效果。如下图: 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，这一种形式使用得相对多一些。这里需要注意一点就是在#和标题间最好隔一个空格，不然可能在有的编辑器下显示有问题，如下图: 区块引用 BlockquotesMarkdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。一共有两种方式，一种是在引用段落的每一行最前面加上&gt;，还有一种方式是只在引用段落的第一行最前面加上&gt;，这两种方式都能标记区块引用。 区块引用里还可以可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等 列表Markdown 支持有序列表和无序列表。 无序列表使用*、+或是-作为列表标记: 有序列表则使用数字接着一个英文句点,这里需要注意的一点是你在列表标记上使用的数字并不会影响最后输出的 HTML 结果，就是说 不管你写成这样 1231. 这是有序列表1. 这是有序列表1. 这是有序列表 还是这样 1233. 这是有序列表1. 这是有序列表8. 这是有序列表 最后的输出结果左边的列表标记都是根据第一行的标记数字往后顺序递增，不会顺序混乱，如图: 这里还需注意的是两个独立的有序列表间，如果中间没有其他的标记元素作为分隔，那么这两个有序列表则被视为一个有序列表来进行标记的顺序递增。 还需要注意几点的是 列表的项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符 项目列表很可能会不小心产生，比方说如果在行首出现数字-句点-空白的情况，则会产生项目列表。 11986. What a great season. 可以通过在句点前面加上反斜杠来避免 11986\. What a great season. 代码块作为一个程序猿，接触最多的自然是代码啦，那么在 Markdown 语法中该如何表示呢？简单说，插入代码可能的情况有以下两种: 只需要标记一小段行内代码，这种情况需要使用反引号 ` 把需要标记的代码给包起来。注意，如果你要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段。 需要标记一大段代码(即已经排版好的代码区块)，这里有两种方式来标记。 一种方式是通过简单的缩进 4 个空格或是 1 个制表符来标记。 123这是一个普通段落： 这是一个代码区块。 另一种 Fenced Code Block 方式是通过在第一行和最后一行添加三个反引号，中间的行为代码的形式来进行标记。在第一行的反引号加上代码类型，有助于代码在某些编辑器下的高亮显示。 123```&lt;代码块&gt;``` 分割线华丽的分割线该如何来显示呢？我们只需在一行内输入三个以上的*或-或_来建立分割线，并且这一行中不能够包含其他东西。恩..你如果想要在符号间加几个空格也是可以的，这样也可以建立分割线。 链接在写文章时，我们经常会插入一些链接。在 Markdown 语法中一共支持两种形式的链接语法: 行内式和参考式两种形式。 参考式的形式，采用一个方括号来标记链接文字，方括号后紧跟一个圆括号标记链接地址，如果还想要加上链接的 title 文字，只需要在链接地址后面隔一个空格，用双引号把 title 文字包起来即可。 1[链接文字](链接地址 &quot;title&quot;) 参考式的形式，采用一个方括号来标记链接文字，方括号后紧跟一个方括号来填入辨识链接地址的标记，然后你可以在文件的任意处将该标记的内容标记出来。我认为这种形式一方面是比较好读，增加链接而不让文章的阅读感觉被打断，另一方面也适用于在文章的不同位置需要使用相同的链接地址这种情况，这时只需要定义一次，然后就可以全局引用。 123[链接文字][链接标识][链接标识]: 链接地址 &quot;title&quot; (可在文件任何地方定义，title 内容，可以用单引号、双引号或是括弧包裹) 需要注意: 链接标识可以由字母、数字、空白和标点符号组成，但是并不区分大小写。 链接标识可以为空，此时链接变为隐式链接，这种情况下，链接标识会视为等同于链接文字，链接内容通过链接文字来定义。 123[链接文字][][链接文字]: 链接地址 &quot;title&quot; 还有一种链接方式是自动链接，Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样。 1&lt;https://www.baidu.com/?tn=90294326_hao_pg&gt; 强调在 Markdown 语法中，使用*和_来作为标记强调字词的符号。 被一个*或_包围的字词，最后显示的是斜体。 被两个*或_包围的字词，最后显示的是加粗体。 图片在 Markdown 语法中，图片的引入方法和链接的方法很相似，也有两种形式，行内式和参考式。唯一不同的是，图片映入时需要在第一个方括号前添上一个感叹号!,因为基本类似，这里就不继续详说了，详细语法可参考链接。 参考文献 Markdown 中文版语法说明 Markdown 编辑器之比较 好用的 Markdown 编辑器一览 怎样引导新手使用 Markdown？ Markdown——入门指南 写在最后总结了一下对 Markdown 的认识后，感觉自己对 Markdown 的理解又有了一些新的收获，注意到了一些以前忽视的东西。写一写总结感觉对自己帮助真的好大 :) ,希望我的总结也能够给你了解学习 Markdown 提供一点帮助，如果文章中出现错误或存在不严谨的地方，也请大家能够批评指出。]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
