<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CavsZhouyou&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cavszhouyou.top/"/>
  <updated>2018-02-09T13:02:04.669Z</updated>
  <id>http://cavszhouyou.top/</id>
  
  <author>
    <name>CavsZhouyou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过java生成七牛云uptoken</title>
    <link href="http://cavszhouyou.top/%E9%80%9A%E8%BF%87java%E7%94%9F%E6%88%90%E4%B8%83%E7%89%9B%E4%BA%91uptoken.html"/>
    <id>http://cavszhouyou.top/通过java生成七牛云uptoken.html</id>
    <published>2018-02-07T04:04:56.000Z</published>
    <updated>2018-02-09T13:02:04.669Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu3-1.jpg" alt="通过 java 生成七牛云 UpToken 文章配图"></p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在写一个图片分享网站类型的小 demo，使用七牛云图片上传需要服务端生成上传凭证 uptoken。本来对后端了解的不是很多，看了官网的说明，写了一个最基本的生成方法，所以总结一下生成 uptoken 的具体步骤。我这里介绍的是使用七牛云 Java SDK 的生成方法。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>此 SDK 适用于 Java 7 及以上版本。使用此 SDK 构建您的网络应用程序，能让您以非常便捷地方式将数据安全地存储 到七牛云上。无论您的网络应用是一个网站程序，还是包括从云端（服务端程序）到终端（手持设备应用）的架构服务或应 用，通过七牛云及其 SDK，都能让您应用程序的终端用户高速上传和下载，同时也让您的服务端更加轻盈。<br>Java SDK 属于七牛服务端 SDK 之一，主要有如下功能：</p><ul><li>提供生成客户端上传所需的上传凭证的功能</li><li>提供文件从服务端直接上传七牛的功能</li><li>提供对七牛空间中文件进行管理的功能</li><li>提供对七牛空间中文件进行处理的功能</li><li>提供七牛 CDN 相关的刷新，预取，日志功能</li></ul></blockquote><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://developer.qiniu.com/kodo/sdk/1239/java" target="_blank" rel="noopener">七牛云 java-sdk 官方文档</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我们需要安装七牛云的 java-sdk，我这里介绍的是 Maven 的安装方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>[7.2.0, 7.2.99]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 version 指定了一个版本范围，每次更新 pom.xml 的时候会尝试去下载 7.2.x 版本中的最新版本，我们也可以手动指定一个固定的版本。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>引入 java-sdk 以后，我们需要创建一个 Auth 类，这个类的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qiniu.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Mac;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Auth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传策略</span></span><br><span class="line"><span class="comment">     * 参考文档：&lt;a href="https://developer.qiniu.com/kodo/manual/put-policy"&gt;上传策略&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] policyFields = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"callbackUrl"</span>,</span><br><span class="line">            <span class="string">"callbackBody"</span>,</span><br><span class="line">            <span class="string">"callbackHost"</span>,</span><br><span class="line">            <span class="string">"callbackBodyType"</span>,</span><br><span class="line">            <span class="string">"callbackFetchKey"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"returnUrl"</span>,</span><br><span class="line">            <span class="string">"returnBody"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"endUser"</span>,</span><br><span class="line">            <span class="string">"saveKey"</span>,</span><br><span class="line">            <span class="string">"insertOnly"</span>,</span><br><span class="line">            <span class="string">"isPrefixalScope"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"detectMime"</span>,</span><br><span class="line">            <span class="string">"mimeLimit"</span>,</span><br><span class="line">            <span class="string">"fsizeLimit"</span>,</span><br><span class="line">            <span class="string">"fsizeMin"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"persistentOps"</span>,</span><br><span class="line">            <span class="string">"persistentNotifyUrl"</span>,</span><br><span class="line">            <span class="string">"persistentPipeline"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"deleteAfterDays"</span>,</span><br><span class="line">            <span class="string">"fileType"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] deprecatedPolicyFields = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"asyncOps"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecretKeySpec secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Auth</span><span class="params">(String accessKey, SecretKeySpec secretKeySpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accessKey = accessKey;</span><br><span class="line">        <span class="keyword">this</span>.secretKey = secretKeySpec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Auth <span class="title">create</span><span class="params">(String accessKey, String secretKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNullOrEmpty(accessKey) || StringUtils.isNullOrEmpty(secretKey)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"empty key"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] sk = StringUtils.utf8Bytes(secretKey);</span><br><span class="line">        SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(sk, <span class="string">"HmacSHA1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Auth(accessKey, secretKeySpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyPolicy</span><span class="params">(<span class="keyword">final</span> StringMap policy, StringMap originPolicy, <span class="keyword">final</span> <span class="keyword">boolean</span> strict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (originPolicy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        originPolicy.forEach(<span class="keyword">new</span> StringMap.Consumer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.inStringArray(key, deprecatedPolicyFields)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(key + <span class="string">" is deprecated!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!strict || StringUtils.inStringArray(key, policyFields)) &#123;</span><br><span class="line">                    policy.put(key, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mac <span class="title">createMac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mac mac;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mac = javax.crypto.Mac.getInstance(<span class="string">"HmacSHA1"</span>);</span><br><span class="line">            mac.init(secretKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GeneralSecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mac;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sign</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        Mac mac = createMac();</span><br><span class="line">        String encodedSign = UrlSafeBase64.encodeToString(mac.doFinal(data));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.accessKey + <span class="string">":"</span> + encodedSign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sign</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sign(StringUtils.utf8Bytes(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signWithData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        String s = UrlSafeBase64.encodeToString(data);</span><br><span class="line">        <span class="keyword">return</span> sign(StringUtils.utf8Bytes(s)) + <span class="string">":"</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signWithData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> signWithData(StringUtils.utf8Bytes(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成HTTP请求签名字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signRequest</span><span class="params">(String urlString, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        URI uri = URI.create(urlString);</span><br><span class="line">        String path = uri.getRawPath();</span><br><span class="line">        String query = uri.getRawQuery();</span><br><span class="line"></span><br><span class="line">        Mac mac = createMac();</span><br><span class="line"></span><br><span class="line">        mac.update(StringUtils.utf8Bytes(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (query != <span class="keyword">null</span> &amp;&amp; query.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            mac.update((<span class="keyword">byte</span>) (<span class="string">'?'</span>));</span><br><span class="line">            mac.update(StringUtils.utf8Bytes(query));</span><br><span class="line">        &#125;</span><br><span class="line">        mac.update((<span class="keyword">byte</span>) <span class="string">'\n'</span>);</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; Client.FormMime.equalsIgnoreCase(contentType)) &#123;</span><br><span class="line">            mac.update(body);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String digest = UrlSafeBase64.encodeToString(mac.doFinal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.accessKey + <span class="string">":"</span> + digest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证回调签名是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originAuthorization 待验证签名字符串，以 "QBox "作为起始字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url                 回调地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body                回调请求体。原始请求体，不要解析后再封装成新的请求体--可能导致签名不一致。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType         回调ContentType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidCallback</span><span class="params">(String originAuthorization, String url, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        String authorization = <span class="string">"QBox "</span> + signRequest(url, body, contentType);</span><br><span class="line">        <span class="keyword">return</span> authorization.equals(originAuthorization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseUrl 待签名文件url，如 http://img.domain.com/u/3.jpg 、</span></span><br><span class="line"><span class="comment">     *                http://img.domain.com/u/3.jpg?imageView2/1/w/120</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">privateDownloadUrl</span><span class="params">(String baseUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> privateDownloadUrl(baseUrl, <span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseUrl 待签名文件url，如 http://img.domain.com/u/3.jpg 、</span></span><br><span class="line"><span class="comment">     *                http://img.domain.com/u/3.jpg?imageView2/1/w/120</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expires 有效时长，单位秒。默认3600s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">privateDownloadUrl</span><span class="params">(String baseUrl, <span class="keyword">long</span> expires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> deadline = System.currentTimeMillis() / <span class="number">1000</span> + expires;</span><br><span class="line">        <span class="keyword">return</span> privateDownloadUrlWithDeadline(baseUrl, deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">privateDownloadUrlWithDeadline</span><span class="params">(String baseUrl, <span class="keyword">long</span> deadline)</span> </span>&#123;</span><br><span class="line">        StringBuilder b = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        b.append(baseUrl);</span><br><span class="line">        <span class="keyword">int</span> pos = baseUrl.indexOf(<span class="string">"?"</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            b.append(<span class="string">"&amp;e="</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            b.append(<span class="string">"?e="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        b.append(deadline);</span><br><span class="line">        String token = sign(StringUtils.utf8Bytes(b.toString()));</span><br><span class="line">        b.append(<span class="string">"&amp;token="</span>);</span><br><span class="line">        b.append(token);</span><br><span class="line">        <span class="keyword">return</span> b.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * scope = bucket</span></span><br><span class="line"><span class="comment">     * 一般情况下可通过此方法获取token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 空间名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的上传token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadToken</span><span class="params">(String bucket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadToken(bucket, <span class="keyword">null</span>, <span class="number">3600</span>, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * scope = bucket:key</span></span><br><span class="line"><span class="comment">     * 同名文件覆盖操作、只能上传指定key的文件可以可通过此方法获取token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 空间名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key，可为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的上传token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadToken</span><span class="params">(String bucket, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadToken(bucket, key, <span class="number">3600</span>, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成上传token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket  空间名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     key，可为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expires 有效时长，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> policy  上传策略的其它参数，如 new StringMap().put("endUser", "uid").putNotEmpty("returnBody", "")。</span></span><br><span class="line"><span class="comment">     *                scope通过 bucket、key间接设置，deadline 通过 expires 间接设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的上传token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadToken</span><span class="params">(String bucket, String key, <span class="keyword">long</span> expires, StringMap policy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadToken(bucket, key, expires, policy, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成上传token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket  空间名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     key，可为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expires 有效时长，单位秒。默认3600s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> policy  上传策略的其它参数，如 new StringMap().put("endUser", "uid").putNotEmpty("returnBody", "")。</span></span><br><span class="line"><span class="comment">     *                scope通过 bucket、key间接设置，deadline 通过 expires 间接设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strict  是否去除非限定的策略字段，默认true</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的上传token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadToken</span><span class="params">(String bucket, String key, <span class="keyword">long</span> expires, StringMap policy, <span class="keyword">boolean</span> strict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> deadline = System.currentTimeMillis() / <span class="number">1000</span> + expires;</span><br><span class="line">        <span class="keyword">return</span> uploadTokenWithDeadline(bucket, key, deadline, policy, strict);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadTokenWithDeadline</span><span class="params">(String bucket, String key, <span class="keyword">long</span> deadline, StringMap policy, <span class="keyword">boolean</span> strict)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO   UpHosts Global</span></span><br><span class="line">        String scope = bucket;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">            scope = bucket + <span class="string">":"</span> + key;</span><br><span class="line">        &#125;</span><br><span class="line">        StringMap x = <span class="keyword">new</span> StringMap();</span><br><span class="line">        copyPolicy(x, policy, strict);</span><br><span class="line">        x.put(<span class="string">"scope"</span>, scope);</span><br><span class="line">        x.put(<span class="string">"deadline"</span>, deadline);</span><br><span class="line"></span><br><span class="line">        String s = Json.encode(x);</span><br><span class="line">        <span class="keyword">return</span> signWithData(StringUtils.utf8Bytes(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadTokenWithPolicy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        String s = Json.encode(obj);</span><br><span class="line">        <span class="keyword">return</span> signWithData(StringUtils.utf8Bytes(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringMap <span class="title">authorization</span><span class="params">(String url, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        String authorization = <span class="string">"QBox "</span> + signRequest(url, body, contentType);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringMap().put(<span class="string">"Authorization"</span>, authorization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringMap <span class="title">authorization</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorization(url, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成HTTP请求签名字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signRequestV2</span><span class="params">(String urlString, String method, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        URI uri = URI.create(urlString);</span><br><span class="line"></span><br><span class="line">        Mac mac = createMac();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        sb.append(String.format(<span class="string">"%s %s"</span>, method, uri.getPath()));</span><br><span class="line">        <span class="keyword">if</span> (uri.getQuery() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(String.format(<span class="string">"?%s"</span>, uri.getQuery()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.append(String.format(<span class="string">"\nHost: %s"</span>, uri.getHost()));</span><br><span class="line">        <span class="keyword">if</span> (uri.getPort() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(String.format(<span class="string">":%d"</span>, uri.getPort()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(String.format(<span class="string">"\nContent-Type: %s"</span>, contentType));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// body</span></span><br><span class="line">        sb.append(<span class="string">"\n\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.length &gt; <span class="number">0</span> &amp;&amp; !StringUtils.isNullOrEmpty(contentType)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contentType.equals(Client.FormMime)</span><br><span class="line">                    || contentType.equals(Client.JsonMime)) &#123;</span><br><span class="line">                sb.append(<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        mac.update(StringUtils.utf8Bytes(sb.toString()));</span><br><span class="line"></span><br><span class="line">        String digest = UrlSafeBase64.encodeToString(mac.doFinal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.accessKey + <span class="string">":"</span> + digest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringMap <span class="title">authorizationV2</span><span class="params">(String url, String method, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        String authorization = <span class="string">"Qiniu "</span> + signRequestV2(url, method, body, contentType);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringMap().put(<span class="string">"Authorization"</span>, authorization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringMap <span class="title">authorizationV2</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorizationV2(url, <span class="string">"GET"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现报错，只要导入相应的包即可，Auth 代码的 github 地址为</p><ul><li><a href="https://github.com/qiniu/java-sdk/edit/master/src/main/java/com/qiniu/util/Auth.java" target="_blank" rel="noopener">Auth 代码 github 地址</a></li></ul><p>创建 Auth 类后，下面我们就来看一下如何生成一个最简单的上传凭证。最简单的上传凭证只需要 AccessKey，SecretKey 和 Bucket 就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String accessKey = <span class="string">"access key"</span>;<span class="comment">//七牛云账号对应的公匙</span></span><br><span class="line">String secretKey = <span class="string">"secret key"</span>;<span class="comment">//七牛云账号对应的司匙</span></span><br><span class="line">String bucket = <span class="string">"bucket name"</span>;<span class="comment">//上传图片到的存储空间</span></span><br><span class="line"></span><br><span class="line">Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">String upToken = auth.uploadToken(bucket);<span class="comment">//获取uptoken</span></span><br></pre></td></tr></table></figure><h2 id="接口示例"><a href="#接口示例" class="headerlink" title="接口示例"></a>接口示例</h2><p>我在这里展示一下我的 demo 中获取 uptoken 接口的示例，大家可以参考一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.photoshareweb.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.photoshareweb.common.Auth;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/PhotoShareWeb/share/auth"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过七牛云上传凭证</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getUpToken"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">getUpToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String accessKey = <span class="string">"access key"</span>;<span class="comment">//七牛云账号对应的公匙</span></span><br><span class="line">        String secretKey = <span class="string">"secret key"</span>;<span class="comment">//七牛云账号对应的司匙</span></span><br><span class="line">        String bucket = <span class="string">"bucket name"</span>;<span class="comment">//上传图片到的存储空间</span></span><br><span class="line">        Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">        String upToken = auth.uploadToken(bucket);</span><br><span class="line">        <span class="keyword">return</span> upToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>好啦，这样我们就可以生成一个最基本的 uptoken 了，当然只是最基本的，更多的用法大家可以参考官方文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu3-1.jpg&quot; alt=&quot;通过 java 生成七牛云 UpToken 文章配图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="七牛云" scheme="http://cavszhouyou.top/categories/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
    
      <category term="后端" scheme="http://cavszhouyou.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="七牛云" scheme="http://cavszhouyou.top/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>通过js实现七牛云图片上传</title>
    <link href="http://cavszhouyou.top/%E9%80%9A%E8%BF%87js%E5%AE%9E%E7%8E%B0%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0.html"/>
    <id>http://cavszhouyou.top/通过js实现七牛云图片上传.html</id>
    <published>2018-02-06T11:54:47.000Z</published>
    <updated>2018-02-09T12:26:07.784Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu2-1.jpg" alt="七牛云图片上传配图"></p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在做一个图片分享网站类型的小 demo，我的想法是将用户上传的图片保存到七牛云上，然后将获取的链接存入数据库中。虽然以前写博客一直都是用七牛云来存储配图，但对于如何通过七牛云 JS 的 SDK 来完成上传操作还真是不太了解。在看了官网的教程后，有一些地方不是很明确，查了一些资料，所以总结一下前端如何通过 js 上传图片到七牛云。</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://github.com/qiniu/js-sdk/#usage" title="七牛云Qiniu-JavaScript-SDK官方文档" target="_blank" rel="noopener">七牛云 Qiniu-JavaScript-SDK 官方文档</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Qiniu-JavaScript-SDK （下文简称为 JS-SDK）适用于 IE8+、Chrome、Firefox、Safari 等浏览器，基于七牛云存储官方 API 构建，其中上传功能基于 Plupload 插件封装。开发者基于 JS-SDK 可以方便的从浏览器端上传文件至七牛云存储，并对上传成功后的图片进行丰富的数据处理操作。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为七牛云的 JS-SDK 是基于 Plupload 插件封装的，所以我们需要在引入七牛云的 js 依赖文件前，引入 Plupload 的相关 js 依赖文件。我这里介绍使用 NPM 安装的方法。</p><ul><li><p>Plupload 下载</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install Plupload --save-dev</span><br></pre></td></tr></table></figure></li><li><p>qiniu-js 下载</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qiniu-js --save-dev</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在使用前我们需要在页面里引入相应的 js 依赖文件。</p><ul><li>在页面中引入 plupload，plupload.full.min.js（生产环境）或 引入 plupload.dev.js 和 moxie.js（开发调试）。这些 js 文件可在 node_modules 文件夹下的 plupload 的文件夹中找到。</li><li>在页面中引入 qiniu.min.js（生产环境）或 qiniu.js（开发调试）这些 js 文件可在 node_modules 文件夹下的 qiniu-js 的文件夹中找到。</li></ul><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import js 具体路径可能会不同</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../../js/qiniu/plupload/plupload.dev.js"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../../js/qiniu/plupload/moxie.js"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../../js/qiniu/qiniu.js"</span>);</span><br></pre></td></tr></table></figure><p>然后需要在页面中初始化 uploader，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uploader = Qiniu.uploader(&#123;</span><br><span class="line">    disable_statistics_report: <span class="literal">false</span>, <span class="comment">// 禁止自动发送上传统计信息到七牛，默认允许发送</span></span><br><span class="line">    runtimes: <span class="string">"html5,flash,html4"</span>, <span class="comment">// 上传模式,依次退化</span></span><br><span class="line">    browse_button: <span class="string">"pickfiles"</span>, <span class="comment">// 上传选择的点选按钮，**必需**</span></span><br><span class="line">    <span class="comment">// 在初始化时，uptoken, uptoken_url, uptoken_func 三个参数中必须有一个被设置</span></span><br><span class="line">    <span class="comment">// 切如果提供了多个，其优先级为 uptoken &gt; uptoken_url &gt; uptoken_func</span></span><br><span class="line">    <span class="comment">// 其中 uptoken 是直接提供上传凭证，uptoken_url 是提供了获取上传凭证的地址，如果需要定制获取 uptoken 的过程则可以设置 uptoken_func</span></span><br><span class="line">    uptoken: <span class="string">"&lt;Your upload token&gt;"</span>, <span class="comment">// uptoken 是上传凭证，由其他程序生成</span></span><br><span class="line">    <span class="comment">// uptoken_url: "/uptoken", // Ajax 请求 uptoken 的 Url，**强烈建议设置**（服务端提供）</span></span><br><span class="line">    <span class="comment">// uptoken_func: function(file)&#123;    // 在需要获取 uptoken 时，该方法会被调用</span></span><br><span class="line">    <span class="comment">//    // do something</span></span><br><span class="line">    <span class="comment">//    return uptoken;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    get_new_uptoken: <span class="literal">false</span>, <span class="comment">// 设置上传文件的时候是否每次都重新获取新的 uptoken</span></span><br><span class="line">    <span class="comment">// downtoken_url: '/downtoken',</span></span><br><span class="line">    <span class="comment">// Ajax请求downToken的Url，私有空间时使用,JS-SDK 将向该地址POST文件的key和domain,服务端返回的JSON必须包含`url`字段，`url`值为该文件的下载地址</span></span><br><span class="line">    unique_names: <span class="literal">false</span>, <span class="comment">// 默认 false，key 为文件名。若开启该选项，JS-SDK 会为每个文件自动生成key（文件名）</span></span><br><span class="line">    save_key: <span class="literal">false</span>, <span class="comment">// 默认 false。若在服务端生成 uptoken 的上传策略中指定了 `save_key`，则开启，SDK在前端将不对key进行任何处理</span></span><br><span class="line">    domain: <span class="string">"&lt;Your upload token&gt;"</span>, <span class="comment">// bucket 域名（就是你在七牛云上创建的存储空间的测试域名），下载资源时用到，如：'http://xxx.bkt.clouddn.com/' **必需**</span></span><br><span class="line">    container: <span class="string">"container"</span>, <span class="comment">// 上传区域 DOM ID，默认是 browser_button 的父元素，</span></span><br><span class="line">    max_file_size: <span class="string">"10mb"</span>, <span class="comment">// 最大文件体积限制</span></span><br><span class="line">    flash_swf_url: <span class="string">"../plupload/Moxie.swf"</span>, <span class="comment">//引入 flash,相对路径，这个也可以在 plupload 的文件夹中找到</span></span><br><span class="line">    max_retries: <span class="number">3</span>, <span class="comment">// 上传失败最大重试次数</span></span><br><span class="line">    dragdrop: <span class="literal">true</span>, <span class="comment">// 开启可拖曳上传</span></span><br><span class="line">    drop_element: <span class="string">"photo-container"</span>, <span class="comment">// 拖曳上传区域元素的 ID，拖曳文件或文件夹后可触发上传</span></span><br><span class="line">    chunk_size: <span class="string">"4mb"</span>, <span class="comment">// 分块上传时，每块的体积</span></span><br><span class="line">    auto_start: <span class="literal">true</span>, <span class="comment">// 选择文件后自动上传，若关闭需要自己绑定事件触发上传,</span></span><br><span class="line">    <span class="comment">//x_vars : &#123;</span></span><br><span class="line">    <span class="comment">//    自定义变量，参考http://developer.qiniu.com/docs/v6/api/overview/up/response/vars.html</span></span><br><span class="line">    <span class="comment">//    'time' : function(up,file) &#123;</span></span><br><span class="line">    <span class="comment">//        var time = (new Date()).getTime();</span></span><br><span class="line">    <span class="comment">// do something with 'time'</span></span><br><span class="line">    <span class="comment">//        return time;</span></span><br><span class="line">    <span class="comment">//    &#125;,</span></span><br><span class="line">    <span class="comment">//    'size' : function(up,file) &#123;</span></span><br><span class="line">    <span class="comment">//        var size = file.size;</span></span><br><span class="line">    <span class="comment">// do something with 'size'</span></span><br><span class="line">    <span class="comment">//        return size;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//&#125;,</span></span><br><span class="line">    init: &#123;</span><br><span class="line">        FilesAdded: <span class="function"><span class="keyword">function</span>(<span class="params">up, files</span>) </span>&#123;</span><br><span class="line">            plupload.each(files, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 文件添加进队列后,处理相关的事情</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        BeforeUpload: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 每个文件上传前,处理相关的事情</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"上传开始"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        UploadProgress: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 每个文件上传时,处理相关的事情</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"上传中"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        FileUploaded: <span class="function"><span class="keyword">function</span>(<span class="params">up, file, info</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 每个文件上传成功后,处理相关的事情</span></span><br><span class="line">            <span class="comment">// 其中 info.response 是文件上传成功后，服务端返回的json，形式如</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",</span></span><br><span class="line">            <span class="comment">//    "key": "gogopher.jpg"</span></span><br><span class="line">            <span class="comment">//  &#125;</span></span><br><span class="line">            <span class="comment">// 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> domain = up.getOption(<span class="string">"domain"</span>);</span><br><span class="line">            <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(info.response);</span><br><span class="line">            <span class="keyword">var</span> sourceLink = domain + res.key; <span class="comment">//获取上传成功后的文件的Url;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">Error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, err, errTip</span>) </span>&#123;</span><br><span class="line">            base.hideLoading();</span><br><span class="line">            <span class="comment">//上传出错时,处理相关的事情</span></span><br><span class="line">            <span class="keyword">if</span> (file.code == <span class="string">"-600"</span>) &#123;</span><br><span class="line">                base.showAlertDialog(<span class="string">"上传图片的大小不能超过10mb！"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.code == <span class="string">"-601"</span>) &#123;</span><br><span class="line">                base.showAlertDialog(<span class="string">"上传图片的格式有误！"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                base.showAlertDialog(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        UploadComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//队列文件处理完毕后,处理相关的事情</span></span><br><span class="line">        &#125;,</span><br><span class="line">        Key: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 若想在前端对每个文件的key进行个性化处理，可以配置该函数</span></span><br><span class="line">            <span class="comment">// 我使用的是图片名加上当前时间来定义key</span></span><br><span class="line">            <span class="comment">// 该配置必须要在 unique_names: false , save_key: false 时才生效</span></span><br><span class="line">            <span class="comment">// do something with key here</span></span><br><span class="line">            <span class="keyword">var</span> timestamp = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">            <span class="keyword">var</span> key = file.name + <span class="string">"/"</span> + timestamp;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// domain 为七牛空间（bucket)对应的域名，选择某个空间后，可通过"空间设置-&gt;基本设置-&gt;域名设置"查看获取</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// uploader 为一个 plupload 对象，继承了所有 plupload 的方法，参考http://plupload.com/docs</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上 uploader 的配置适用于单文件上传的情况。相信小伙伴们看完都有一个疑惑，什么是 uptoken 呢？ uptoken 是 我们图片上传的上传凭证，它会根据你的 Access Key 和 Secret Key 还有你上传图片到的存储空间 bucket 来生成(最基本的三项)。那么怎么生成 uptoken 呢？这当然不是由我们前端自己来生成的，这个时候就需要我们后端的小伙伴来帮帮忙了。具体可以参考我的另一篇博客，java 如何生成 uptoken。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>关于七牛云上传组件的用法还有很多，如对上传的图片生成水印等，大家可以好好参考一下官方文档。我总结的只是一些最简单的用法，目前我的小 demo 只需要用到这一些，以后有需要再继续拓展 :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu2-1.jpg&quot; alt=&quot;七牛云图片上传配图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="七牛云" scheme="http://cavszhouyou.top/categories/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
    
      <category term="七牛云" scheme="http://cavszhouyou.top/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Markdown—文档解读</title>
    <link href="http://cavszhouyou.top/MarkdownStudy.html"/>
    <id>http://cavszhouyou.top/MarkdownStudy.html</id>
    <published>2018-01-17T06:04:45.000Z</published>
    <updated>2018-01-19T13:20:28.109Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1.jpg" alt="Markdown语法学习配图"></p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>记得第一次接触 Markdown 应该是在 github 上，当时看每一个仓库里的 README 文档都是 md 格式的，文档内容的排版让我眼前一亮。诶这是什么东西，好奇的我赶紧百度了一下，看完官方文档，感觉自己推开了新世界的大门，有没有很方便！看完文档后，感觉文档一些东西介绍的有一点晦涩，不容易理解。所以我就想分享一下我对 Markdown 的一些认识。</p><h2 id="一、认识-Markdown"><a href="#一、认识-Markdown" class="headerlink" title="一、认识 Markdown"></a>一、认识 Markdown</h2><h3 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h3><blockquote><p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p></blockquote><ul><li><a href="https://daringfireball.net/projects/markdown/syntax" title="创始人 John Gruber 的 Markdown 语法说明" target="_blank" rel="noopener">创始人 John Gruber 的 Markdown 语法说明</a></li><li><a href="https://www.appinn.com/markdown/#link" title="Markdown 中文版语法说明" target="_blank" rel="noopener">Markdown 中文版语法说明</a></li></ul><p>Markdown 其实是一种文档编辑的标记语言，它的目标是实现「易读易写」，成为一种适用于网络的书写语言。那怎样才能算易读易写呢？我们在书写文档时，有时候最头疼的就是文章的排版问题，这个时候使用 Markdown 就很方便了。试想一下在写文档时，用键盘一气呵成敲好内容，而且这个时候文章已经排版好了，大声告诉我，是不是很方便。现在很多网站都支持 Markdown 形式的文档书写，比如简书、掘金、github……Markdown 在很大程度上能提高你的码字效率和体验，如果你想快速编写格式丰富并且美观的文章，Markdown 是你的不二选择，怎么有一种打广告的感觉……</p><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>相信大家对超文本标记语言 HTML 都不陌生，那么 Markdown 和 HTML 有什么关系呢？简单来说就是，HTML 是一种发布的格式，而 Markdown 是一种书写的格式。什么意思呢，就是你在浏览器里边看到的所有东西都是由 HTML 标记组成的。那么 Markdown 想要显示对应的内容该怎么办呢，答案就是将其解析为 HTML 的形式来显示内容。</p><p>举一个例子，在 Markdown 语法中，有序列表使用数字接着一个英文句点来表示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure><p>上面的列表所产生的 HTML 标记为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>McHale<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Parish<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的例子就是 Markdown 到 HTML 的转换。这个时候可能有的同学就会提问了，那如果我在 Markdown 里边插入 HTML 标签，这时候该怎么显示呢？这就是我想告诉大家的 Markdown 的一个特性<strong>兼容 HTML</strong>。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown 只要直接加标签就可以了。要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。也就是说你如果在 Markdown 文档里添加了一个<code>&lt;table&gt;</code>标签，最后解析完成后，它仍然是一个<code>&lt;table&gt;</code>标签，不会解析错误，当然你如果想以代码段的形式呈现就是另外的情况了。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>但你如果使用 Markdown，你就无需担心这些问题，它让你可以自然地书写字符，如果需要转换则全由它来处理。</p><h3 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h3><p>工欲善其事必先利其器，那么我们该用什么来编辑 Markdown 文档了？当然你用文本编辑器也是可以的…..现在支持 Markdown 语法编辑的有很多，每个人的习惯不同可能选择不同，只要自己用着顺手就行，这里我推荐几个比较热门的编辑器。</p><ul><li><p>在线编辑器 Dillinger</p><p>  <a href="https://dillinger.io/" title="Dillinger" target="_blank" rel="noopener">Dillinger</a> 简洁却不失强大，同样支持支持 md, styled HTML, pdf 文件导出。 支持 dropbox, onedrive，google drive, github 存储。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-1.png" alt="Dillinger编辑器" title="Dillinger编辑器"></p></li><li><p>Windows 平台编辑器 MarkdownPad</p><p>  <a href="http://markdownpad.com/" title="MarkdownPad" target="_blank" rel="noopener">MarkdownPad</a>一款非常强大的 win 系统桌面端编辑器，支持实时预览，PDF 导出及导出格式自定义，公式编辑代码，桌面端使用最为广泛的 markown 编辑工具之一，推荐适用 pro 版，有破解版。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-2.png" alt="MarkdownPad" title="MarkdownPad"></p></li><li><p>OS X 平台编辑器 Mou</p><p>  <a href="http://25.io/mou/" title="Mou" target="_blank" rel="noopener">Mou</a> 是 Mac 下杰出的 Markdown 编辑器，提供语法高亮、在线预览、同步滚动、全屏模式，支持自定保存、自动匹配，允许自定义主题，支持 CSS，HTML 和 PDF 导出等。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-3.png" alt="Mou" title="Mou"></p></li><li><p>多平台编辑器 vscode</p><p>  我现在一般使用 vscode 进行编辑，只需要安装<a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced" title="Markdown Preview Enhanced" target="_blank" rel="noopener">Markdown Preview Enhanced</a>插件，因为现在码代码基本都用 vscode，所以我用起来还是挺顺手的，强行安利一波。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-4.png" alt="Markdown Preview Enhanced" title="Markdown Preview Enhanced"></p></li></ul><p>下面再给大家提供一些 Markdown 编辑器参考网址，总能找到适合你的一款。</p><ul><li><a href="https://www.csdn.net/article/2014-05-05/2819623" title="10款流行的Markdown编辑器，总有一款适合你" target="_blank" rel="noopener">10 款流行的 Markdown 编辑器，总有一款适合你</a></li><li><a href="https://www.jianshu.com/p/6ea395a6a35b" title="Markdown编辑器一览,总有一款适合你" target="_blank" rel="noopener">Markdown 编辑器一览,总有一款适合你</a></li><li><a href="https://www.jianshu.com/p/dcffb6f60fe2" title="Markdown编辑器之比较" target="_blank" rel="noopener">Markdown 编辑器之比较</a></li><li><a href="http://www.williamlong.info/archives/4319.html" title="好用的Markdown编辑器一览" target="_blank" rel="noopener">好用的 Markdown 编辑器一览</a></li></ul><h2 id="二、Markdown-语法介绍"><a href="#二、Markdown-语法介绍" class="headerlink" title="二、Markdown 语法介绍"></a>二、Markdown 语法介绍</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。空行的定义即是在显示上看起来像是空的，便会被视为空行。比如，若某一行只包含空格和制表符，那么该行不会显示任何东西，则该行也会被视为空行。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-5-1.png" alt="段落" title="段落"></p><p>这里还需要注意的一点是，我们在写文章时，经常会习惯使用空格或制表符来<strong>缩进段落</strong>，但在 Markdown 语法里边普通段落是不能用空格或制表符来表示缩进的，即便加了也不会显示缩进。这是因为 Markdown 作为一种轻量级的文本编辑标记语言一开始只是为英文设计的，所以省去了缩进式的写法使书写更为简洁。那么如果我们一定要使用缩进呢？这里有四种方法可以实现。</p><ul><li>在段落开头插入半角空格: <code>&amp;ensp;</code>或 <code>&amp;#8194;</code></li><li>在段落开头插入全角空格: <code>&amp;emsp;</code>或 <code>&amp;#8195;</code></li><li>在段落开头插入不换行空格: <code>&amp;nbsp;</code>或 <code>&amp;#160;</code></li><li>如果是网页的话，最好使用样式表,将下段代码插入相应 css 即可。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>; <span class="comment">/*首行缩进*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-6-1.png" alt="有缩进的段落" title="有缩进的段落"></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><blockquote><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符）</p></blockquote><p>在 Markdown 语法中，除了段落自动换行以外，我们可以通过插入换行符来使段落强制换行。这里需要注意的一点是 Markdown 语法中换行符的插入和其他大部分的 text-to-HTML 格式不一样。一般是点击回车即可换行，但在 Markdown 语法中必须<strong>在文字末尾输入 2 个及以上的空格，再点击回车才可实现换行</strong>。不过在一些编辑器中可以设置为回车换行，我使用的 Markdown Preview Enhanced 插件里默认的换行方式就是使用回车换行，当然你如果不习惯也可以更改设置。</p><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>刚开始使用 Markdown 语法时，我发现无论两个段落之间相距了多少行，在不做其他处理的情况下，最终显示时两个段落间的距离都只有一个空行。后来了解到 markdown 会把多余空行省略，这是它的成功之处之一，文章结构不靠空行来区分。但有时候我们需要添加空行来调整段落间的距离时，这个时候该怎么办呢？其实原理和实现缩进是一样的，这里有五种方法可以实现。</p><ul><li>使用半角空格来代表空行: <code>&amp;ensp;</code>或 <code>&amp;#8194;</code></li><li>使用全角空格来代表空行: <code>&amp;emsp;</code>或 <code>&amp;#8195;</code></li><li>使用换行空格来代表空行: <code>&amp;nbsp;</code>或 <code>&amp;#160;</code></li><li>直接插入换行符: <code>&lt;br/&gt;</code></li><li>调整 markdown 的 css，改变 <code>p</code> 的 <code>margin-bottom</code> 属性，也可以实现段落间的距离的调整，不过这种方式是全局性的，可能不会每种情况都适用。</li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-7.png" alt="空行展示" title="空行展示"></p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，<strong>类 Setext 形式</strong> 和<strong>类 Atx 形式</strong>。</p><ul><li><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。如下图:</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-8.png" alt="类 Setext 形式" title="类 Setext 形式"></p></li><li><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，这一种形式使用得相对多一些。这里需要注意一点就是在<code>#</code>和标题间最好隔一个空格，不然可能在有的编辑器下显示有问题，如下图:</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-9.png" alt="类 Atx 形式" title="类 Atx 形式"></p></li></ul><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。一共有两种方式，一种是在引用段落的每一行最前面加上<code>&gt;</code>，还有一种方式是只在引用段落的第一行最前面加上<code>&gt;</code>，这两种方式都能标记区块引用。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-10.png" alt="区块引用" title="区块引用"></p><ul><li>区块引用里还可以可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt;</li><li>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等</li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-11.png" alt="区块引用扩展" title="区块引用扩展"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持<strong>有序列表</strong>和<strong>无序列表</strong>。</p><ul><li><p>无序列表使用<code>*</code>、<code>+</code>或是<code>-</code>作为列表标记:</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-12.png" alt="无序列表" title="无序列表"></p></li><li><p>有序列表则使用数字接着一个英文句点,这里需要注意的一点是你在列表标记上使用的数字并不会影响最后输出的 HTML 结果，就是说</p><p>  不管你写成这样</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  这是有序列表</span><br><span class="line">1.  这是有序列表</span><br><span class="line">1.  这是有序列表</span><br></pre></td></tr></table></figure><p>  还是这样</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3.  这是有序列表</span><br><span class="line">1.  这是有序列表</span><br><span class="line">8.  这是有序列表</span><br></pre></td></tr></table></figure><p>  最后的输出结果左边的列表标记都是根据第一行的标记数字往后顺序递增，不会顺序混乱，如图:</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-13.png" alt="有序列表扩展" title="有序列表扩展"></p><p>  这里还需注意的是两个独立的有序列表间，如果中间没有其他的标记元素作为分隔，那么这两个有序列表则被视为一个有序列表来进行标记的顺序递增。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-14.png" alt="有序列表扩展" title="有序列表扩展"></p><p>  还需要注意几点的是</p><ul><li>列表的项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</li><li>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符</li><li><p>项目列表很可能会不小心产生，比方说如果在行首出现数字-句点-空白的情况，则会产生项目列表。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></table></figure><p>  可以通过在句点前面加上反斜杠来避免</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>作为一个程序猿，接触最多的自然是代码啦，那么在 Markdown 语法中该如何表示呢？简单说，插入代码可能的情况有以下两种:</p><ul><li><p>只需要标记一小段行内代码，这种情况需要使用反引号 ` 把需要标记的代码给包起来。注意，如果你要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-15.png" alt="标记行内代码" title="标记行内代码"></p></li><li><p>需要标记一大段代码(即已经排版好的代码区块)，这里有两种方式来标记。</p><ul><li><p>一种方式是通过简单的缩进 4 个空格或是 1 个制表符来标记。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure></li><li><p>另一种 Fenced Code Block 方式是通过在第一行和最后一行添加三个反引号，中间的行为代码的形式来进行标记。在第一行的反引号加上代码类型，有助于代码在某些编辑器下的高亮显示。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&lt;代码块&gt;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-16-1.png" alt="代码块" title="代码块"></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>华丽的分割线该如何来显示呢？我们只需在一行内输入三个以上的<code>*</code>或<code>-</code>或<code>_</code>来建立分割线，并且这一行中不能够包含其他东西。恩..你如果想要在符号间加几个空格也是可以的，这样也可以建立分割线。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-17.png" alt="华丽的分割线" title="华丽的分割线"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>在写文章时，我们经常会插入一些链接。在 Markdown 语法中一共支持两种形式的链接语法: <strong>行内式</strong>和<strong>参考式</strong>两种形式。</p><ul><li><p>参考式的形式，采用一个方括号来标记链接文字，方括号后紧跟一个圆括号标记链接地址，如果还想要加上链接的 title 文字，只需要在链接地址后面隔一个空格，用双引号把 title 文字包起来即可。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接文字](链接地址 &quot;title&quot;)</span><br></pre></td></tr></table></figure></li><li><p>参考式的形式，采用一个方括号来标记链接文字，方括号后紧跟一个方括号来填入辨识链接地址的标记，然后你可以在文件的任意处将该标记的内容标记出来。我认为这种形式一方面是比较好读，增加链接而不让文章的阅读感觉被打断，另一方面也适用于在文章的不同位置需要使用相同的链接地址这种情况，这时只需要定义一次，然后就可以全局引用。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接文字][链接标识]</span><br><span class="line"></span><br><span class="line">[链接标识]: 链接地址 &quot;title&quot;   (可在文件任何地方定义，title 内容，可以用单引号、双引号或是括弧包裹)</span><br></pre></td></tr></table></figure><p>  需要注意:</p><ul><li>链接标识可以由字母、数字、空白和标点符号组成，但是并不区分大小写。</li><li><p>链接标识可以为空，此时链接变为隐式链接，这种情况下，链接标识会视为等同于链接文字，链接内容通过链接文字来定义。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接文字][]</span><br><span class="line"></span><br><span class="line">[链接文字]: 链接地址 &quot;title&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/petu1-18.png" alt="链接" title="链接"></p><p>还有一种链接方式是自动链接，Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://www.baidu.com/?tn=90294326_hao_pg&gt;</span><br></pre></td></tr></table></figure><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>在 Markdown 语法中，使用<code>*</code>和<code>_</code>来作为标记强调字词的符号。</p><ul><li>被一个<code>*</code>或<code>_</code>包围的字词，最后显示的是斜体。</li><li>被两个<code>*</code>或<code>_</code>包围的字词，最后显示的是加粗体。</li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-19.png" alt="强调" title="强调"></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>在 Markdown 语法中，图片的引入方法和链接的方法很相似，也有两种形式，<strong>行内式</strong>和<strong>参考式</strong>。唯一不同的是，图片映入时需要在第一个方括号前添上一个感叹号<code>!</code>,因为基本类似，这里就不继续详说了，详细语法可参考链接。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.appinn.com/markdown/#link" title="Markdown 中文版语法说明" target="_blank" rel="noopener">Markdown 中文版语法说明</a></li><li><a href="https://www.jianshu.com/p/dcffb6f60fe2" title="Markdown编辑器之比较" target="_blank" rel="noopener">Markdown 编辑器之比较</a></li><li><a href="http://www.williamlong.info/archives/4319.html" title="好用的Markdown编辑器一览" target="_blank" rel="noopener">好用的 Markdown 编辑器一览</a></li><li><a href="https://www.zhihu.com/question/20409634" title="怎样引导新手使用 Markdown？" target="_blank" rel="noopener">怎样引导新手使用 Markdown？</a></li><li><a href="https://www.jianshu.com/p/1e402922ee32" title="Markdown——入门指南" target="_blank" rel="noopener">Markdown——入门指南</a></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>总结了一下对 Markdown 的认识后，感觉自己对 Markdown 的理解又有了一些新的收获，注意到了一些以前忽视的东西。写一写总结感觉对自己帮助真的好大 :) ,希望我的总结也能够给你了解学习 Markdown 提供一点帮助，如果文章中出现错误或存在不严谨的地方，也请大家能够批评指出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu1.jpg&quot; alt=&quot;Markdown语法学习配图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://cavszhouyou.top/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://cavszhouyou.top/tags/Markdown/"/>
    
  </entry>
  
</feed>
