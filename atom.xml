<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CavsZhouyou&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cavszhouyou.top/"/>
  <updated>2018-08-03T16:40:31.733Z</updated>
  <id>http://cavszhouyou.top/</id>
  
  <author>
    <name>CavsZhouyou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript深入理解之原型与原型链</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之原型与原型链.html</id>
    <published>2018-08-03T03:26:04.000Z</published>
    <updated>2018-08-03T16:40:31.733Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu18-1.jpg" alt="JavaScript深入理解之原型与原型链文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>原型和原型链一直都是 JavaScript 中很重要的概念，理解它们有助于我们理解预定义引用类型间的关系以及 JavaScript 中对象继承的实现机制，下面是我对原型和原型链的理解和总结。</p><a id="more"></a><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="原型对象理解"><a href="#原型对象理解" class="headerlink" title="原型对象理解"></a>原型对象理解</h3><h4 id="prototype-属性"><a href="#prototype-属性" class="headerlink" title="prototype 属性"></a>prototype 属性</h4><p>我们创建的每一个函数都有一个 prototype 属性，这个属性是一个指针，指向一个对象。这个对象就是函数的原型对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为原型对象添加方法</span></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为函数也是对象，下面我们来看一下函数对象和它的原型对象之间的关系。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu18-2.png" alt="配图18-2"></p><h4 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h4><p>当函数创建，prototype 属性指向函数的原型对象时，在默认情况下，其原型对象将会获得一个 constructor 属性，这个属性是一个指针，指向 prototype 所在的函数对象。</p><p>拿前面的一个例子来说 Person.prototype.constructor 就指向 Person 函数对象。</p><p>下面我们来更新一下它们之间的关系图。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu18-3.png" alt="配图18-3"></p><h4 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h4><p>当我们调用构造函数创建一个新实例后，在这个实例的内部将包含一个指针，指向构造函数的原型对象，在 ECMA-262 第五版中管这个指针叫做[[Prototype]]。</p><p>需要注意的是在脚本中没有标准的方式访问[[Prototype]]，但是在 Firefox，Safari 和 Chrome 中每个对象中都支持一个属性 __proto__ 来访问，为了区分 prototype 属性，我们在下边都使用 __proto__来表示。</p><p>根据前面的 Person 构造函数我们新建一个实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student.__proto__ === Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>从上面我们可以看出，这个连接是存在与实例与构造函数的原型对象之间的，而不是存在于实例和构造函数之间的。</p><p>下面我们来看一下现在这几个对象之间的关系</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu18-5.png" alt="配图18-5"></p><h4 id="isPrototypeOf-NaN"><a href="#isPrototypeOf-NaN" class="headerlink" title="isPrototypeOf()"></a>isPrototypeOf()</h4><p>虽然我们在脚本中没有办法访问到[[Prototype]]属性，但是我们可以通过 isPrototypeOf 方法来确定对象之间时候存在这种关系。</p><p>如果一个对象的[[prototype]]属性指向调用 isPrototyeOf() 方法的对象时，这个方法就返回ture，我们那上面的例子举例来说</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(student)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h4><p>在 ECMAScript 5 中新增了一个方法叫 Object.getPrototypeOf() ，这个方法可以返回[[Prototype]]的值，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(student) === Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="原型属性"><a href="#原型属性" class="headerlink" title="原型属性"></a>原型属性</h3><h4 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h4><p>每当代码读取对象的某个属性时，首先会在对象本身搜索这个属性，如果找到该属性就返回该属性的值，如果没有找到，则继续搜索该对象对应的原型对象，以此类推下去。</p><p>因为这样的搜索过程，因此我们如果在实例中添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性，因为在实例中搜索到该属性后就不会再向后搜索了。</p><h4 id="属性判断"><a href="#属性判断" class="headerlink" title="属性判断"></a>属性判断</h4><p>既然一个属性既可能是实例本身的，也有可能是其原型对象的，那么我们该如何来判断呢？</p><p>在属性确认存在的情况下，我们可以使用 hasOwnProperty() 方法来判断一个属性是存在与实例中，还是存在于原型中。注意这个方法只有在给定属性存在于实例中时，才会返回 true 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> = </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"laker"</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student.name); <span class="comment">// laker</span></span><br><span class="line"><span class="built_in">console</span>.log(student.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student.name = <span class="string">"xiaoming"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(student.name); <span class="comment">//xiaoming 屏蔽了原型对象中的 name 属性</span></span><br><span class="line"><span class="built_in">console</span>.log(student.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面主要是针对属性确认存在的情况下，如果这个属性不一定存在的话，这样判断就不够准确，因此我们需要首先判断这个属性是否存在，然后再进行上面的判断操作。</p><p>判断一个属性是否存在，我们可以使用 in 操作符，它会在对象能够访问给定属性时返回 true，无论该属性存在于实例还是原型中。</p><p>因此我们可以封装这样一个函数，来判断一个属性是否存在于原型中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span>(<span class="params">object, name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !object.hasOwnProperty(name) &amp;&amp; (name <span class="keyword">in</span> object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for-in 循环"></a>for-in 循环</h4><p>在使用 for-in 循环时，返回的是所有能够通过对象访问的、可枚举的属性，其中包括了存在于实例中的属性，也包括了存在于原型中的属性。</p><p>需要注意的一点是，屏蔽了实例中不可枚举属性的实例属性也会在 for-in 循环中返回。</p><h4 id="所有属性获取"><a href="#所有属性获取" class="headerlink" title="所有属性获取"></a>所有属性获取</h4><p>如果想要获得对象上所有可枚举的实例属性，可以使用 Object.keys() 方法，这个方法接收一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。</p><p>如果想要获取所有的实例属性，无论它是否可以枚举，我们可以使用 Object.getOwnPropertyNames() 方法。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="原型链理解"><a href="#原型链理解" class="headerlink" title="原型链理解"></a>原型链理解</h3><p>ECMAScript 中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用的一个引用类型继承另一个引用类型的属性和方法。</p><p>原型链的主要实现方法是让构造函数的原型对象等于另一个类型的实例，此时的原型对象因为是实例，因此将包含一个指向另一个原型的指针，相应地另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例与类型的链条。这就是原型链的基本概念。</p><p>下面我们来看一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Middle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Middle.prototype = <span class="keyword">new</span> Super();</span><br><span class="line"></span><br><span class="line">Sub.prototype = <span class="keyword">new</span> Middle();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> suber = <span class="keyword">new</span> Sub();</span><br></pre></td></tr></table></figure><p>下面我们来看看这几个对象间的关系</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu18-7.png" alt="配图18-7"></p><h3 id="默认的原型"><a href="#默认的原型" class="headerlink" title="默认的原型"></a>默认的原型</h3><p>其实我们上面这个原型链是不完整的，还记得我们以前说过所有的引用类型都继承了 Object 吗？这个继承就是通过原型链来实现的。我们一定要记住，所有函数的默认原型都是 Object 的实例，因此默认原型都会包含一个内部指针，指向 Object.Prototype 。这也正是所有的自定义类型都会继承 toString() 、valueOf() 等默认方法的根本原因。</p><p>那么我更新一下我们上面的原型链</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu18-8.png" alt="配图18-8"></p><p>Object.prototype 就是原型链的终点了，我们可以试着打印一下 Object.prototype.__proto__，我们会发现返回的是一个 null 空对象，这就意味着原型链的结束。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>总结了原型和原型链的知识后，感觉对 JavaScript 语言的理解更加深刻了，也为后面理解对象的创建和继承打下了基础。其实理解原型链，对于 JavaScript 中一些预定义类型的行为和实现就很好理解了。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu18-1.jpg&quot; alt=&quot;JavaScript深入理解之原型与原型链文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;原型和原型链一直都是 JavaScript 中很重要的概念，理解它们有助于我们理解预定义引用类型间的关系以及 JavaScript 中对象继承的实现机制，下面是我对原型和原型链的理解和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="原型链" scheme="http://cavszhouyou.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="原型" scheme="http://cavszhouyou.top/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之引用类型详解</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之引用类型详解.html</id>
    <published>2018-08-02T10:41:49.000Z</published>
    <updated>2018-08-03T10:00:45.140Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu17-1.jpg" alt="JavaScript深入理解之引用类型详解文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>相信提到 JavaScript 中的引用类型大家都不陌生，但是对于什么是引用类型这个问题，我一直充满疑惑，对这个概念的理解不是很清晰。引用类型与类的概念有什么不同？引用类型的实现机制到底是什么？下面是我对引用类型的一些理解和总结。</p><a id="more"></a><h2 id="引用类型定义"><a href="#引用类型定义" class="headerlink" title="引用类型定义"></a>引用类型定义</h2><p>引用类型是一种数据结构，用于将数据和功能组织在一起。它也常被称为类，但这种称呼并不妥当。尽管 ECMAScript从技术上讲是一门面向对象的语言，但它不具备传统的面向对象语言所支持的类和接口等基本结构。引用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。</p><p><strong>简单来理解，引用类型在逻辑上等价于其他面向对象语言中的类的概念。</strong></p><h2 id="预定义引用类型"><a href="#预定义引用类型" class="headerlink" title="预定义引用类型"></a>预定义引用类型</h2><p>JavaScript 提供了一些预定义的引用类型，用于创建相应引用类型的对象。如 Object 类型 、 Array 类型 、 Date 类型、 RegExp 类型、 Function 类型、 Boolean 基本包装类型、 String 基本包装类型、 Number 基本包装类型等。  </p><h2 id="引用类型的结构"><a href="#引用类型的结构" class="headerlink" title="引用类型的结构"></a>引用类型的结构</h2><p>在上面我们了解到引用类型是一种数据结构，那这种数据结构是如何定义的呢？前面我们知道了引用类型在逻辑上其实等价于其他面向对象语言中的类的概念，那么它的作用与类肯定也是相似的。</p><p>在 JavaScript 语言中对象是某个特定引用类型的实例。新对象是使用 new 操作符后跟一个 <strong>构造函数</strong> 来创建的。注意构造函数与一般的函数没有区别，只不过该函数是出于创建新对象的目的而定义的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> laker = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><p>因此我们可以看出，<strong>引用类型的定义其实就是其对应的构造函数的定义</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在控制台测试一下看看</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Array</span>) <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Date</span>) <span class="comment">// function</span></span><br></pre></td></tr></table></figure><p>我们知道无论在什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象，原型对象可以使所有对象实例共享它所包含的属性和方法。</p><p>同样的，<strong>引用类型对应的构造函数也拥有原型对象</strong>，在这个原型对象中保存了该引用类型预定义的方法，如 Array 类型中的 concat 、 every方法等。</p><p>关于原型这一块的内容会在以后详细讲解。</p><h2 id="引用类型的值"><a href="#引用类型的值" class="headerlink" title="引用类型的值"></a>引用类型的值</h2><p>引用类型的值是引用类型的一个实例，也就是 JavaScript 中常说的对象。每一个对象都是其对应引用类型的实例，对象是使用 new 操作符后跟一个 <strong>构造函数</strong> 来创建的。</p><p>我们知道构造函数和普通函数其实没有区别，只是因为由 new 操作符来调用才被称为构造函数，那么使用 new 操作符来创建一个对象的过程到底是怎样的呢？下面让我们来看一下具体的步骤：</p><ol><li>首先创建一个新的对象</li><li>然后将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数的代码（为这个新对象添加属性）</li><li>返回新对象</li></ol><p>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针，指向构造函数的原型对象。因此该实例可以通过原型链访问到原型对象中的方法及属性。</p><h2 id="预定义引用类型间的关系"><a href="#预定义引用类型间的关系" class="headerlink" title="预定义引用类型间的关系"></a>预定义引用类型间的关系</h2><p>在所有预定义引用类型中，Object 是特殊的一个数据类型。因为它是最基础的类型，其他的所有类型都都从 Object 继承了基本的行为。这种继承的方式是以原型链的方式实现的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在控制台测试一下看看</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype)</span><br></pre></td></tr></table></figure><p>在后面原型链的总结中我还会详细解释一部分，在这里我们只需要记住，Object 是最基础的类型，其他的所有类型都从 Object 继承了基本的行为。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>对于引用类型的理解每个人可能都有不同，主要是 JavaScript 的实现机制和一般的面向对象语言有所不同，所以理解起来有些困难。深入理解引用类型的概念对理解 JavaScript 的面向对象实现机制很有帮助。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu17-1.jpg&quot; alt=&quot;JavaScript深入理解之引用类型详解文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;相信提到 JavaScript 中的引用类型大家都不陌生，但是对于什么是引用类型这个问题，我一直充满疑惑，对这个概念的理解不是很清晰。引用类型与类的概念有什么不同？引用类型的实现机制到底是什么？下面是我对引用类型的一些理解和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="引用类型" scheme="http://cavszhouyou.top/tags/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="原型链" scheme="http://cavszhouyou.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="构造函数" scheme="http://cavszhouyou.top/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="new" scheme="http://cavszhouyou.top/tags/new/"/>
    
  </entry>
  
  <entry>
    <title>Vue历险记之可输入下拉框的实现</title>
    <link href="http://cavszhouyou.top/Vue%E5%8E%86%E9%99%A9%E8%AE%B0%E4%B9%8B%E5%8F%AF%E8%BE%93%E5%85%A5%E4%B8%8B%E6%8B%89%E6%A1%86%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://cavszhouyou.top/Vue历险记之可输入下拉框的实现.html</id>
    <published>2018-06-12T14:24:53.000Z</published>
    <updated>2018-06-13T09:09:38.987Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu16-1.jpg" alt="Vue历险记之可输入下拉框的实现 文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在做项目时，遇到了一个奇怪的需求，简单来说就是在下拉框选择后，可以对选中项的文本进行修改，选项文本和用户的输入之间属于双向绑定的关系。以前没有遇到过这种需求….在尝试了几种方法后，总算把这个问题解决了，下面简单谈一下我的方法。</p><a id="more"></a><h2 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h2><p><a href="http://cavszhouyou.top/Demo-Display/inputSelectBoxDemoDisplay.html">可输入拉框demo地址</a></p><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>我刚开始的想法是能不能直接在每个 option 里边嵌套一个 input 标签,然后把每个 input 的 value 值与 option 的文本值进行绑定，实践后这种方法行不通。</p><p>我现在的方法是使用一个 input 标签来动态获取 select 框当前选项的文本值，然后当 input 输入时，动态修改对应 option 的文本值，以此来实现双向绑定的功能。</p><p>因为我们使用的分别是 input 和 select ，因此我们需要对这两个标签进行一些样式的修改以此来让它们看着就像是一个可输入的 select 框。主要是调整 input 的位置，使其覆盖住 select 框中原本文本的位置，然后设置 input 隐藏掉右边的边框。因为它们的数据是双向绑定的，因此这样看起来就是一个可输入的下拉框。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 7]&gt;      &lt;html class="no-js lt-ie9 lt-ie8 lt-ie7"&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 7]&gt;         &lt;html class="no-js lt-ie9 lt-ie8"&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 8]&gt;         &lt;html class="no-js lt-ie9"&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>可输入下拉框demo展示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"可输入下拉框demo展示"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            top: 200px;</span></span><br><span class="line"><span class="undefined">            left: 0;</span></span><br><span class="line"><span class="undefined">            right: 0;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">            width: 600px;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.select-box</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 300px;</span></span><br><span class="line"><span class="undefined">            height: 50px;</span></span><br><span class="line"><span class="undefined">            padding-left: 20px;</span></span><br><span class="line"><span class="undefined">            font-size: 18px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.input-box</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            margin-left: -300px;</span></span><br><span class="line"><span class="undefined">            box-sizing: border-box;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#9e9e9e</span>;</span></span><br><span class="line"><span class="undefined">            border-right: none;</span></span><br><span class="line"><span class="undefined">            width: 280px;</span></span><br><span class="line"><span class="undefined">            height: 50px;</span></span><br><span class="line"><span class="undefined">            padding-left: 23px;</span></span><br><span class="line"><span class="undefined">            font-size: 18px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 7]&gt;</span></span><br><span class="line"><span class="comment">            &lt;p class="browsehappy"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="#"&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>可输入下拉框<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"select-box"</span> <span class="attr">v-model</span>=<span class="string">"selectValue"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in options"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">:value</span>=<span class="string">"item.value"</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"input-box"</span> <span class="attr">ref</span>=<span class="string">"inputBox"</span> <span class="attr">:value</span>=<span class="string">"inputValue"</span> @<span class="attr">input</span>=<span class="string">"changeValue()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> container = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#container'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="undefined">                selectValue: 1000,</span></span><br><span class="line"><span class="undefined">                options: [&#123;</span></span><br><span class="line"><span class="undefined">                    value: 1000,</span></span><br><span class="line"><span class="javascript">                    text: <span class="string">"骑士总冠军"</span></span></span><br><span class="line"><span class="undefined">                &#125;, &#123;</span></span><br><span class="line"><span class="undefined">                    value: 2000,</span></span><br><span class="line"><span class="javascript">                    text: <span class="string">"湖人总冠军"</span></span></span><br><span class="line"><span class="undefined">                &#125;, &#123;</span></span><br><span class="line"><span class="undefined">                    value: 3000,</span></span><br><span class="line"><span class="javascript">                    text: <span class="string">"火箭总冠军"</span></span></span><br><span class="line"><span class="undefined">                &#125;, &#123;</span></span><br><span class="line"><span class="undefined">                    value: 4000,</span></span><br><span class="line"><span class="javascript">                    text: <span class="string">"马刺总冠军"</span></span></span><br><span class="line"><span class="undefined">                &#125;]</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            computed: &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 获取select框中所选文本值</span></span></span><br><span class="line"><span class="javascript">                inputValue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> value;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//遍历找到对应文本值</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.options.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (item.value === self.selectValue) &#123;</span></span><br><span class="line"><span class="undefined">                            value = item.text;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// input输入修改options中的对应数值</span></span></span><br><span class="line"><span class="javascript">                changeValue: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> text = <span class="keyword">this</span>.$refs.inputBox.value;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//遍历修改对应文本值</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.options.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (item.value === self.selectValue) &#123;</span></span><br><span class="line"><span class="undefined">                            item.text = text;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这是我暂时想到的解决办法，以前没有遇到过这样的问题，实现的过程还是挺有趣的，以后有时间再看看能不能再完善一些。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu16-1.jpg&quot; alt=&quot;Vue历险记之可输入下拉框的实现 文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近在做项目时，遇到了一个奇怪的需求，简单来说就是在下拉框选择后，可以对选中项的文本进行修改，选项文本和用户的输入之间属于双向绑定的关系。以前没有遇到过这种需求….在尝试了几种方法后，总算把这个问题解决了，下面简单谈一下我的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
      <category term="Vue历险记" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/Vue%E5%8E%86%E9%99%A9%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://cavszhouyou.top/tags/vue/"/>
    
      <category term="select下拉框" scheme="http://cavszhouyou.top/tags/select%E4%B8%8B%E6%8B%89%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之执行上下文示例分析</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%A4%BA%E4%BE%8B%E5%88%86%E6%9E%90.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之执行上下文示例分析.html</id>
    <published>2018-04-23T09:34:39.000Z</published>
    <updated>2018-04-23T13:38:34.214Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu15-1.jpg" alt="JavaScript深入理解之执行上下文示例分析 文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前面已经对执行上下文的创建及其三个属性做了总结，本篇文章通过一个示例分析来将前面的总结的知识点做一个串联与回顾。不了解执行上下文的同学可以先看我前面的几篇对执行上下文的总结。</p><a id="more"></a><h2 id="讲解示例"><a href="#讲解示例" class="headerlink" title="讲解示例"></a>讲解示例</h2><p>我们先来看一看下边这段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"global var"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">"var in outerFunc"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="string">"var in innerFunc"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(c);</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    innerFunc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outerFunc();</span><br></pre></td></tr></table></figure><p>执行这段代码，我们很容易判断得到如下结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">in</span> outerFunc</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">in</span> innerFunc</span><br><span class="line">global <span class="keyword">var</span></span><br></pre></td></tr></table></figure><p>下面我们来分析一下这段代码的执行过程。</p><h2 id="执行分析"><a href="#执行分析" class="headerlink" title="执行分析"></a>执行分析</h2><h3 id="全局代码执行"><a href="#全局代码执行" class="headerlink" title="全局代码执行"></a>全局代码执行</h3><p>首先在执行全局代码之前， JavaScript 引擎会首先对全局代码进行解析，创建全局执行上下文 globalContext 。</p><ol><li><p>首先会创建全局执行上下文的第一个属性全局变量对象 globalVO 。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略全局对象其他属性</span></span><br><span class="line"></span><br><span class="line">globalContext.globalVO = &#123;</span><br><span class="line">    a: <span class="literal">undefined</span>,</span><br><span class="line">    foo: reference to <span class="function"><span class="keyword">function</span> <span class="title">foo</span>,</span></span><br><span class="line"><span class="function">    <span class="title">outerFunc</span>: <span class="title">reference</span> <span class="title">to</span> <span class="title">function</span> <span class="title">outerFunc</span></span></span><br><span class="line"><span class="function">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>然后将 globalVO 压入全局上下文作用域链的顶端。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">globalContext.[[Scope]] = [ </span><br><span class="line">    globalContext.globalVO </span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>然后将全局上下文的作用域链赋值给 globalVO 中所有的函数的 <code>[[Scope]]</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo.[[Scope]] = globalContext.[[Scope]];</span><br><span class="line"></span><br><span class="line">outerFunc.[[Scope]] = globalContext.[[Scope]];</span><br></pre></td></tr></table></figure></li></ol><p>全局执行上下文创建好后，进入到全局执行代码的执行阶段，首先将全局执行上下文压入执行上下文栈中，然后按顺序依次执行代码。</p><ol><li><p>在执行代码前判断得到全局执行上下文中的 this 指向 <code>globalVO</code>;</p></li><li><p>执行第一行代码 <code>var a = &quot;global var&quot;;</code> ,为 globalVO 中的 a 属性赋值为 <code>&quot;global var&quot;</code>;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> globalContext.globalVO = &#123;</span><br><span class="line">    a: <span class="string">"global var"</span>,</span><br><span class="line">    foo: reference to <span class="function"><span class="keyword">function</span> <span class="title">foo</span>,</span></span><br><span class="line"><span class="function">    <span class="title">outerFunc</span>: <span class="title">reference</span> <span class="title">to</span> <span class="title">function</span> <span class="title">outerFunc</span></span></span><br><span class="line"><span class="function">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>执行代码 <code>outerFunc();</code>，进入outerFunc()函数执行阶段。</p></li></ol><h3 id="outerFunc-函数执行阶段"><a href="#outerFunc-函数执行阶段" class="headerlink" title="outerFunc() 函数执行阶段"></a>outerFunc() 函数执行阶段</h3><p>在执行 outerFunc() 函数前，Javascript 引擎会先对 outerFunc 函数代码进行解析，创建 outerFunc 函数的执行上下文 outerFuncContext。</p><ol><li><p>创建 outerFunc 函数执行上下文的活动对象 outerFuncAO。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">outerFuncContext.outerFuncAO = &#123;</span><br><span class="line">    b: <span class="literal">undefined</span>,</span><br><span class="line">    innerFunc: reference to <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span></span></span><br><span class="line"><span class="function">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>复制 outerFunc 函数的 <code>[[Scope]]</code> 属性，为函数执行上下文的作用域链赋值，然后将函数执行上下文的活动对象压入作用域链顶端。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">outerFuncContext.[[Scope]] = [</span><br><span class="line">    outerFuncContext.outerFuncAO,</span><br><span class="line">    globalContext.globalVO</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>然后将作用域链赋值给 outerFuncAO 中所有函数的 <code>[[Scope]]</code> 属性。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innerFunc.[[Scope]] = outerFuncContext.[[Scope]];</span><br></pre></td></tr></table></figure></li></ol><p>outerFunc 函数执行上下文创建后，进入函数代码的执行阶段，将 outerFuncContext 压入执行上下文栈中，按顺序依次执行代码。</p><ol><li><p>在执行代码前，根据函数调用方式，判断得到 outerFuncContext 的 this 指向为 <code>globalVO</code>。</p></li><li><p>执行第一行代码 <code>var b = &quot;var in outerFunc&quot;;</code> ，为 outerFuncAO 的 b 属性赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">outerFuncContext.outerFuncAO = &#123;</span><br><span class="line">    b: <span class="string">"var in outerFunc"</span>,</span><br><span class="line">    innerFunc: reference to <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span></span></span><br><span class="line"><span class="function">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p>然后执行代码 <code>console.log(b);</code> ，打印 b 的属性值。</p></li><li><p>然后执行代码 <code>innerFunc();</code> ，进入 innerFunc 函数的执行阶段。</p></li></ol><h3 id="innerFunc-函数执行阶段"><a href="#innerFunc-函数执行阶段" class="headerlink" title="innerFunc() 函数执行阶段"></a>innerFunc() 函数执行阶段</h3><p>在执行 innerFunc() 函数前，Javascript 引擎会先对 innerFunc 函数代码进行解析，创建 innerFunc 函数的执行上下文 innerFuncContext。</p><ol><li><p>创建 innerFunc 函数执行上下文的活动对象 innerFuncAO。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">innerFuncContext.innerFuncAO = &#123;</span><br><span class="line">    c: <span class="literal">undefined</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>复制 innerFunc 函数的 <code>[[Scope]]</code> 属性，为函数执行上下文的作用域链赋值，然后将函数执行上下文的活动对象压入作用域链顶端。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">innerFuncContext.[[Scope]] = [</span><br><span class="line">    innerFuncContext.innerFuncAO,</span><br><span class="line">    outerFuncContext.outerFuncAO,</span><br><span class="line">    globalContext.globalVO</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ol><p>innerFunc 函数执行上下文创建后，进入函数代码的执行阶段，将 innerFuncContext 压入执行上下文栈中，按顺序依次执行代码。</p><ol><li><p>在执行代码前，根据函数调用方式，判断得到 innerFuncContext 的 this 指向为 <code>globalVO</code>。</p></li><li><p>执行第一行代码 <code>var c = &quot;var in innerFunc&quot;;</code> ，为 innerFuncAO 的 c 属性赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">innerFuncContext.innerFuncAO = &#123;</span><br><span class="line">    c: <span class="string">"var in innerFunc"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>然后执行代码 <code>console.log(c);</code> ，打印 c 的属性值。</p></li><li><p>然后执行代码 <code>foo();</code> ，进入 foo 函数的执行阶段，注意这里我们是通过作用域链找到的 foo 函数的引用。</p></li></ol><h3 id="foo-函数执行阶段"><a href="#foo-函数执行阶段" class="headerlink" title="foo() 函数执行阶段"></a>foo() 函数执行阶段</h3><p>在执行 foo() 函数前，Javascript 引擎会先对 foo 函数代码进行解析，创建 foo 函数的执行上下文 fooContext。</p><ol><li><p>创建 foo 函数执行上下文的活动对象 fooAO。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fooContext.fooAO = &#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>复制 foo 函数的 <code>[[Scope]]</code> 属性，为函数执行上下文的作用域链赋值，然后将函数执行上下文的活动对象压入作用域链顶端。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fooContext.[[Scope]] = [</span><br><span class="line">    fooContext.fooAO,</span><br><span class="line">    globalContext.globalVO</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ol><p>foo 函数执行上下文创建后，进入函数代码的执行阶段，将 fooContext 压入执行上下文栈中，按顺序依次执行代码。</p><ol><li><p>在执行代码前，根据函数调用方式，判断得到 fooContext 的 this 指向为 <code>globalVO</code>。</p></li><li><p>然后执行代码 <code>console.log(a);</code> ，根据作用域链找到 a 的属性值，然后打印它。</p></li></ol><h3 id="执行结束阶段"><a href="#执行结束阶段" class="headerlink" title="执行结束阶段"></a>执行结束阶段</h3><p>我们先来看一下此时的执行上下文栈</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu11-2.png" alt="配图11-2"></p><p>函数执行完成后是一个执行上下文弹栈的过程。</p><ol><li><p>在 foo() 函数代码执行完成后，执行上下文栈将 fooContext 弹栈，在没有其他引用的情况下，fooContext中的数据都将被销毁，然后将控制权交还给 innerFuncContext。</p></li><li><p>继续执行 innerFunc 函数，因为没有其余可执行代码，所以 innerFunc() 函数执行完成，执行上下文栈将innerFuncContext 弹栈，在没有其他引用的情况下，innerFuncContext中的数据都将被销毁，然后将控制权交还给 outerFuncContext。</p></li><li><p>继续执行 outerFunc 函数，因为没有其余可执行代码。所以 outerFunc() 函数执行完成，执行上下文栈将 outerFuncContext 弹栈，在没有其他引用的情况下，outerFuncContext中的数据都将被销毁，然后将控制权交还给 globalContext。</p></li><li><p>继续执行全局代码，在应用退出时，globalContext 弹栈，整段代码执行结束。</p></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这个例子的分析基本结束了，通过这个示例分析，我对执行上下文中的三个属性间的联系有了更深刻的认识，对执行上下文也有了更深的理解，这样的分析对我们理解闭包等知识点有很大的帮助。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu15-1.jpg&quot; alt=&quot;JavaScript深入理解之执行上下文示例分析 文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前面已经对执行上下文的创建及其三个属性做了总结，本篇文章通过一个示例分析来将前面的总结的知识点做一个串联与回顾。不了解执行上下文的同学可以先看我前面的几篇对执行上下文的总结。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="执行上下文" scheme="http://cavszhouyou.top/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="执行环境" scheme="http://cavszhouyou.top/tags/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之this详解</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8Bthis%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之this详解.html</id>
    <published>2018-03-29T01:24:29.000Z</published>
    <updated>2018-04-23T08:56:25.822Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu14-1.jpg" alt="JavaScript深入理解之this详解 文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在文章<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html#more">《JavaScript深入理解之执行上下文》</a>中我们谈到了执行上下文一共有三个属性：变量对象、作用域链、this指针。本篇文章我们将介绍执行上下文最后一个重要的属性 —— this。this指向一直是一个老生常谈的问题，下面是我的一些理解和总结。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>this 指向最后一次调用这个方法的对象</p></blockquote><p>记住上面这句话，对于 this 的用法我们其实已经懂了一半了。在实际应用中，一共有四种调用方式：方法调用模式、函数调用模式、构造器调用模式和 apply 、 call 、 bind 调用模式。下面我们来分别看一下在这几种不同模式下 this 的指向。</p><h2 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h2><p>当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时， this 被绑定到该对象。</p><p>那么我们怎么来判断一个函数是否是被作为方法来调用呢？ 如果调用表达式包含一个提取属性的动作（即包含一个 <code>.</code> 点或 <code>[subscript]</code> 下标表达式），那么它就是被当做一个方法来调用。</p><p>下面我们来看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObjct = &#123;</span><br><span class="line">    value: <span class="number">1</span>;</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObjct.increment(); <span class="comment">// myObject 调用 increment() 方法，this 指向 myObject 对象 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mvObject.value); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>方法可以使用 this 访问自己所属的对象，所以它能从对象中取值或对对象进行修改。 this 到对象的绑定发生在函数调用的时候，而不是函数定义的时候。</p><h2 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h2><p>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。如下面这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">increment(); <span class="comment">// 作为函数调用， this 绑定到全局对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以此模式来调用函数时，this被绑定到全局对象。</p><p>这其实是语言设计上的一个错误。倘若语言设计正确，那么当内部函数被调用时，this 应该仍然绑定到外部函数的 this 变量（其他大部分语言都是这样实现的）。</p><p>这个设计错误的结果就是方法不能利用内部函数来帮助它工作，因为内部函数的 this 被绑定了错误的值，所以不能共享该方法对对象的访问权。</p><p>不过我们可以通过定义一个变量并给它赋值为 this 来解决，常用的如 that。</p><h2 id="构造器调用模式"><a href="#构造器调用模式" class="headerlink" title="构造器调用模式"></a>构造器调用模式</h2><p>如果在一个函数前面带上 new 调用，那么背地里将会创建一个连接到该函数的 prototype 成员的新对象，同时 this 也会被绑定到那个新对象上。</p><p>如下面例子所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> peo = <span class="keyword">new</span> person(<span class="string">"xiao ming"</span>); <span class="comment">// this 绑定到 peo 对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(peo.name); <span class="comment">// "xiao ming"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个函数，如果创建的目的就是希望结合 new 前缀来调用，那么它就被称为构造器函数。按照约定，它们保存在以大写格式命名的变量里。</p><h2 id="apply-、-call-和-bind-调用模式"><a href="#apply-、-call-和-bind-调用模式" class="headerlink" title="apply 、 call 和 bind 调用模式"></a>apply 、 call 和 bind 调用模式</h2><p>这三个方法用途都是在特定的作用域中调用函数，简单说就是用于指定函数调用时 this 指向的对象。下面我们分别来讲讲它们用法的不同。</p><h3 id="apply-调用"><a href="#apply-调用" class="headerlink" title="apply 调用"></a>apply 调用</h3><p>apply() 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。其中第二个参数可以是 Array 的实例，也可以是 arguments 对象。</p><p>如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">""</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setName.apply(person,[<span class="string">"xiao"</span>,<span class="string">"ming"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// "xiao ming" </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">firstName,lastName</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = firstName + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="call-调用"><a href="#call-调用" class="headerlink" title="call 调用"></a>call 调用</h3><p>call() 方法和 apply() 方法的作用相同，它们的区别仅在于接收参数的方式不同。对于 call() 方法而言，第一个参数是 this 值没有变化，变化的其余参数都直接传递给函数。换句话说，在使用 call() 方法时，传递给函数的参数 必须逐个列举出来。</p><p>如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">""</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setName.call(person,<span class="string">"xiao"</span>,<span class="string">"ming"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// "xiao ming" </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">firstName,lastName</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = firstName + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bind-调用"><a href="#bind-调用" class="headerlink" title="bind 调用"></a>bind 调用</h3><p>ES5中新定义了一个方法：bind()。这个方法会创建一个函数的实例，其 this 值会被绑定到传给 bind() 函数的值。</p><p>如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">        color: <span class="string">"blue"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">sayColor(); <span class="comment">// "red"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objectSayColor = sayColor.bind(o); <span class="comment">// 创建新的函数实例，并将其 this 值绑定为 o 对象</span></span><br><span class="line"></span><br><span class="line">objectSayColor();<span class="comment">// "blue"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到了，使用 bind() 函数创建的实例，即使在全局作用域中调用这个函数，this 绑定的依然是 o 对象。</p><p>不过我们需要注意一点，如果将 bind() 函数创建的实例作为构造器函数使用时，它的 this 值会绑定为新创建的对象，而不再是 bind() 时绑定的对象了。</p><h2 id="还有一点疑问"><a href="#还有一点疑问" class="headerlink" title="还有一点疑问"></a>还有一点疑问</h2><p>其实了解了上面几种调用方式后，我们对 this 应该说已经足够了解了。那么让我们来看一下下面这道题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar()); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//示例2</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar)()); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//示例3</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar = foo.bar)()); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//示例4</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="literal">false</span> || foo.bar)()); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//示例5</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar, foo.bar)()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>看完后是不是有一种头大的感觉，怎么，怎么感觉没一个对得上……</p><p>要想解决这些疑惑，或许我们应该从 this 的规范入手，下面推荐一篇文章<a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">《JavaScript深入之从ECMAScript规范解读this 》</a>。作者给我们提供了一个很好的思路去从规范的角度理解 this 。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>好了，关于 this 的总结暂时先到这里了。对于一般的 this 指向问题，我们了解这四种调用模式其实就已经足够了，而且通过调用方式的角度是最适合我们理解的。当然了我在文章的末尾提出的那道问题，涉及到的就不是仅仅使用调用模式就能够理解的，我们需要从规范的角度去理解，我是认为这种方式应该是最有效的，但很不容易理解，后边有时间我会再从规范角度去总结一下 this 的指向问题。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu14-1.jpg&quot; alt=&quot;JavaScript深入理解之this详解 文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;在文章&lt;a href=&quot;http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html#more&quot;&gt;《JavaScript深入理解之执行上下文》&lt;/a&gt;中我们谈到了执行上下文一共有三个属性：变量对象、作用域链、this指针。本篇文章我们将介绍执行上下文最后一个重要的属性 —— this。this指向一直是一个老生常谈的问题，下面是我的一些理解和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="执行上下文" scheme="http://cavszhouyou.top/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="this" scheme="http://cavszhouyou.top/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之作用域链</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之作用域链.html</id>
    <published>2018-03-28T08:37:07.000Z</published>
    <updated>2018-04-23T09:11:20.443Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu13-1.jpg" alt="JavaScript深入理解之作用域链文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在文章<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html#more">《JavaScript深入理解之执行上下文》</a>中我们谈到了执行上下文一共有三个属性：变量对象、作用域链、this指针。本篇文章我们将介绍执行上下文第二个重要的属性 —— 作用域链，希望大家建立在对执行上下文和变量对象概念有一定了解的基础上阅读。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链。作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问。</p></blockquote><p>在上一篇文章中我们介绍了变量对象里边包含了执行上下文中所有变量和函数的声明，它的作用就是保证代码执行时对变量和函数的正确访问。如果在该变量对象中没有找到对应变量或函数，则会根据执行作用域链向上继续查找，这就是我们今天要介绍的主题。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>作用域链本质上是一个指向变量对象的指针列表（在文中我们使用数组表示），它只引用但不实际包含变量对象。作用域链的前端始终都是当前执行上下文的变量对象，如果这个执行上下文属于函数执行上下文，则用活动对象作为变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p><h2 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h2><p>一般我们都认为作用域链是在函数定义时就已经创建好的，所以它只和定义时的函数包含关系有关。这样理解作用域链其实看似很清晰，但其实只是片面的理解。因为大家有没有想过一个问题，如果一开始就定义好，和代码执行阶段没有关系的话，那我们是如何来访问那些在代码执行中动态变化的对象的呢？</p><p>这其实是一个动态的创建过程，下面我们通过一个例子来看一下作用域链的创建过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">compare(<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1,value2</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    inner();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(value1 &lt; value2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( value1 &gt; value2 ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局阶段"><a href="#全局阶段" class="headerlink" title="全局阶段"></a>全局阶段</h3><p>我们从程序开始时讲起。首先在执行全局代码前，我们会先创建全局上下文。创建全局上下文的第一步是创建全局变量对象，然后将全局变量对象放入作用域链的顶端(执行上下文中的<code>[[Scope]]</code>属性指向作用域链)。如下图所示（图中省略了其他属性），</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu13-2.png" alt="配图13-2"></p><p>此时全局上下文中的<code>[[Scope]]</code>属性可以这样表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">globalContext.[[Scope]] = [</span><br><span class="line">    globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>注意在创建完作用域链后，JavaScript 引擎还做了另一件事，这也是实现作用域链的最关键的一步，它会为变量对象中的所有函数添加一个<code>[[Scope]]</code>属性，而这个属性的值就是我们刚才介绍的全局上下文中的<code>[[Scope]]</code>属性值。如下，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compare.[[Scope]] = [</span><br><span class="line">    globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="函数阶段"><a href="#函数阶段" class="headerlink" title="函数阶段"></a>函数阶段</h3><p>全局上下文创建后，开始执行代码，根据代码动态的修改变量对象中的属性，当我们执行到<code>compare(5,10)</code>时，让我们来看一看在函数阶段是如何创建作用域链的。</p><p>首先在执行<code>compare(5,10)</code>之前，我们会为函数创建对应的执行上下文。<strong>注意重点来了</strong>函数上下文首先会复制函数的<code>[[Scope]]</code>属性用来创建作用域链，然后用 arguments 创建活动对象，最后再将活动对象压入作用域链顶端，如下所示，</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu13-3" alt="配图13-3"></p><p>comapre执行上下文复制<code>[[Scope]]</code>属性创建作用域链后可以这样表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compareContext = &#123;</span><br><span class="line">    Scope: compare.[[Scope]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压入活动对象后作用域链如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">checkScopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建好作用域链后，JavaScript 引擎同样会判断函数执行上下文的活动对象中的函数声明，然后为变量对象中的所有函数添加一个<code>[[Scope]]</code>属性，而这个属性的值就是当前函数上下文中的<code>[[Scope]]</code>属性值。如所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inner.[[Scope]] = [</span><br><span class="line">   checkScopeContext.AO, </span><br><span class="line">   globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在代码执行阶段会对函数上下文中属性动态修改，因为作用域链是对变量对象的引用，因此我们可以实时地获取变量对象的最新状态，保证对作用域链查询时能够保证变量的准确性。</p><p>接下来对于 inner 函数，在执行到它时会继续这些上面同样的操作来创建作用域链，这就是我为什么说作用域链的创建是一个动态的过程的原因。</p><h2 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h2><p>相信大家通过上面的讲解已经明白了作用域链是如何创建的了，下面我们小结一下。</p><ol><li><p>全局上下文阶段，创建全局对象。</p></li><li><p>将全局对象压入作用域链</p></li><li><p>为全局对象中所有函数创建<code>[[Scope]]</code>属性，并将作用域链保存到该属性。（若无函数则跳过此步骤）</p></li><li><p>每一个函数上下文阶段，复制函数的<code>[[Scope]]</code>属性，创建作用域链</p></li><li><p>创建活动对象，并用 arguments 创建活动对象  </p></li><li><p>将活动对象压入当前上下文中的作用域链</p></li><li><p>为活动对象中所有函数创建<code>[[Scope]]</code>属性，并将作用域链保存到该属性。（若无函数则跳过此步骤）</p></li></ol><h2 id="扩展作用域链"><a href="#扩展作用域链" class="headerlink" title="扩展作用域链"></a>扩展作用域链</h2><p>虽然执行上下文的类型总共只有两种———全局和局部（函数），但还是有办法延长作用域链的。这么说是因为有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。有两种情况会发生这种现象，如下：</p><ul><li><p>try-catch 语句中的 catch 块</p><p>当 catch 语句执行时，会创建一个新的变量对象，其中包含了被抛出的错误对象的声明，然后将这个变量对象压入当前上下文作用域链中。</p></li><li><p>with 语句</p><p>当 with 语句执行时，会将 with () 中指定的对象压入当前上下文作用域链中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> number  = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span>(location)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时会将 location 对象添加到当前上下文作用域链的顶端。</p></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>好啦，作用域链的总结就基本到这里了。作用域链的理解对于 JavaScript 中如闭包等的理解很有帮助，这是一个很基础和重要的知识点，理解后的确有一种豁然开朗的感觉。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu13-1.jpg&quot; alt=&quot;JavaScript深入理解之作用域链文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;在文章&lt;a href=&quot;http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html#more&quot;&gt;《JavaScript深入理解之执行上下文》&lt;/a&gt;中我们谈到了执行上下文一共有三个属性：变量对象、作用域链、this指针。本篇文章我们将介绍执行上下文第二个重要的属性 —— 作用域链，希望大家建立在对执行上下文和变量对象概念有一定了解的基础上阅读。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="执行上下文" scheme="http://cavszhouyou.top/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="变量对象" scheme="http://cavszhouyou.top/tags/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="作用域链" scheme="http://cavszhouyou.top/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之变量对象</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之变量对象.html</id>
    <published>2018-03-26T09:40:39.000Z</published>
    <updated>2018-04-23T09:11:34.463Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu12-1.jpg" alt="JavaScript深入理解之变量对象"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在文章<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html#more">《JavaScript深入理解之执行上下文》</a>中我们谈到了执行上下文一共有三个属性：变量对象、作用域链、this指针。本篇文章我们将介绍执行上下文第一个重要的属性 —— 变量对象，希望大家建立在对执行上下文概念有一定了解的基础上阅读。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>变量对象（Variable object，VO）是与执行上下文相关的数据作用域，存储了在执行上下文中定义的所有变量和函数声明，保证代码执行时对变量和函数的正确访问。</p></blockquote><p>简单的来它说存储着执行上下文中的以下内容：</p><ol><li>函数的所有形参(如果是函数执行上下文)<ul><li>由名称和对应值组成，作为变量对象的属性被创建</li><li>没有实参，属性值设为 undefined</li></ul></li><li>函数声明<ul><li>由名称和对应值（函数对象(function-object)，指向对函数的引用）组成，作为变量对象的属性被创建</li><li>如果变量对象已经存在相同名称的属性，则完全替换这个属性</li></ul></li><li>变量声明<ul><li>由名称和对应值（undefined）组成，作为变量对象的属性被创建</li><li>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</li></ul></li></ol><p>我们用一个例子来理解一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><code>foo(1)</code> 函数执行上下文对应的 VO （其实是AO，后边会介绍到）为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">    <span class="built_in">arguments</span>: &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">        length: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="literal">undefined</span>,</span><br><span class="line">    c: reference to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    d: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，只有全局上下文的变量对象允许通过 VO 的属性名称来间接访问(因为在全局上下文里，全局对象自身就是变量对象，稍后会详细介绍)，在其它上下文中是不能直接访问 VO 对象的，因为它只是内部机制的一个实现。</p><h2 id="不同执行上下文中的变量对象"><a href="#不同执行上下文中的变量对象" class="headerlink" title="不同执行上下文中的变量对象"></a>不同执行上下文中的变量对象</h2><p>不同执行上下文中的变量对象是不同的，根据可执行代码的不同我们可以将执行上下文分为两种，一种是全局执行上下文，一种是函数执行上下文。因此我们也可以将变量对象分为对应的两种，一种是全局上下文变量对象，一种是函数上下文变量对象。那么它们和变量对象是什么关系呢？可以这样理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">抽象变量对象VO (变量初始化过程的一般行为)</span><br><span class="line">  ║</span><br><span class="line">  ╠══&gt; 全局上下文变量对象GlobalContextVO，等同于全局对象</span><br><span class="line">  ║        (VO === this === global)</span><br><span class="line">  ║</span><br><span class="line">  ╚══&gt; 函数上下文变量对象FunctionContextVO，等同于活动对象（Variable object，VO）</span><br><span class="line">           (VO === AO, 并且添加了&lt;arguments&gt;和&lt;formal parameters&gt;)</span><br></pre></td></tr></table></figure><p>变量对象其实只是一个抽象的基本事物，它规定了一些基本的操作（如变量初始化）和行为，不同执行上下文中的不同实现都是基于这些行为来创建的。其实不必太过纠结于这个概念，我们只需要记住在全局执行上下文中我们通过<strong>全局对象</strong>来代表全局上下文变量对象，在函数上下文中我们通过<strong>活动对象</strong>来代表函数上下文变量对象。下面我们来分别介绍它们。</p><h2 id="全局上下文中的变量对象"><a href="#全局上下文中的变量对象" class="headerlink" title="全局上下文中的变量对象"></a>全局上下文中的变量对象</h2><p>相信大家都已经猜到了，全局上下文中的变量对象就是全局对象，因为它们拥有的特征太像了。</p><p>我们先来看一下全局对象的定义：</p><blockquote><p>全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全局对象不是任何对象的属性，所以它没有名称。</p><p>在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。但通常不必用这种方式引用全局对象，因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。</p><p>例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，还意味着在顶层 JavaScript 代码中声明的所有变量都将成为全局对象的属性。</p></blockquote><p>我们再来看一下全局上下文中的变量对象的特点：</p><ul><li>全局上下文中的变量对象在执行所有代码之前创建。</li><li>全局上下文中的变量对象一直存在，直到程序结束。</li><li>全局上下文中的变量对象保存了全局上下文中所有的变量和函数声明</li><li>全局变量对象位于作用域链的顶端 </li></ul><p>其实对照起来一看，我们就会明白为什么会说全局上下文中的变量对象就是全局对象了。但全局对象除了含有变量对象的特点外，它还做了其他事，那就是在初始化时会将 Math 、 String 、Date、parseInt 等作为自身属性，这也是为什么我们可以访问使用这些函数和属性的原因。</p><p>讲了这么多，其实我们只要记住全局上下文中的变量对象就是全局对象就行了。</p><h2 id="函数上下文中的变量对象"><a href="#函数上下文中的变量对象" class="headerlink" title="函数上下文中的变量对象"></a>函数上下文中的变量对象</h2><p>在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象。</p><p>活动对象和变量对象其实是一个东西，只是变量对象是规范上的或者说是引擎实现上的，不可在 JavaScript 环境中访问，只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，所以才叫 activation object ，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问。</p><p>活动对象是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。arguments 属性值是 Arguments 对象，它包括如下属性：</p><ul><li>callee — 指向当前函数的引用</li><li>length — 真正传递的参数个数</li><li>properties-indexes (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)。</li></ul><p>注意，arguments 代表的是真正传入函数的参数列表（不受参数个数限制），和函数参数是分开的。</p><h2 id="变量对象的两个阶段"><a href="#变量对象的两个阶段" class="headerlink" title="变量对象的两个阶段"></a>变量对象的两个阶段</h2><p>我们知道一段可执行代码分为解析和执行两个阶段，变量对象的创建和赋值分别对应了这两个阶段。</p><h3 id="代码解析阶段"><a href="#代码解析阶段" class="headerlink" title="代码解析阶段"></a>代码解析阶段</h3><p>在代码解析阶段，会根据执行上下文中的变量声明和函数声明来创建变量对象，具体创建方式已经在定义部分讲过了。注意此时除了函数上下文可以根据传入的参数对 arguments 属性赋值以外，其他声明的属性的值都为 undefined ，即未定义。</p><h3 id="代码执行阶段"><a href="#代码执行阶段" class="headerlink" title="代码执行阶段"></a>代码执行阶段</h3><p>在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值。</p><p>定义部分的例子，代码执行完，这时候的 AO 是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">    <span class="built_in">arguments</span>: &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">        length: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">3</span>,</span><br><span class="line">    c: reference to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    d: reference to FunctionExpression <span class="string">"d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/8f19e45fd1f1" target="_blank" rel="noopener">《JavaScript 论代码执行上下文》</a><br><a href="https://www.cnblogs.com/TomXu/archive/2012/01/16/2309728.html#!comments" target="_blank" rel="noopener">《深入理解JavaScript系列（12）：变量对象（Variable Object）》</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">《JavaScript深入之变量对象》</a></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>变量对象这一个属性算是基本总结完了，后面还会有执行上下文另外两个属性的总结。其实在写文章前我认为我已经弄懂变量对象了，但真正总结的时候才发现，存在疑惑的地方还有很多，写的很纠结……不过很多东西还是慢慢来吧。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu12-1.jpg&quot; alt=&quot;JavaScript深入理解之变量对象&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;在文章&lt;a href=&quot;http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html#more&quot;&gt;《JavaScript深入理解之执行上下文》&lt;/a&gt;中我们谈到了执行上下文一共有三个属性：变量对象、作用域链、this指针。本篇文章我们将介绍执行上下文第一个重要的属性 —— 变量对象，希望大家建立在对执行上下文概念有一定了解的基础上阅读。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="执行上下文" scheme="http://cavszhouyou.top/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="变量对象" scheme="http://cavszhouyou.top/tags/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之执行上下文</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之执行上下文.html</id>
    <published>2018-03-24T11:34:43.000Z</published>
    <updated>2018-08-02T10:46:31.868Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu11-1.jpg" alt="JavaScript深入理解之执行上下文 文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>JavaScript 中的执行上下文（ Execution Context ）相信大家都不陌生，也就是我们常说的执行环境。想要弄懂 JavaScript 代码的执行过程，执行上下文是其中最重要的一个知识点。理解执行上下文有助于我们理解函数作用域链、变量对象和 this 指向等。这两天查阅了很多资料，下面是我对执行上下文的一个理解和总结。</p><a id="more"></a><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>众所周知 JavaScript 是一种描述型的脚本语言，不同于 C# 或者 java ，它不需要编译成中间语言，而是由 JS 引擎动态的解析和执行。那么 JavaScript 引擎是如何解析和执行一段 JavaScript 代码的呢？让我们先来看一个小例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">test(); <span class="comment">// this is a function!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this is a function!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面我们可以看出，test 函数调用在它的声明之前，按道理应该调用失败才对！而事实是 test 函数能够被正常调用，原因是 test 函数的声明被提升了，使得 test 函数在整个代码执行期间都可以访问到。那声明是什么时候提升的呢？就是在 JavaScript 引擎对代码解析的时候。</p><p>因此我们一定要记住，JavaScript 引擎在执行一段可执行代码之前，会先进行准备工作，也就是对这段代码进行解析（也可以称为预处理）。这个阶段会根据<strong>可执行代码</strong>创建相应的<strong>执行上下文（ Execution Context ）</strong>，也就是做声明提升等工作（后边会详细讲解）。然后在代码解析完成后才开始代码的执行。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这里我们需要注意的一点是， JavaScript 引擎解析执行代码的过程是一个边执行边解析的过程，解析发生在执行一段可执行代码之前。举个例子，当执行到一个函数的时候，就会先对这个函数进行解析，然后再执行这个函数。</p><h2 id="可执行代码"><a href="#可执行代码" class="headerlink" title="可执行代码"></a>可执行代码</h2><p>上面我们提到了，在代码解析阶段会根据不同的可执行代码创建相应的执行上下文，那么可执行代码有哪些呢？其实可以分为下面三种：</p><ul><li>全局执行代码，在执行所有代码前，解析创建全局执行上下文。</li><li>函数执行代码，执行函数前，解析创建函数执行上下文。</li><li>eval执行代码，运行于当前执行上下文中。</li></ul><h2 id="执行上下文的组成"><a href="#执行上下文的组成" class="headerlink" title="执行上下文的组成"></a>执行上下文的组成</h2><p>执行上下文定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每一个执行上下文都由以下三个属性组成。</p><ul><li><p>变量对象（Variable object，VO）</p></li><li><p>作用域链(Scope chain)</p></li><li><p>this</p></li></ul><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>执行每一段可执行代码时都会对应创建一个执行上下文，那么我们是如何来管理这些执行上下文的呢？JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文。 </p><p>下面我们通过一个例子来看一下执行上下文压栈是如何工作的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"global var"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">"var in outerFunc"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="string">"var in innerFunc"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(c);</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    innerFunc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outerFunc();</span><br></pre></td></tr></table></figure><p>代码首先进入Global Execution Context，然后依次进入outerFunc，innerFunc和foo的执行上下文，执行上下文栈就可以表示为：</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu11-2.png" alt="配图11-2"></p><p>JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以 JavaScript 引擎会先解析创建全局执行上下文，然后将全局执行上下文压栈。然后当执行流进入一个函数时，会先解析创建函数的执行上下文，然后将它的执行上下文压栈。而在函数执行之后，会将其执行上下文弹栈，弹栈后执行上下文中所有的数据都会被销毁，然后把控制权返回给之前的执行上下文。注意，全局执行上下文会一直留在栈底，直到整个应用结束。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本篇文章只是对执行上下文做一个初步的介绍，为后面讲解执行上下文的三个属性作一个铺垫。先了解创建执行上下文这个过程，然后再去分析过程里边的细节。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu11-1.jpg&quot; alt=&quot;JavaScript深入理解之执行上下文 文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;JavaScript 中的执行上下文（ Execution Context ）相信大家都不陌生，也就是我们常说的执行环境。想要弄懂 JavaScript 代码的执行过程，执行上下文是其中最重要的一个知识点。理解执行上下文有助于我们理解函数作用域链、变量对象和 this 指向等。这两天查阅了很多资料，下面是我对执行上下文的一个理解和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="执行上下文" scheme="http://cavszhouyou.top/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="执行环境" scheme="http://cavszhouyou.top/tags/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之RegExp类型详解</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8BRegExp%E7%B1%BB%E5%9E%8B.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之RegExp类型.html</id>
    <published>2018-03-22T12:21:22.000Z</published>
    <updated>2018-04-23T09:10:54.471Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu10-1.jpg" alt="JavaScript深入理解之RegExp类型详解文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>我们在验证输入或查找字符时经常需要用到正则表达式，正则表达式的强大毋庸置疑。在 JavaScript 中也提供了 RegExp 类型来作为相应的支持。下面是我对 RegExp 类型的看法和总结。</p><a id="more"></a><h2 id="RegExp-对象的创建"><a href="#RegExp-对象的创建" class="headerlink" title="RegExp 对象的创建"></a>RegExp 对象的创建</h2><p>ECMAScript 通过 RegExp 类型来支持正则表达式。一共有两种创建方式，一种是以字面量形式来定义的正则表达式，另一种是使用 RegExp 构造函数来创建正则表达式。下面我们来分别介绍一下。</p><h3 id="字面量形式"><a href="#字面量形式" class="headerlink" title="字面量形式"></a>字面量形式</h3><p>使用下面类似 Perl 的语法，就可以创建一个正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> expression = <span class="regexp">/ pattern /</span> flags</span><br></pre></td></tr></table></figure><p>其中模式( pattern )部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向引用。每个正则表达式可以带有一个或多个标志，用以标明正则表达式的行为。正则表达式的匹配模式支持下列三个标志。</p><ul><li><code>g</code>: 表示全局模式，即模式将应用于所有字符串，而非在发现第一个匹配项时就停止检索。</li><li><code>i</code>: 表示不区分大小写模式，即在确定匹配项时忽略模式与字符串的大小写。</li><li><code>m</code>: 表示多行匹配模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。 </li></ul><p>下面我们来看几个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 匹配字符串中所有"at"的实例</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/at/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配字符串中的第一个"at"，不区分大小写</span></span><br><span class="line"><span class="keyword">var</span> pattern2 = <span class="regexp">/at/i</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配字符串中所有的"at"，不区分大小写</span></span><br><span class="line"><span class="keyword">var</span> pattern3 = <span class="regexp">/at/gi</span>;</span><br></pre></td></tr></table></figure><p>注意，模式中使用到的元字符需要转义。正则表达式中的元字符包括: <code>( ) [ ] { } \ ^ $ | ? * + .</code><br>因为这些元字符在正则表达式中有特殊的用途，所以如果需要匹配的字符串中含有这些字符，这必须对其转义，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配字符串中的第一个" [at] ",不区分大小写</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\[at\]/i</span> ;</span><br></pre></td></tr></table></figure><h3 id="RegExp-构造函数"><a href="#RegExp-构造函数" class="headerlink" title="RegExp 构造函数"></a>RegExp 构造函数</h3><p>另一种创建正则表达式的方法是使用 RegExp 构造函数，它接收两个参数，一个是要匹配的字符串模式，另一个是可选的标志字符串。只要是可以用字面量定义的任何任何表达式，都可以用构造函数来定义。如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配字符串中所有"at"的实例</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"at"</span>,<span class="string">"g"</span>);</span><br></pre></td></tr></table></figure><p>这里需要注意，我们传递给构造函数的两个参数都是字符串的形式，所以这里会涉及到一个转义问题。因为是由字符串转化为正则表达式，所以所有的元字符都必须进行双重转义，如下面的例所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量形式</span></span><br><span class="line">/\[at\]/</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数中使用的双重定义的字符串</span></span><br><span class="line"><span class="string">"/\\[at\\]/"</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这里对于这两种方法有一个区别需要注意，在 ES3 的规定中，使用正则表达式字面量始终会共享一个 RegExp 实例，而使用构造函数创建的每一个新 RegExp 实例都是一个新实例。如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 在ES3 环境下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re = <span class="literal">null</span>,</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字面量形式创建</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">0</span>;i++)&#123;</span><br><span class="line">    re = <span class="regexp">/cat/g</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(re.test(<span class="string">"catastrophe"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为 true false true false true false true false true false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数创建</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">0</span>;i++)&#123;</span><br><span class="line">    re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"cat"</span>,<span class="string">"g"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(re.test(<span class="string">"catastrophe"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为 true true true true true true true true true true</span></span><br></pre></td></tr></table></figure><p>下面我们来分析以下上面两个例子。</p><p>第一个例子中因为正则表达式字面量共享一个实例，所以实例属性不会重置。在第一次调用 test() 方法找到了 “cat” 后返回 true ，但第二次调用是从索引为3的字符(上一次匹配的末尾)开始的，所以第二次就找不到它了，返回 false 。由于会测试到字符串末尾，所以下一次调用 test() 就又从头开始了，所以继续返回 true 和 false 的循环。</p><p>第二个例子使用构造函数在每次循环中创建正则表达式。因为每次迭代都会创建一个新的 RegExp 实例，所以每次调用都会返回 true 。</p><p>上面我们说了，这是在 ES3 下的表现。在 ES5 中对此作出了明确规定，使用字面量形式时也会像直接调用 RegExp 构造函数一样，每次创建新的 RegExp 实例。所以第一个例子在 ES5 下每次也都会返回 true 。因为现在 ES5 普及度已经很高了，所以上面的区别仅做一个了解，在实际应用中多数情况下不用考虑这个问题。</p><h2 id="RegExp-实例属性"><a href="#RegExp-实例属性" class="headerlink" title="RegExp 实例属性"></a>RegExp 实例属性</h2><p>RegExp 的每个实例都有以下属性，通过这些属性可以取得有关模式的各种信息。</p><ul><li>global ：布尔值，表示是否设置了 g 标志。</li><li>ignoreCase ：布尔值，表示是否设置了 i 标志。</li><li>multiline ： 布尔值，表示是否设置了 m 标志。</li><li>lastIndex ：整数，表示开始搜索下一个匹配项的字符位置，从0算起。</li><li>source ： 正则表达式的字符串表示，<strong>按照字面量的形式而非传入构造函数中的字符串模式返回</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\[at\\]"</span>,<span class="string">"g"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pattern.global); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.ignoreCase); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.multiline); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex); <span class="comment">// 0 </span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.source); <span class="comment">// "\[at\]at"</span></span><br></pre></td></tr></table></figure><p>通过这些属性来获得一个正则表达式的各方面信息，其实这在实际应用中没有多大的用处，因为这些信息基本都包含在了模式声明中，所以仅做了解就好。</p><h2 id="RegExp-实例方法"><a href="#RegExp-实例方法" class="headerlink" title="RegExp 实例方法"></a>RegExp 实例方法</h2><p>RegExp 实例一共有两个主要的方法 exec() 方法和 test() 方法，下面我们分别看一下它们的用法。</p><h3 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec() 方法"></a>exec() 方法</h3><p>exec() 方法是专门为捕获组设计的。该方法接受一个参数，就是需要应用模式的字符串，然后返回包含第一个匹配项信息的数组，如果没有匹配项则返回 null。返回的数组虽然是 Arrey 的实例，但包含了两个额外的属性：index 和 input。index表示匹配项在字符串中的位置，而 input 则表示应用正则表达式的字符串。在数组中，第一项是与整个模式匹配的字符串，其他是与模式中匹配的字符串(如果模式中没有捕获组，则数组仅包含第一项)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"mom and dad and baby"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/mom( and dad( and baby)?)?/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.input); <span class="comment">// "mom and dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// "mom and dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">1</span>]); <span class="comment">// " dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">2</span>]); <span class="comment">// " and baby"</span></span><br></pre></td></tr></table></figure></p><p>对于 exec() 方法而言，无论模式中是否设置了全局标志，它每次都只会返回第一个匹配项。对于同一个字符串多次调用 exec() 方法，在不设置全局标志的情况下，将始终返回第一个匹配项的信息，在设置了全局标志的情况下，每次调用 exec() 方法否会在字符串中继续查找新匹配项。 </p><h3 id="test-方法"><a href="#test-方法" class="headerlink" title="test() 方法"></a>test() 方法</h3><p>test() 方法适用于只想知道目标字符串与某个模式是否匹配，但不需要知道文本内容的情况。该方法接受一个字符串参数，在模式与该参数匹配时返回 true ，不匹配时返回 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"000-00-0000"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern =  <span class="regexp">/\d&#123;3&#125;-\d&#123;2&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(text)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>RegExp 实例继承的 toLocalString() 和 toString() 方法都会返回正则表达式的字面量，而 valueOf 则返回正则表达式本身。</p><h2 id="RegExp-构造函数属性"><a href="#RegExp-构造函数属性" class="headerlink" title="RegExp 构造函数属性"></a>RegExp 构造函数属性</h2><p>RegExp 构造函数包含一些属性(这些属性在其他语言中被看为静态属性)。这些属性适用于作用域中的所有正则表达式，并且基于所执行的最近一次正则表达式操作而变化。这些属性分别有一个长属性名和一个短属性名( Opera 是例外，它不支持短属性名)。</p><table><thead><tr><th>长属性名</th><th>短属性名</th><th>说明</th></tr></thead><tbody><tr><td>input</td><td>$_</td><td>最近一次要匹配的字符串。 Opera未实现此属性</td></tr><tr><td>lastMatch</td><td>$&amp;</td><td>最近一次的匹配项。 Opera未实现此属性</td></tr><tr><td>lastParen</td><td>$+</td><td>最近一次的捕获组。 Opera未实现此属性</td></tr><tr><td>leftContext</td><td>$`</td><td>input 字符串中 lastMatch 之前的字符串</td></tr><tr><td>rightContext</td><td>$’</td><td>input 字符串中 lastMatch 之后的字符串</td></tr><tr><td>multitline</td><td>$*</td><td>布尔值，表示是否所有的表达式都使用多行模式。 IE和Opera未实现此属性</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"this has been a short summer"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(.)hort/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pattern.test(text))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.input); <span class="comment">// this has been a short summer</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.leftContext); <span class="comment">// this has been a</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.rightContext); <span class="comment">// summer</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.lastMatch); <span class="comment">// short</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.lastPaern); <span class="comment">// s </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.multitline); <span class="comment">// false </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和前面所说的一样，例子中使用的长属性名可以使用短属性名来代替。只不过，由于这些短属性名大都不是有效的 ECMAScript 字符，所以必须通过方括号语法来访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$*"</span>]); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>除了上面介绍到的几个属性外，还有多大9个用于存储捕获组的构造函数属性。访问这些属性的语法是RegExp.$1到RegExp.$9，分别用于存储第一到第九个匹配的捕获组。在调用 exec() 方法和 test() 方法时，这些属性会被自动填充。</p><h2 id="模式的局限性"><a href="#模式的局限性" class="headerlink" title="模式的局限性"></a>模式的局限性</h2><p>尽管 ECMAScript 中的正则表达式还是比较完备的，但还是缺少某些语言(特别是 Perl )所支持的高级正则表达式特性。下面列出了 ECMAScript 正则表达式不支持的特性。</p><ul><li>匹配字符串开始和结尾的 \A 和 \Z 锚，但支持以插入符号<code>^</code>和美元符号<code>$</code>来匹配字符串的开始和结尾。</li><li>先后查找，但支持向前查找</li><li>原子组</li><li>Unicode 支持(单个字符除外如 \uFFFF )</li><li>命名的捕获组，但支持编号的捕获组</li><li>单行和无间隔匹配模式</li><li>条件匹配</li><li>正则表达式注释</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>关于 RegExp 类型的总结就到这里，其实一些复杂的属性在平常很少会用到，但这些东西还是要做一个了解，避免需要用到的时候没有头绪。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu10-1.jpg&quot; alt=&quot;JavaScript深入理解之RegExp类型详解文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;我们在验证输入或查找字符时经常需要用到正则表达式，正则表达式的强大毋庸置疑。在 JavaScript 中也提供了 RegExp 类型来作为相应的支持。下面是我对 RegExp 类型的看法和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="RegExp" scheme="http://cavszhouyou.top/tags/RegExp/"/>
    
      <category term="正则表达式" scheme="http://cavszhouyou.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之Date类型详解</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8BDate%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之Date类型详解.html</id>
    <published>2018-03-18T12:46:05.000Z</published>
    <updated>2018-04-23T09:10:43.834Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu9-1.jpg" alt="JavaScript深入理解之Date类型详解 文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Date 类型平常用得不是很多，但一用到，对它的使用就感到不是很熟悉，每次都是强行百度一波，可以看出自己的基础不是很牢。所以最近决定静下心来好好回顾一下以前自己忽视的基础，下面是我对 Date 类型的一些总结和看法。</p><a id="more"></a><h2 id="UTC-和-GMT-及-北京时间的关系"><a href="#UTC-和-GMT-及-北京时间的关系" class="headerlink" title="UTC 和 GMT 及 北京时间的关系"></a>UTC 和 GMT 及 北京时间的关系</h2><p>在介绍Date类型前，我们先来了解一下 UTC 和 GMT 及 北京时间的关系。</p><ul><li><p>GMT 即「格林威治标准时间」(Greenwich Mean Time，简称G.M.T.)，指位于英国伦敦郊区的皇家格林威治天文台的标准时间，因为本初子午线被定义为通过那里的经线。然而由于地球的不规则自转，导致GMT时间有误差，因此目前已不被当作标准时间使用。</p></li><li><p>UTC 是最主要的世界时间标准，是经过平均太阳时(以格林威治时间GMT为准)、地轴运动修正后的新时标以及以「秒」为单位的国际原子时所综合精算而成的时间。 UTC 比 GMT 来得更加精准。其误差值必须保持在0.9秒以内，若大于0.9秒则由位于巴黎的国际地球自转事务中央局发布闰秒，使 UTC 与地球自转周期一致。不过日常使用中，GMT 与 UTC 的功能与精确度是没有差别的，我们在文章中提到的 GMT 时间与 UTC 时间是一样的。</p></li><li><p>GMT = UTC    </p></li><li><p>因为时区的问题北京时间和UTC时间有这样的关系 <code>UTC + 8 = 北京时间</code> ， 这个公式有助于我们后面理解 Date 类型为什么在不同方法下的转换结果不同。</p></li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>ECMAScript 中的 Date 类型是在早期 Java 中的 java.util.Date 类基础上构建的。为此 Date 类型使用自 UTC ( Coordinated Universal Time, 国际协调时间)1970年1月1日午夜(零时)开始经过的毫秒数来保存日期。在使用这种数据存储格式的条件下，Date()类型保存的日期能够精确到1970年1月1日之前或之后的100 000 000年。</p></blockquote><p>我们可以这样理解，我们创建的一个 Date 对象中保存有一个 value，这个 value 的大小是从 UTC 时间1970年1月1日午夜至指定时间经过的毫秒数的大小。</p><p>这个值其实就是我们经常使用到的时间戳，需要注意的是js内的时间戳指的是指定时间到1970年1月1日00:00:00 UTC对应的毫秒数，和unix时间戳不是一个概念，后者表示秒数，差了1000倍。因此我们在转换时经常会遇到精度丢失的问题(暂时采用这种说法)。</p><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><p>要创建一个日期对象，使用 new 操作符和 Date 构造函数即可，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 获得当前时间</span></span><br></pre></td></tr></table></figure><p>在调用 Date 构造函数而不传递参数的情况下，新创建的对象自动获取当前日期和时间。如果想要根据指定的日期和时间创建对象，必须传入该日期的毫秒数(即从 UTC 时间1970年1月1日午夜至指定时间经过的毫秒数。)听起来是不是有点头大，难道我们还要自己计算好毫秒数才能创建相应的时间对象吗？这样岂不是太麻烦了？</p><h2 id="Date-parse-和-Date-UTC"><a href="#Date-parse-和-Date-UTC" class="headerlink" title="Date.parse() 和 Date.UTC()"></a>Date.parse() 和 Date.UTC()</h2><p>针对上面的问题ECMAScript提供了两个方法 Date.parse() 和 Date.UTC() ,以此来简化这一计算过程。它们会根据我们传入的参数来自动计算出毫秒数的大小。下面我们来分别介绍一下这两个方法。</p><h3 id="Date-parse"><a href="#Date-parse" class="headerlink" title="Date.parse()"></a>Date.parse()</h3><p>Date.parse()方法接受一个表示日期的字符串参数，然后尝试根据这个字符串返回相应的毫秒数，如果传入的字符串不能表示将日期则返回NaN。因为ECMA-262没有定义这个方法应该支持那种日期格式，因此这个方法的行为通常是因地区而异。例如将地区设置为美国的浏览器通常都接受下列日期格式:</p><ul><li>“月/日/年”，如6/13/2004;</li><li>“英文月名日，年”，如January12，2004;</li><li>“英文星期几 英文月名 日 年 时：分：秒 时区”，如Tue May 25 2004 00:00:00 GMT-0700。</li><li>ISO 8601扩展格式YYYY-MM-DDTHH:mm:ss.sssZ（例如2004-05-25T00:00:00）。只有兼容ECMAScript 5的实现支持这种格式。</li></ul><p>例如，要为2004年5月25日创建一个日期对象，可以使用下面的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">"May 25, 2004"</span>));</span><br></pre></td></tr></table></figure><h3 id="Date-UTC"><a href="#Date-UTC" class="headerlink" title="Date.UTC()"></a>Date.UTC()</h3><p>Date.UTC()方法同样也返回表示日期的毫秒数。但它需要的参数不是字符串，它的参数分别是年份，基于0的月份(0到11)，日(1到31)，小时(0到23)，分钟，秒以及毫秒数。这些参数里边只有前两个参数是必需的，如果没有提供日值，则默认日值为1，其余参数未指定则默认为0。如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GMT时间2000年1月1日午夜零时： </span></span><br><span class="line"><span class="keyword">var</span> y2k = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2000</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//GMT时间2005年5月5日下午5:55:55： </span></span><br><span class="line"><span class="keyword">var</span> allFives = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2005</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>));</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>UTC 日期指的是在没有时区偏差的情况下(将日期转换为GMT时间)的日期值。 Date.parse() 方法是基于本地时区建立的，而 Date.UTC() 方法是基于无时区偏差建立的。所以如果我们对两个方法传入相同的时间，我们会发现 Date.parse() 方法得到的毫秒数相对于 Date.UTC() 方法得到的毫秒数会多八个小时的毫秒数(这里的本地时区指的是北京时间)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设我们传入相同的时间2018年3月18日</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.parse(<span class="string">"3/18/2018"</span>); <span class="comment">// 1521302400000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.UTC(<span class="number">2018</span>,<span class="number">2</span>,<span class="number">18</span>); <span class="comment">//1521331200000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1521302400000 - 1521331200000 = 28800000 = 8 x 60 x 60 x 1000</span></span><br></pre></td></tr></table></figure></li><li><p>如果我们输入的日期值超过了正常的范围，在不同的浏览器中的会有不同的处理方式。例如在解析<code>&quot;January 32，2007&quot;</code>时，有的浏览器会将其解析为<code>&quot;February 1，2007&quot;</code>。而Opera浏览器则倾向于插入当前月份的当前日期值，返回<code>&quot;January 当前日期值，2007&quot;</code>。</p></li><li><p>其实我们没有必要在创建一个 Date 对象的时候显式调用 Date.parse() 和 Date.UTC() 方法，因为将相应的参数传入构造函数后，它会根据参数的类型在后台自动调用Date.parse() 或 Date.UTC() 方法，这样得到日期和时间都是基于本地时区的，就算你存入的参数类型是 Date.UTC() 方法所需的参数类型，最后得到的结果还是基于本地时区的结果。</p></li></ul><h2 id="Date-now"><a href="#Date-now" class="headerlink" title="Date.now()"></a>Date.now()</h2><p>ES5添加了Date.now()方法，用来返回表示调用这个方法时的日期和时间的毫秒数。这个方法可以用来分析函数的运行时间，如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取得开始时间</span></span><br><span class="line"><span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结束时间</span></span><br><span class="line"><span class="keyword">var</span> end = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到函数运行时间</span></span><br><span class="line"><span class="keyword">var</span> runtime = start - end;</span><br></pre></td></tr></table></figure><p>在不支持它的浏览器中，我们可以通过<code>+</code>操作符获取Date对象的时间戳，也可以达到同样的目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取得开始时间</span></span><br><span class="line"><span class="keyword">var</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结束时间</span></span><br><span class="line"><span class="keyword">var</span> end = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到函数运行时间</span></span><br><span class="line"><span class="keyword">var</span> runtime = start - end;</span><br></pre></td></tr></table></figure><h2 id="继承的方法"><a href="#继承的方法" class="headerlink" title="继承的方法"></a>继承的方法</h2><p>和其他引用类型一样，Date 类型也重写了 toLocaleString() 、toString() 和 valueOf() 方法，但这些方法的返回值与其他类型中的方法不同。</p><ul><li><p>Date 类型的 toLocalString() 方法会按照浏览器设置的时区相适应的格式返回日期和时间。这意味着时间格式中会包含AM和PM，但不会包含时区信息，<strong>具体的格式会因浏览器而异</strong>。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.toLocaleString()); <span class="comment">// 2018/3/20 上午10:33:32</span></span><br></pre></td></tr></table></figure></li><li><p>Date 类型的 toString() 方法会返回带有时区信息的日期和时间，其中时间一般以军用时间(范围0到23)表示。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.toString()); <span class="comment">// Tue Mar 20 2018 10:33:32 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>Date 类型的 valueOf() 方法会返回日期的毫秒表示，也就是时间戳。因此我们可以使用比较操作符来比较日期。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2018</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> data2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2018</span>,<span class="number">3</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data1 &lt; data2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在使用比较操作符，会隐式地调用 Date 对象的 valueOf() 方法，然后根据得到的毫秒数来进行比较。</p></li></ul><p>其实在实际应用中，使用 toLocaleString() 和 toString() 来显示日期时间是没有什么价值的，因为它们的返回的日期格式在不同的浏览器里大相径庭，无法得到一致化的显示结果，而且得到的格式对用户的交互效果也不是很友好。</p><h2 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h2><p>Date类型还有一些专门用来将日期转化为字符串的方法，不过与 toLocaleString() 和 toString() 的缺点一样，在平常的使用中没有多大价值，所以仅做一下了解就好。</p><ul><li>toDateString()——以特定于实现的格式显示星期几、月、日和年；</li><li>toTimeString()——以特定于实现的格式显示时、分、秒和时区；</li><li>toLocaleDateString()——以特定于地区的格式显示星期几、月、日和年；</li><li>toLocaleTimeString()——以特定于实现的格式显示时、分、秒；</li><li>toUTCString()——以特定于实现的格式完整的UTC日期。</li></ul><h2 id="日期-时间组件方法"><a href="#日期-时间组件方法" class="headerlink" title="日期/时间组件方法"></a>日期/时间组件方法</h2><p>上面我们已经提到了，Date类型本身的字符串格式化方法很鸡肋，在日常使用中用处不大，所以一般我们只有自己编写适用于项目的 format 方法，这时我们一般需要用到获取日期中特定部分的方法。方法有点多，如下:</p><ul><li>getTime()<br>返回表示日期的毫秒数；与valueOf()方法返回的值相同</li><li>setTime(毫秒)<br>以毫秒数设置日期，会改变整个日期</li><li>getFullYear()<br>取得4位数的年份（如2007而非仅07）</li><li>getUTCFullYear()<br>返回UTC日期的4位数年份</li><li>setFullYear(年)<br>设置日期的年份。传入的年份值必须是4位数字（如2007而非仅07）</li><li>setUTCFullYear(年)<br>设置UTC日期的年份。传入的年份值必须是4位数字（如2007而非仅07）</li><li>getMonth()<br>返回日期中的月份，其中0表示一月，11表示十二月</li><li>getUTCMonth()<br>返回UTC日期中的月份，其中0表示一月，11表示十二月</li><li>setMonth(月)<br>设置日期的月份。传入的月份值必须大于0，超过11则增加年份</li><li>setUTCMonth(月)<br>设置UTC日期的月份。传入的月份值必须大于0，超过11则增加年份</li><li>getDate()<br>返回日期月份中的天数（1到31）</li><li>getUTCDate()<br>返回UTC日期月份中的天数（1到31）</li><li>setDate(日)<br>设置日期月份中的天数。如果传入的值超过了该月中应有的天数，则增加月份</li><li>setUTCDate(日)<br>设置UTC日期月份中的天数。如果传入的值超过了该月中应有的天数，则增加月份</li><li>getDay()<br>返回日期中星期的星期几（其中0表示星期日，6表示星期六）</li><li>getUTCDay()<br>返回UTC日期中星期的星期几（其中0表示星期日，6表示星期六）</li><li>getHours()<br>返回日期中的小时数（0到23）</li><li>getUTCHours()<br>返回UTC日期中的小时数（0到23）</li><li>setHours(时)<br>设置日期中的小时数。传入的值超过了23则增加月份中的天数</li><li>setUTCHours(时)<br>设置UTC日期中的小时数。传入的值超过了23则增加月份中的天数</li><li>getMinutes()<br>返回日期中的分钟数（0到59）</li><li>getUTCMinutes()<br>返回UTC日期中的分钟数（0到59）</li><li>setMinutes(分)<br>设置日期中的分钟数。传入的值超过59则增加小时数</li><li>setUTCMinutes(分)<br>设置UTC日期中的分钟数。传入的值超过59则增加小时数</li><li>getSeconds()<br>返回日期中的秒数（0到59）</li><li>getUTCSeconds()<br>返回UTC日期中的秒数（0到59）</li><li>setSeconds(秒)<br>设置日期中的秒数。传入的值超过了59会增加分钟数</li><li>setUTCSeconds(秒)<br>设置UTC日期中的秒数。传入的值超过了59会增加分钟数</li><li>getMilliseconds()<br>返回日期中的毫秒数</li><li>getUTCMilliseconds()<br>返回UTC日期中的毫秒数</li><li>setMilliseconds(毫秒)<br>设置日期中的毫秒数</li><li>setUTCMilliseconds(毫秒)<br>设置UTC日期中的毫秒数</li><li>getTimezoneOffset()<br>返回本地时间与 UTC 时间相差的分钟数。例如，美国东部标准时间返回300。在某地进入夏令时的情况下，这个值会有所变化</li></ul><h2 id="时间戳的获取"><a href="#时间戳的获取" class="headerlink" title="时间戳的获取"></a>时间戳的获取</h2><p>在平时我们需要用到最多的地方还是时间戳的获取，上面我们也提到了不少可以的得到时间戳的方法，下面做一个归纳。</p><ul><li>使用 Date.now() 获取当前时间的毫秒数，只适用于当前时间。</li><li>使用 Date.parse() 获取指定时间的毫秒数，只适用于指定时间。</li><li>使用 Date.UTC() 获取指定时间的毫秒数，只适用于指定时间。</li><li>使用操作符 <code>+</code> 获取Date对象表示日期的毫秒数，都适用取决于Date对象。</li><li>使用 valueOf() 获取Date对象表示日期的毫秒数，都适用取决于Date对象。</li><li>使用 getTime() 获取Date对象表示日期的毫秒数，都适用取决于Date对象。</li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>花了一些时间将 Date 类型的基础知识，稍微总结了一下。这一块还有很多内容，以后有时间还会对 Date 对象的格式化这个一块进行补充。通过总结发现了很多自己以前习惯性忽略的一些东西。还是希望通过这样的方式，把 JavaScript 这一块的基础打牢一点。不着急慢慢来 :)</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu9-1.jpg&quot; alt=&quot;JavaScript深入理解之Date类型详解 文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;Date 类型平常用得不是很多，但一用到，对它的使用就感到不是很熟悉，每次都是强行百度一波，可以看出自己的基础不是很牢。所以最近决定静下心来好好回顾一下以前自己忽视的基础，下面是我对 Date 类型的一些总结和看法。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="Date" scheme="http://cavszhouyou.top/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之Array类型详解</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8BArray%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之Array详解.html</id>
    <published>2018-03-16T11:40:12.000Z</published>
    <updated>2018-04-23T09:10:19.778Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu8-1.jpg" alt="JavaScript深入理解之Array详解 配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>Array类型可以说是ECMAScript中最常用的一种类型了。和其他语言中的Array类型相比，ECMAScript中的Array类型可以说是厉害多了，它能比它们多做很多事情，当然也同样存在更多使用上的隐患。以前也遇到了很多关于Array使用上的问题，一直没有时间整理总结，下面总结一下我对Array的理解。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>Array 对象用于在单个的变量中存储多个值。</p></blockquote><p><strong>与其他数组的不同:</strong></p><ul><li><p>ECMAScript 数组中的每一项都可以保存不同类型的数据，也就是说你可以第一个位置保存一个数值，第二个位置保存一个字符串，第三个位置保存一个Boolean值。只要你有需要，这样的数组都是合法的。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span> , <span class="string">"hello"</span> , <span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li><li><p>数组的长度大小是可变的，也就是说你可以随意的向数组增添数据，如果大小不够时，数组会自动增长以容纳新的数据。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span> , <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">arr.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><p>创建数组的方式一共有两种。</p><ul><li><p>使用Array构造函数</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">//注意这里的new操作符是可省的</span></span><br></pre></td></tr></table></figure></li><li><p>使用数组字面量表示法。数组字面量由一对包含数组项的方括号表示，多个数组项之间用逗号隔开。这种方法不会调用Array的构造函数。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = []; <span class="comment">// 创建一个空数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"white"</span>] <span class="comment">//创建一个包含3项的数组</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h2><p>数组的项数保存在它的length属性中，这个属性不是只读的，也就是说我们可以通过修改这个属性来从数组末尾移除项或添加新的项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"white"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors[<span class="number">2</span>]) <span class="comment">// "white"</span></span><br><span class="line"></span><br><span class="line">colors.length = <span class="number">2</span>; <span class="comment">//通过减小数组的长度来移除末尾项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors[<span class="number">2</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>利用length属性也可以很方便地在数组末尾添加新项，下面是我们平常使用最多的一种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"white"</span>];</span><br><span class="line"></span><br><span class="line">colors[colors.length] = <span class="string">"black"</span>; <span class="comment">// 在数组，末尾添加新元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors[<span class="number">3</span>]); <span class="comment">// "black"</span></span><br></pre></td></tr></table></figure><h2 id="数组检测"><a href="#数组检测" class="headerlink" title="数组检测"></a>数组检测</h2><p>自从ES3做出规定以后，如何判断某个对象是否为数组就成为了一个经典问题。一共有两种方法可以判断。</p><ul><li><p>对于一个网页或者一个全局作用域而言，使用instanceof就可已解决问题。不过如果网页中存在多个框架，就意味着存在多个全局作用域,从而存在两个版本以上的Array的构造函数。如果我们从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中的原生创建的数组分别具有不同的构造函数，这种情况下就无法使用instanceof来判断了。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">    <span class="comment">//对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>针对上面的情况，ES5新增克Array.isArray()方法。这个方法可以最终确定某个值到底是不是数组，而不管它是在哪个全局执行环境中创建的。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line">    <span class="comment">//对数组进行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组转换"><a href="#数组转换" class="headerlink" title="数组转换"></a>数组转换</h2><p>在实际应用中，很多时候我们需要将数组转换为字符串的形式来表示，那么应该如何转换呢？将一个数组转化为字符串形式表示一共有三种方法。</p><ul><li><p>使用toString()方法。调用数组的toString()方法会返回数组的每个值的字符串形式拼接而成的一个以逗号分隔的字符串。实际上，为了创建这个字符串，会调用数组的每一项的toString()方法。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"white"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors.toString()); <span class="comment">// red,blue,white</span></span><br></pre></td></tr></table></figure></li><li><p>使用toLocalString()方法。调用这个方法得到的结果其实和调用toString()方法得到的结果多数情况下是相同的。不同的是,使用该方法创建字符串时，会调用数组的每一项的toLocalString()方法，而不再是toString()方法。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"white"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors.toLocalString()); <span class="comment">// red,blue,white</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用join()方法。在很多情况下，我们希望能够自己定义分隔符，这个时候使用join方法就很方便了。join方法接受一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串。注意如果不传入参数，则默认使用逗号作为分隔符。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"white"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">"||"</span>)); <span class="comment">// red||blue||white</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h2><p>我们知道栈是一种先进后出的数据结构，也就是最新添加的项最后被移除。而且栈中项的插入和移除只发生在一个位置——栈的顶部。ECMAScript为数组专门提供了push()和pop()方法，以此来实现类似栈的行为。</p><p>push()方法可以接收任意数量的参数，并把他们逐个添加到数组末尾，并返回修改后数组的长度。pop()方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">var</span> count = colors.push(<span class="string">"green"</span>); <span class="comment">//入栈，推入一项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["red","blue","green"]</span></span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = colors.pop(); <span class="comment">// 弹栈，弹出最后一项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["red","blue"]</span></span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">// "green"</span></span><br></pre></td></tr></table></figure><h2 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h2><p>栈数据结构的访问规则是先进后出，而队列数据结构的访问规则是先进先出。队列在列表的末端添加项，从列表的前端移除项。由于push()方法已经实现了向数组末端添加项的方法，因此模拟队列只需要一个从数组前端获取项的方法就行了。实现这一操作的数组方法是shift(),它能够移除数据组中的第一个项并返回该项，同时将数组长度减一。结合使用shift()和push()方法，就可以像使用队列一样使用数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">var</span> count = colors.push(<span class="string">"green"</span>); <span class="comment">//入队列，推入一项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["red","blue","green"]</span></span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = colors.shift(); <span class="comment">// 出队列，移除数组第一项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["blue","green"]</span></span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">// "red"</span></span><br></pre></td></tr></table></figure><p>ECMAScript还为数组提供了一个unshift()方法。这个方法的作用刚好和shift()方法相反，它能在数组前端添加任意个项并返回新数组的长度。因此使用unshift()和pop()方法，可以从相反的方向来模拟队列，即在数组的前端添加项，从数组末端移除项。</p><h2 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h2><p>数值中有两种可以直接用来重排序的方法，一种是reverse()方法，另一种是sort()方法。</p><ul><li><p>reverse()方法可以反转数组项的顺序，注意该方法是直接在原始数组上进行操作的。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">numbers.reverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">// [9,8,7,6,5,4,3,2,1]</span></span><br></pre></td></tr></table></figure></li><li><p>sort()方法，在默认情况下会按升序序列排列数组项——即最小的值位于最前面，最大的值排在最后面。不过这个升序的比较，比较的不是数值的大小，为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定该如何排序。即使数组中的每一项都是数值，sort()方法比较的也是字符串。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line">numbers.sort();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">// [0,1,10,15,5]</span></span><br></pre></td></tr></table></figure><p>  从上面的例子中可以看出，虽然数值5小于10，但在进行字符串比较时，”10”则位于”5”的前面，于是数组的顺序就修改了。这种方法显然大多数情况下不会符合我们的需要，那么有什么其他办法吗？其实sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。<br>  比较函数接收两个参数，如果第一个参数应该位于第二个参数则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个之后则返回一个正数。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line">numbers.sort(compare);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">// [15,10,5,1,0]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1,value2</span>)</span>&#123;</span><br><span class="line">    retrun value2 - value1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>ECMAScript为数组操作提供了很多方法，这些方法在我们实际应用中经常会用到，下面我们来一一介绍。</p><h3 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h3><p>conact()方法可以基于当前数组中的所有项和传入参数构建一个新的数组。这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个参数的末尾，最后返回这个新的数组。需要注意的是:</p><ul><li>在没有给concat()方法传递参数的情况下，它只是复制当前数组并返回脚本。</li><li>如果传递给concat()方法的是一个或多个数组，则该方法会将这些数组的每一项都添加到结果数组中。</li><li>如果传递的值不是数组这些值会被简单地添加到数组的末尾。</li><li>原始数组不受影响</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.concat(<span class="string">"yellow"</span>,[<span class="string">"black"</span>,<span class="string">"brown"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// red,green,blue</span></span><br><span class="line"><span class="built_in">console</span>.log(coloers2); <span class="comment">// red,green,blue,yellow,black,brown</span></span><br></pre></td></tr></table></figure><h3 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a>slice()方法</h3><p>slice()方法它能够基于当前数组中的一个或多个项创建一个新数组，简单理解为可以用于截取数组中的一部分。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。需要注意的是：</p><ul><li>在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。</li><li>如果有两个参数，该方法返回起始位置和结束位置之间的项，<strong>但不包括结束位置的项</strong>。</li><li>如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。</li><li>如果结束位置小于初始位置，则返回空数组</li><li>原始数组不受影响</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>,<span class="string">"purple"</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.slice(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> colors3 = colors.slice(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> colors4 = colors.slice(<span class="number">-2</span>,<span class="number">-1</span>); <span class="comment">// 相当于调用slice(3,4)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// green,blue,yellow,purple</span></span><br><span class="line"><span class="built_in">console</span>.log(colors3); <span class="comment">// green,blue,yellow</span></span><br><span class="line"><span class="built_in">console</span>.log(colors4); <span class="comment">// yellow</span></span><br></pre></td></tr></table></figure><h3 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice()方法"></a>splice()方法</h3><p>splice()方法可以说是最强大的数组方法了，它的用法有很多。splice()方法接受三个参数，起始位置，要删除的项数和要插入的任意数量的项，splice()方法始终会返回一个数组，该数组汇中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。使用这种方法的方式有如下三种:</p><ul><li><p>删除: 可以删除任意数量的项，只需要指定两个参数：起始位置和要删除的项数。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>];</span><br><span class="line"><span class="keyword">var</span> removed = colors.splice(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">//删除数组中的前两项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// blue,yellow</span></span><br><span class="line"><span class="built_in">console</span>.log(removed) <span class="comment">// red,green</span></span><br></pre></td></tr></table></figure></li><li><p>插入: 可以向指定位置插入任意数量的项，需要提供三个参数，起始位置，0(要删除的项数)和要插入的项。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>];</span><br><span class="line"><span class="keyword">var</span> removed = colors.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">"white"</span>,<span class="string">"black"</span>); <span class="comment">//从位置一开始插入两项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// red,white,black,green,blue,yellow</span></span><br><span class="line"><span class="built_in">console</span>.log(removed) <span class="comment">// 返回的是一个空数组</span></span><br></pre></td></tr></table></figure></li><li><p>替换: 可以向指定位置插入任意数量的项。插入的项数不必和删除的项数相等，需要三个参数，起始位置，要删除的项数和要插入的任意数量的项。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>];</span><br><span class="line"><span class="keyword">var</span> removed = colors.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"white"</span>,<span class="string">"black"</span>); <span class="comment">//删除位置一项，然后插入两项</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// red,white,black,blue,yellow</span></span><br><span class="line"><span class="built_in">console</span>.log(removed); <span class="comment">// green</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h2><p>ES5为数组实例添加了两个位置方法：indexOf()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和表示查找起点位置的索引(可选)。其中，indexOf()方法从数组的开头(位置0)开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找。<br>这两个方法都是用于返回要查找的项在数组中第一次匹配到的位置，或者在没有找到的情况下返回-1。注意在比较第一个参数与数组中的每一项时，会使用全等操作符<code>===</code>，也就是说，要求查找的项必须严格相等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers.indexOf(<span class="number">4</span>)); <span class="comment">// 3 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">4</span>)); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nmbers.indexOf(<span class="number">4</span>,<span class="number">4</span>)); <span class="comment">// 从位置4开始向后匹配</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">4</span>,<span class="number">4</span>)) <span class="comment">// 从位置4开始向前匹配</span></span><br></pre></td></tr></table></figure><h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h2><p>相信我们平时使用中，对数组操作最多的都是数组的遍历迭代。ES5中为数组定义了五个方法。每个方法都接收两个参数，要在数组没每一项上运行的函数和运行该函数的作用域对象——影响this的值(可选)。传入这些方法中的函数会接受三个参数：数组项的值，该项在数组中的位置和数组对象本身。根据使用方法的不同，这个函数执行后的返回值可能也可能不会影响方法的值。下面我们分别介绍这五个迭代方法，注意这些方法都不会修改原始数组包含的值。</p><h3 id="every-方法"><a href="#every-方法" class="headerlink" title="every()方法"></a>every()方法</h3><p>every()方法，该方法对数组中的每一项都运行给定函数，如果该函数对每一项都返回true，则返回true。这种方法适用于判断数组中的项是否都满足某个条件。该方法的返回值为Boolean。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断数组项否都小于10</span></span><br><span class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item , index , array</span>)</span>&#123;</span><br><span class="line">    retrun item &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(everyResult); <span class="comment">// true 证明数组项都小于10</span></span><br></pre></td></tr></table></figure></p><h3 id="some-方法"><a href="#some-方法" class="headerlink" title="some()方法"></a>some()方法</h3><p>some()方法，该方法对数组中的每一项运行给定函数，如果该函数汇中某一项返回true，则返回true。这种方法和every()方法使用很像，不过some()方法用于判断数组中是否含有满足某个条件的项。该方法的返回值为Boolean。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断数组中是否有小于10的项</span></span><br><span class="line"><span class="keyword">var</span> someResult = numbers.some(<span class="function"><span class="keyword">function</span>(<span class="params">item , index , array</span>)</span>&#123;</span><br><span class="line">    retrun item &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(someResult); <span class="comment">// true 证明数组中含有小于10的项</span></span><br></pre></td></tr></table></figure></p><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()方法"></a>filter()方法</h3><p>filter()方法，对数组中的每一项运行给定函数，返回该函数会返回true的项的数组。这种方法适用于数组的过滤，得到数组中满足特定条件的项。该方法会返回一个包含符合条件项的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回数组中大于5的项</span></span><br><span class="line"><span class="keyword">var</span> filterResult = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item , index , array</span>)</span>&#123;</span><br><span class="line">    retrun item &gt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filterResult); <span class="comment">// [6,7,8,9]</span></span><br></pre></td></tr></table></figure><h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h3><p>map()方法，对数组的每一项运行给定函数，返回每次函数调用的结果的数组。这种方法使用在需要对数组中的元素整体进行一些操作的时候情况。该方法会返回一个对数组每项进行操作后的数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组中的每一项的乘2</span></span><br><span class="line"><span class="keyword">var</span> mapResult = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item , index , array</span>)</span>&#123;</span><br><span class="line">    retrun item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mapResult); <span class="comment">// [2,4,6,8,10,12,14,16,18]</span></span><br></pre></td></tr></table></figure></p><h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h3><p>forEach()方法，对数组中的每一项运行给定函数。这种方法本质上与for循环迭代数组一样。这个方法没有返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item , index , array</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h2><p>ES5中新增了两个归并数组的方法: reduce() 和 reduceRight()。这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而reduceRight方法则从数组的最后一项开始，向前遍历到第一项。<br>这两个方法都接收两个参数：一个在每一项上调用的函数和作为归并基础的特殊值(可选)。传入reduce()和reduceRight()的函数接收4个参数：前一个值、当前值、项的索引和数组对象这个函数返回的任何值都会作为第一个参数自动传给下一项，也就是说第一个参数均为上一次迭代返回的结果。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项。第二个参数就是数组的第二项。使用reduce() 和 reduceRight()方法可以执行求数组中所有值之和的操作。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = values.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, cur, index, arrray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sumRight = values.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">pre, cur, index, arrray</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumRight); <span class="comment">//15</span></span><br></pre></td></tr></table></figure></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>不总结不知道，一种总结才发现Array涉及到的知识点和用法真的太多了。以前只会使用一些简单的循环来判断，没有发现其实ECMAScript已经为我们提供了很多方便的方法。这样总结了一下，感觉对Array对象的认识更深了一些，收获挺大的。希望我的学习总结可以给你带来帮助。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu8-1.jpg&quot; alt=&quot;JavaScript深入理解之Array详解 配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;Array类型可以说是ECMAScript中最常用的一种类型了。和其他语言中的Array类型相比，ECMAScript中的Array类型可以说是厉害多了，它能比它们多做很多事情，当然也同样存在更多使用上的隐患。以前也遇到了很多关于Array使用上的问题，一直没有时间整理总结，下面总结一下我对Array的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="Array" scheme="http://cavszhouyou.top/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入理解之undefined与null</title>
    <link href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8Bundefined%E4%B8%8Enull.html"/>
    <id>http://cavszhouyou.top/JavaScript深入理解之undefined与null.html</id>
    <published>2018-03-10T02:59:26.000Z</published>
    <updated>2018-04-23T09:11:08.773Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu7-1.jpg" alt="配图7-1"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>JavaScript中有两个特殊的值，undefined与null。平常在写项目时，遇到需要判断一个值是否为空的时候，我总会想到undefined与null。既然都是代表空值(以前我就是这么认为的)，那么它们有没有区别呢？反正我是一直傻傻分不清楚，看了又忘了。最近查阅了一些资料，才发现自己以前真的是误解它们了，知错就改，下面总结一下它们的用法和区别。</p><a id="more"></a><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>在介绍undefined与null之前，我们先来了解一下ECMAScript中的数据类型。在ECMAScript中有五种简单数据类型(也称为基本数据类型): Undefined、Null、Boolean、Number 和 String 。还有一种复杂数据类型——Object。</p><p>没错，首字母大写的Undefined与Null其实都属于ECMAScript中的基本数据类型。这两个数据类型是五种数据类型中最特殊的两个类型，因为它们都只有唯一的一个值，分别是undefined与null，就是我们今天要介绍的两个主角。</p><h2 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>上面我们说过了，Undefined类型只有一个值，就是特殊的undefined，在两种情况下我们会得到undefined：</p><ol><li><p>声明了一个变量，但未对其初始化时，这个变量的值就是undefined。</p><pre><code class="js"><span class="keyword">var</span> data;<span class="built_in">console</span>.log(data === <span class="literal">undefined</span>); <span class="comment">//true</span></code></pre><p>那么我么是否可以显式地把一个变量初始化为undefined呢，答案是可以的。</p><pre><code class="js"><span class="keyword">var</span> data = <span class="literal">undefined</span>;<span class="built_in">console</span>.log(data === <span class="literal">undefined</span>); <span class="comment">//true</span><span class="keyword">var</span> value = <span class="number">1</span>;<span class="built_in">console</span>.log(data); <span class="comment">//1</span>value = <span class="literal">undefined</span>;<span class="built_in">console</span>.log(data === <span class="literal">undefined</span>); <span class="comment">// true</span></code></pre><p>一般而言，我们不存在需要显式地把一个变量设置为undefined值的情况，因为对于未经初始化的值默认就会取得undefined值，而已经初始化的值再将其赋值为undefined来表示空值是没有意义且不可取的。况且字面值undefined的主要目的以用于比较，来区分空对象指针(后面我们会介绍到这指的就是null)与未经初始化的变量的情况。</p></li><li><p>对未定义的变量执行typeof操作符也会返回undefined</p><pre><code class="js"><span class="comment">//data变量未定义</span><span class="keyword">var</span> value;<span class="built_in">console</span>.log(<span class="keyword">typeof</span> data); <span class="comment">// "undefined"</span><span class="built_in">console</span>.log(<span class="keyword">typeof</span> value); <span class="comment">// "undefined"</span></code></pre><p>这里我们没有使用<code>===</code>来判断，因为对于尚未声明过的变量，我们只能执行一项操作，即使用typeof操作符检测其数据类型，使用其他的操作都会报错。</p><pre><code class="js"><span class="comment">//data变量未定义</span><span class="built_in">console</span>.log(data === <span class="literal">undefined</span>); <span class="comment">//报错</span></code></pre><p>结果表明对未初始化和未声明的变量执行typeof操作符都返回了undefined值，这个结果有其逻辑上的合理性。因为虽然这两种变量从技术角度看有本质区别，但实际上无论对哪种变量也不可能执行真正的操作。</p></li></ol><p>还有其他几种情况也会返回undefined，比如一个函数如果没有使用return语句指定返回值，就会返回一个undefined值，或者调用函数时没有传参数值，参数同样也会被初始化为undefined值。这些都是属于上面两种情况在代码中的体现，这里就不单独解释了。 </p><h3 id="全局属性-window-undefined"><a href="#全局属性-window-undefined" class="headerlink" title="全局属性 window.undefined"></a>全局属性 window.undefined</h3><p>从上面的例子我们可以看出，无论我们是否初始化过变量，都可以给变量赋值为undefined。其实这里用于赋值的undefined不是一个值，它是一个属性名，undefined是全局对象的一个属性，也就是说，它是全局作用域的一个变量，即<code>window.undefined</code>，而<code>window.undefined</code>这个属性的值才是前面所说的原始值undefined。<code>data = undefined;</code>这就相当于把一个变量<code>window.undefined</code>的值赋值给另一个变量<code>data</code>，这个值就是原始值undefined。其实在JavaScript代码中,我们看到的undefined大多数情况指的都是<code>window.undefined</code>(本篇文章中多数情况下也是，原始值undefined除外)，原始值undefined多数情况下只存在于文档或规范中,不存在于JavaScript代码中(具体可以理解为代码中参与判断、比较或赋值的都是<code>window.undefined</code>，而在控制台中输出，或函数中返回的则是原始值undefined)。</p><pre><code class="js"><span class="built_in">console</span>.log(<span class="built_in">window</span>.undefined); <span class="comment">//原始值undefined</span></code></pre><p>注意，在ES3之前其实是没有原始值undefined这个值的，第三版引入这个值，其实是为了正式区分空对象指针(后面我们会介绍到这指的就是null)与未经初始化的变量。在ES3中,<code>window.undefined</code>就是一个普通的属性，我们完全可以把它的值改为任何真值。但从ES5之后,<code>window.undefined</code>成了一个不可写,不可配置的数据属性,它的值永远是undefined。</p><h3 id="局部属性-undefined"><a href="#局部属性-undefined" class="headerlink" title="局部属性 undefined"></a>局部属性 undefined</h3><p>大家可能注意到了，上面我提到的是在大多数情况下undefined指的都是<code>window.undefined</code>，那还有什么其他情况吗？其实在ECMAScript中，undefined不是一个保留字，这意味着什么呢？也就是说我们可以将undefined作为一个局部变量来使用，就像局部作用域中任何其他普通变量一样，没有任何特殊性，我们可以对其赋予任何类型的值。</p><pre><code class="js">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{    <span class="keyword">var</span> <span class="literal">undefined</span> = <span class="string">'not is undefined'</span>;    <span class="built_in">console</span>.log(<span class="literal">undefined</span>); <span class="comment">//"not is undefined"</span>    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>) <span class="comment">// "string"</span>})()</code></pre><p>我们可以看到undefined的值和类型都已经改变，这样的做法是非常不友好的，这样会使我们的代码难以维护和排错。</p><h3 id="undefined-判断"><a href="#undefined-判断" class="headerlink" title="undefined 判断"></a>undefined 判断</h3><p>如何判断一个变量是否为undefined，这里有两种方法。</p><ol><li><p>使用严格相等符<code>===</code>或不相等操作符<code>!==</code>来决定一个变量是否拥有值，这里不使用标准相等操作符<code>==</code>,是因为标准相等符还会会检查变量是不是为null，但是严格相等操作符不会检查。null不等同于undefined，这点我们会在后面讲到。</p></li><li><p>使用typeof操作符，这种方式我们在上面已经使用过了，对未定义的变量检测时只能使用这种方式，要不然会出现报错。</p></li></ol><h3 id="void-0"><a href="#void-0" class="headerlink" title="void 0"></a>void 0</h3><p>上面我们提到过了，undefined作为局部变量使用是可以被重写的，那么如果我们使用下面这种判断方式，是有风险的。</p><pre><code class="js"><span class="keyword">if</span>(data === <span class="literal">undefined</span>){    <span class="comment">//do something</span>}</code></pre><p>那么我们怎样做才能确保万无一失呢?让我们先来了解一下void运算符,官方文档是这样解释的:</p><blockquote><p>The void operator evaluates the given expression and then returns undefined.</p><p>void 运算符 对给定的表达式进行求值，然后返回 undefined</p></blockquote><p>什么意思呢？就是使用void对后面的表达式求值，无论结果是多少，都会返回原始值undefined。因此我们可以用<code>void 0</code>来代替undefined进行判断，因为<code>void 0</code>始终返回的都是原始值undefined。</p><pre><code class="js"><span class="keyword">var</span> data;<span class="built_in">console</span>.log(data === <span class="keyword">void</span> <span class="number">0</span>); <span class="comment">//true</span></code></pre><h2 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>Null类型是第二个只有一个值的数据类型，这个特殊的值就是null。值 null 是一个字面量，它不像undefined 是全局对象的一个属性。从逻辑角度来看，null值表示一个空对象指针，指示变量未指向任何对象。把 null 作为尚未创建的对象，也许更好理解。在 APIs 中，null 常在返回类型是对象，但没关联值的地方使用，就像下面一个例子。</p><pre><code class="js"><span class="comment">//document.getElementById() 可以返回对拥有指定 ID 的第一个对象的引用</span><span class="keyword">var</span> $container = <span class="built_in">document</span>.getElementById(<span class="string">"container"</span>); <span class="comment">// 注意:container是不存在的</span><span class="built_in">console</span>.log($container); <span class="comment">// null</span></code></pre><h3 id="typeof-null"><a href="#typeof-null" class="headerlink" title="typeof null"></a>typeof null</h3><p>当我们使用typeof操作符检测null值，我们理所应当地认为应该返”Null”类型呀，但是事实返回的类型却是”object”。</p><pre><code class="js"><span class="keyword">var</span> data = <span class="literal">null</span>;<span class="built_in">console</span>.log(<span class="keyword">typeof</span> data); <span class="comment">// "object"</span></code></pre><p>是不是很奇怪？其实我们可以从两方面来理解这个结果</p><ul><li><p>一方面从逻辑角度来看，null值表示一个空对象指针，它代表的其实就是一个空对象，所以使用typeof操作符检测时返回”object”也是可以理解的。</p></li><li><p>另一方面，其实在JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null的类型标签也成为了 0，typeof null就错误的返回了”object”。在ES6中，当时曾经有提案为历史平凡, 将type null的值纠正为null, 但最后提案被拒了,所以还是保持”object”类型。</p></li></ul><h3 id="null-判断"><a href="#null-判断" class="headerlink" title="null 判断"></a>null 判断</h3><p>null的判断可以使用严格相等符<code>===</code>或不相等操作符<code>!==</code>判断，不使用标准相等符的原因是因为undefined会影响判断结果。和undefined不一样，不能使用typeof来判断一个值是否为null，原因上边已经讲了，使用typeof来检测null会返回”object”,这样的话我们是没办法判断的。</p><pre><code class="js"><span class="keyword">if</span>(data === <span class="literal">null</span>){    <span class="built_in">console</span>.log(<span class="string">"data中没有保存对象引用！"</span>);}</code></pre><h3 id="null-使用"><a href="#null-使用" class="headerlink" title="null 使用"></a>null 使用</h3><p>那么我们在什么情况下需要将变量赋值为null呢？这里我想到的有两种情况。</p><ul><li><p>如果定义的变量在将来用于保存对象，那么最好将该变量初始化为null，而不是其他值。换句话说，只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存null值，这样有助于进一步区分null和undefined。</p></li><li><p>当一个数据不再需要使用时，我们最好通过将其值设置为null来释放其引用，这个做法叫做解除引用。不过解除一个值的引用并不意味着自动回收改值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器在下次运行时将其回收。解除引用还有助于消除有可能出现的循环引用的情况。这一做法适用于大多数全局变量和全局对象的属性，局部变量会在它们离开执行环境时(函数执行完时)自动被解除引用。</p></li></ul><h2 id="undefined-与-null"><a href="#undefined-与-null" class="headerlink" title="undefined 与 null"></a>undefined 与 null</h2><p>实际上undefined值是派生自null值的，因此ECMA-262规定对它们的相等性测试要返回true:</p><pre><code class="js"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></code></pre><p>因为使用的是标准相等符<code>==</code>,这个操作符出于目的会转换其操作数为相同类型后再做比较，如果我们使用严格相等符比较，我们会发现它们是不相等的，因为严格相等符不会进行类型转换，然而undefined与null属于不同的类型，所以不相等。</p><pre><code class="js"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">//false</span></code></pre><p>尽管null和undefined有这样的关系，但上面我们已经提到过了，它们的用途完全不同，我们在平常使用时一定要学会区分。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《JavaScript高级程序设计(第三版)》<br> <a href="http://www.css88.com/archives/6236" target="_blank" rel="noopener">JavaScript中undefined和null的区别</a><br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null" target="_blank" rel="noopener">JavaScript 参考文档 null</a><br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener">JavaScript 参考文档 undefined</a><br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="noopener">JavaScript 参考文档 typeof</a><br> <a href="https://juejin.im/post/591153ceac502e450281e22f" target="_blank" rel="noopener">(void 0) 与 undefined 之间的小九九</a></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>花了一些时间来总结undefined与null的用法和区别，以前一直没有注意，经过这次总结才发现它们所代表的的意义和用法完全不同。可能在平常使用的时候我们不需要考虑这么多问题，但通过重新看一些东西，总结一些东西，通过这样的方式对我来说收获挺大的。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu7-1.jpg&quot; alt=&quot;配图7-1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;JavaScript中有两个特殊的值，undefined与null。平常在写项目时，遇到需要判断一个值是否为空的时候，我总会想到undefined与null。既然都是代表空值(以前我就是这么认为的)，那么它们有没有区别呢？反正我是一直傻傻分不清楚，看了又忘了。最近查阅了一些资料，才发现自己以前真的是误解它们了，知错就改，下面总结一下它们的用法和区别。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="数据类型" scheme="http://cavszhouyou.top/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="undefined" scheme="http://cavszhouyou.top/tags/undefined/"/>
    
  </entry>
  
  <entry>
    <title>那些自律到极致的人，都拥有了开挂的人生</title>
    <link href="http://cavszhouyou.top/%E9%82%A3%E4%BA%9B%E8%87%AA%E5%BE%8B%E5%88%B0%E6%9E%81%E8%87%B4%E7%9A%84%E4%BA%BA%EF%BC%8C%E9%83%BD%E6%8B%A5%E6%9C%89%E4%BA%86%E5%BC%80%E6%8C%82%E7%9A%84%E4%BA%BA%E7%94%9F.html"/>
    <id>http://cavszhouyou.top/那些自律到极致的人，都拥有了开挂的人生.html</id>
    <published>2018-02-22T04:19:48.000Z</published>
    <updated>2018-02-27T06:35:41.567Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu6-1.jpg" alt="配图6-1"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天早上起床看到了这篇文章，感触很多。一直想做一个自律的人，拥有一个自律的、向上的生活。但往往我会在下定决心的第二天、第三天就选择放弃。不是不知道自己想要什么，只是自己更多的选择了随波逐流的安逸。每天都浑浑噩噩的混过一天，让人很难接受。我希望自己的生活有所改变，谨以此文勉励自己，不要在最该奋斗的年纪蹉跎了芳华。</p><a id="more"></a><blockquote><p>我从来不相信什么懒洋洋的自由。我向往的自由是通过勤奋和努力实现的更广阔的人生。我要做一个自由又自律的人，靠势必实现的决心认真地活着。不要做欲望的奴隶，自律可以令我们活得更高级。</p></blockquote><h2 id="一、自律，可以让我们活得更高级"><a href="#一、自律，可以让我们活得更高级" class="headerlink" title="一、自律，可以让我们活得更高级"></a>一、自律，可以让我们活得更高级</h2><p>在新的一年，做到自律，你才能活得更高级。</p><p>前些天，男神钟汉良在一天内发了 4 条微博，晒出了他的早餐、午餐和晚餐。</p><blockquote><p>早餐是一片吐司加蛋，外加两颗蘑菇和圣女果。</p><p>午餐是满满的一盘蔬菜，搭配米兰大教堂形状的意大利面。</p><p>晚餐是自制蔬菜沙拉和燕麦小点心。</p></blockquote><p>清淡又营养的三餐里，藏着他在饮食方面的自律。</p><p>出道 20 多年，钟汉良始终保持着良好的身材和不变的容颜。连见多识广的记者、节目主持人也惊叹于他皮肤的质感，调侃他是不是睡在冰箱里。</p><p>然而，正如泰迪·罗斯福所说：“有了自律能力，没有什么事情是你做不到的。”</p><p>多少人羡慕着别人的身材与样貌，羡慕着别人的成功与精彩。但是当了解到其背后付出的艰辛和近乎残酷的自我管理后，又迅速打起了退堂鼓。在浑浑噩噩、随波逐流的日子里，继续毫无意义地耗费生命。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu6-2.webp" alt="配图6-2"></p><p>知乎上有这样一个问题：你最深刻的错误认识是什么？</p><p>点赞最高的回答是：以为自由就是想做什么就做什么，后来才发现自律者才会有自由。</p><p>当一个人缺乏自律的时候，他做的事情总是在受习惯和及时诱惑的影响，要么就是被他人的思想观念所扰，几乎永远不可能去做内心真正渴望的事。</p><p>你会发现：那些自律到极致的人，都拥有了开挂的人生。</p><h2 id="二、自律，是解决人生问题的首要方案"><a href="#二、自律，是解决人生问题的首要方案" class="headerlink" title="二、自律，是解决人生问题的首要方案"></a>二、自律，是解决人生问题的首要方案</h2><p>谷歌有位高级工程师，叫马特·卡茨。</p><p>他给自己定下了一个 30 天改变的计划，每天做一些之前未能坚持的事。</p><p>比如：每天骑自行车上班，每天步行 10000 步，每天拍一张照片，写一本 5 万字的小说；</p><p>不看电视，不吃糖，不玩推特，拒绝咖啡因…..</p><p>可以说这份计划充满了挑战性，做不到自律的人势必无法完成。</p><p>但马特坚持了下来。</p><p>30 天后，昔日那个肥腻的宅男工程师不见了，他开始发自内心地喜欢上骑自行车去工作，甚至完成了在非洲最高峰乞力马扎罗山的远足。</p><p>心理学家曾经总结过这样的规律：</p><p>自律的前期是兴奋的，中期是痛苦的，后期是享受的。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu6-3.webp" alt="配图6-3"></p><p>但有没有发现，大部分人都在自律的中期——痛苦期徘徊太久，以至于把痛苦当作是自律。</p><p>而当你自律到极致，你会发现：自律能够带给你发自内心的平静和享受。</p><p>因为你知道，自己在一天天地改变，自律已经变成了一种深入骨髓的习惯。</p><p>正如李开复所说：“千万不要放纵自己，给自己找借口。对自己严格一点，时间长了，自律便成为一种习惯，一种生活方式，你的人格和智慧也因此变得更加完美。”</p><p>《少有人走的路》里有这样一句话：</p><p>解决人生问题的首要方案，乃是自律。缺少了这一环，你不可能解决任何麻烦和困难。</p><p>那么，如何才能将自律坚持到极致？</p><h2 id="三、自律，其实并没有那么难"><a href="#三、自律，其实并没有那么难" class="headerlink" title="三、自律，其实并没有那么难"></a>三、自律，其实并没有那么难</h2><p>《毅力——如何培养自律的习惯》这本书中介绍了 3 种方法，更新了我对自律的认知。</p><p>① 设立具体目标，坚持无一例外原则</p><p>我的表妹小蕊，每天嚷嚷着减肥，却从未成功过。</p><p>原因之一，想必就在于没有设定具体的目标。</p><p>无数研究显示：当人们用具体的条文对他们的目标进行定义后，他们成功的可能性就会大大增加。</p><p>大多数制定了明确目标的减肥者（比如：我要在 2 个月内瘦下 10 斤），会比那些目标含糊不清的减肥者减肥效果要好得多。</p><p>目标明确是很重要的，因为明确的目标可以减少思想上的歧义和执行中的变异。</p><p>设定目标之后，需要坚持“无一例外”的原则。</p><p>比方说，目标是在 2 个月内瘦下 10 斤，就坚持在达到减肥目标之前，一点甜点都不吃。</p><p>如果不坚持这项原则，那么每次面对甜点时，都必须决定是否要放纵自己。</p><p>在进行考虑的过程中，将会耗费能量，而这些能量，是维持毅力的关键。</p><p>所以，一旦给自己下了绝对不破例的原则，就不会再把能量花在一遍又一遍、无休止的自我纠结上。</p><p>那些自律到极致的人，都坚持了无一例外原则。</p><blockquote><p>蔡依林从不吃任何有油的食品，甚至有三年的时间内没有吃过米饭；</p><p>杨丽萍为了呈现最完美的舞蹈，几乎没有吃过一顿饱饭；</p><p>刘德华为了保持身材，几十年来都保持着每天一杯酸奶的习惯。</p></blockquote><p>一旦你对某件事情百分之百地投入，那就不可能再有例外。事情已成定局，再也没有商量的余地。</p><p>放纵如山倒，自律如抽丝。</p><p>不要给自己找借口放纵，对自己严格一点，让自律成为一种习惯、原则。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu6-4.webp" alt="配图6-4"></p><p>② 一次只完成一项任务，不要过多消耗毅力</p><p>在改变自己的道路上，许多人会一次性给自己定下太多目标：</p><p>比如，半年内练出马甲线、考过 XX 考试、看 50 本书、看美剧不需要字幕……</p><p>然而，毅力就像人的肌肉一样，会产生疲劳。同时接受太多挑战，通常无法坚持实施下去。</p><p>有一个著名的实验：</p><p>100 个人被随机分为三组。</p><p>A 组中的每个成员都得到了一盘小萝卜，并被要求全部吃光。</p><p>B 组中的每个成员都得到了一盘饼干，并被要求全部吃光。</p><p>C 组中的每个成员可以选择他想要吃的东西，或者什么都不吃。</p><p>在所有的萝卜和饼干都被吃光以后，每个人都被要求解答同一道难题，这道难题实际上根本没有答案。</p><p>B 组和 C 组的人在猜了大约 15 分钟之后放弃，A 组的人只猜了 7 分钟就缴械投降了。</p><p>研究者从这次实验中得出结论：A 组成员已经耗尽了所有的毅力去吃掉那些萝卜，而 B 组和 C 组成员仍有大量的毅力去解那道难题。</p><p>意志力就像手机的剩余电量一样。</p><p>每天早晨你都是充满电的，随着你不断使用你的电力，最后电力耗尽，你也就毫无意志力可言。</p><p>你在一件事上用的意志力太多，不等它恢复就投入下一件事，那么肯定会疲惫不堪。</p><p>注意保存你的意志力，以便在最需要的时候使用。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu6-5.webp" alt="配图6-5"></p><p>③ 把挑战分解成小而易于管理的目标</p><p>太多人幻想着能够一蹴而就，一夜之间达成目标。</p><p>当完成一个任务所需的时间跨度很长、难度很大时，许多人容易半途而废。</p><p>这个时候，需要学会对任务进行分解。</p><p>日本著名的马拉松运动员山田本一，曾在自传中写到自己成功的秘密：</p><blockquote><p>每次比赛前，我都要乘车把比赛的路线仔细看一遍，并把沿途比较醒目的标志画下来。比如，第一标志是银行，第二标志是古怪的大树，第三标志是一座高楼……<br>这样一直画到赛程的结束。比赛开始后，我就奋力向第一个目标冲去，到达第一个目标后，我又以同样的速度向第二个目标冲去。<br>40 多公里的赛程，被我分解成几个小目标，跑起来就轻松多了。开始我把我的目标定在终点线的旗帜上，结果跑到十几公里的时候就疲惫不堪了，因为我被前面那段遥远的路吓到了。</p></blockquote><p>通往目的地的道路是由许多细小的、易于管理的步骤组成的。</p><p>不要总想着毕其功于一役。</p><p>慢一点、稳一点，关键在于把大目标分解成易于消化、循序渐进的小目标。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu6-6.webp" alt="配图6-6"></p><h2 id="四、自律，人生自由的必经之路"><a href="#四、自律，人生自由的必经之路" class="headerlink" title="四、自律，人生自由的必经之路"></a>四、自律，人生自由的必经之路</h2><p>以前总觉得，人生苦短，应及时行乐。</p><p>今朝有酒今朝醉，人不风流枉少年。</p><p>直到后来，我渐渐发现：</p><p>每一个不自律的行为，都会给你带来更大的痛苦。</p><p>长期暴饮暴食、缺乏运动，会让你不得不为自己的健康付出代价；</p><p>熬夜打游戏、刷微博，带来的是第二天的无精打采、浑浑噩噩；</p><p>没有目标、得过且过，会让你迷失方向、日渐空虚。</p><p>设计师山本耀司说：</p><p>我从来不相信什么懒洋洋的自由。我向往的自由是通过勤奋和努力实现的更广阔的人生。</p><p>我要做一个自由又自律的人，靠势必实现的决心认真地活着。</p><p>不要做欲望的奴隶，自律可以令我们活得更高级。</p><p>新的一年，成为自律的人，共勉。</p><h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><p><a href="https://mp.weixin.qq.com/s?srcid=0217Q148n0ebl25FBA6Oou2Q&amp;scene=22&amp;mid=2653195930&amp;sn=4c6b75245c3c8afe581917d42287740e&amp;idx=1&amp;__biz=MzA4MjAxODMzMA%3D%3D&amp;chksm=845c07efb32b8ef917c3fd98b6fb1e88ecef3bda01318e83327b6f7071d27ab392deff5e3566&amp;mpshare=1#rd" target="_blank" rel="noopener">那些自律到极致的人，都拥有了开挂的人生——原文地址</a></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>我从来不相信什么懒洋洋的自由。我向往的自由是通过勤奋和努力实现的更广阔的人生。以此共勉！</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=504835560&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu6-1.jpg&quot; alt=&quot;配图6-1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;今天早上起床看到了这篇文章，感触很多。一直想做一个自律的人，拥有一个自律的、向上的生活。但往往我会在下定决心的第二天、第三天就选择放弃。不是不知道自己想要什么，只是自己更多的选择了随波逐流的安逸。每天都浑浑噩噩的混过一天，让人很难接受。我希望自己的生活有所改变，谨以此文勉励自己，不要在最该奋斗的年纪蹉跎了芳华。&lt;/p&gt;
    
    </summary>
    
      <category term="心得感悟" scheme="http://cavszhouyou.top/categories/%E5%BF%83%E5%BE%97%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="感悟" scheme="http://cavszhouyou.top/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="自律" scheme="http://cavszhouyou.top/tags/%E8%87%AA%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>阿里云ECS基于Linux系统部署javaweb项目</title>
    <link href="http://cavszhouyou.top/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%9F%BA%E4%BA%8ELinux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2javaweb%E9%A1%B9%E7%9B%AE.html"/>
    <id>http://cavszhouyou.top/阿里云ECS基于Linux系统部署javaweb项目.html</id>
    <published>2018-02-11T05:42:03.000Z</published>
    <updated>2018-04-23T09:13:21.824Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-1.jpg" alt="阿里云ECS基于Linux系统部署javaweb项目文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近发现阿里云上推出了一个云翼计划，大学生购买 ECS 实例最低只要 9.9 元/月(不是打广告),真的是太实惠了有没有。算一算我还有两年才毕业，这要是不申请一个来试试都不好意思说自己读过大学…本来对服务器这一块不是很了解，正好借此机会学习学习。纯基础教学，带你一步一步了解如何使用 ECS 部署你的 javaweb 项目。</p><a id="more"></a><h2 id="云服务器-ECS-购买"><a href="#云服务器-ECS-购买" class="headerlink" title="云服务器 ECS 购买"></a>云服务器 ECS 购买</h2><p>因为我们需要部署一个 javaweb 项目，所以我们需要在服务器配置相应的 JAVA 环境。当然我们购买最基本的 ECS 实例然后再安装对应的 mysql，tomcat 这些也是可以的。这里我们有一个一步到位的方法，就是选择已经配置好的镜像。大家可以通过在阿里云的云市场里边搜索找到 JAVA 环境（CentOS7.4 Nginx Tomcat8 JDK）这一个镜像，然后点击购买(这一个镜像是免费的)。下面是地址:</p><ul><li><a href="https://market.aliyun.com/products/53400005/cmjj016483.html?spm=a2c4g.11186623.2.8.6yiYw6" target="_blank" rel="noopener">JAVA 环境（CentOS7.4 Nginx Tomcat8 JDK）镜像</a></li></ul><p>如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-2.png" alt="配图5-2"></p><p>点击立即购买，然后进入 ECS 实例的购买配置页面，如果没有特殊需求，按照默认的配置购买即可，大学生的话可以享受 9.9 元/月的优惠，好像买一年还会送域名的代金券。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-3.png" alt="配图5-3"></p><h2 id="配置安全组"><a href="#配置安全组" class="headerlink" title="配置安全组"></a>配置安全组</h2><p>购买了服务器后我们可以登陆阿里云的管理控制台查看我们购买的 ECS 示例，然后选择安全组，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-6.png" alt="配图5-6"></p><p>配置安全组可以让我们访问以及使用 mysql 远程连接数据库等，点击配置规则，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-7.png" alt="配图5-7"></p><p>点击快速创建规则，先创建第一个规则，一定要和我的一致，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-8.png" alt="配图5-8"></p><p>点击添加安全组规则，创建第二个规则，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-9.png" alt="配图5-9"></p><p>点击添加安全组规则，创建第三个规则，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-10.png" alt="配图5-10"></p><p>我们还要添加一个出方向的规则，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-11.png" alt="配图5-11"></p><p>配置好后我们就可以通过我们的公网 ip 访问我们的服务器了，访问公网 ip 出现如下界面说明我们的安全组配置成功了，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-12.png" alt="配图5-12"></p><h2 id="参数优化"><a href="#参数优化" class="headerlink" title="参数优化"></a>参数优化</h2><p>我们可以通过 Xshell 5 来远程连接到我们的服务器，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-13.png" alt="配图5-13"></p><p>点击确定后需要输入密码，就是在购买实例时设置的密码。</p><p>由于镜像制作是下 1 核 1G 内存配置完成，Nginx、MySQL、JVM 参数还是该配置的参数，如果不是这个配置，我们需要执行下面优化脚本(建议都执行一下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/oneinstack  //必须进入oneinstack目录下执行</span><br><span class="line">./optimize.sh      //请勿bash ./optimize.sh（或者sh）这样执行</span><br></pre></td></tr></table></figure><p>需要注意:</p><ul><li>可能需要等待 1 分钟，请勿中断</li><li>此脚本会根据系统配置，自动优化 Nginx、MySQL、JVM 等参数</li></ul><p>优化成功，如下图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-14.png" alt="配图5-14"></p><h2 id="MySQL-数据库管理"><a href="#MySQL-数据库管理" class="headerlink" title="MySQL 数据库管理"></a>MySQL 数据库管理</h2><p>由于我们需要部署 javaweb 项目，肯定会使用到数据库。直接使用 cmd 界面管理肯定不方便，所以我们需要使用如 Navicat Premium 这样的工具来远程连接数据库进行操作。不过直接远程连接是不行的，因为我们没有开放权限。</p><p>我们先来看一下数据库默认 root 的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/oneinstack</span><br><span class="line">grep dbrootpwd options.conf  //显示数据库root密码</span><br></pre></td></tr></table></figure><p>如下图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-15.png" alt="配图5-15"></p><p>默认密码太复杂了，我们想要重置密码怎么办呢？可以这样做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/oneinstack</span><br><span class="line">./reset_db_root_password.sh</span><br></pre></td></tr></table></figure><p>如下图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-16.png" alt="配图5-16"></p><p>好了，进入正题，如何获取权限远程连接 mysql</p><p>首先登陆，然后打开 mysql 数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -h localhost -p</span><br><span class="line">use mysql                      //打开mysql数据库</span><br></pre></td></tr></table></figure><p>然后将 host 设置为%表示任何 ip 都能连接 mysql，当然您也可以将 host 指定为某个 ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host=&apos;%&apos; where user=&apos;root&apos; and host=&apos;localhost&apos;;</span><br></pre></td></tr></table></figure><p>最后刷新权限表，使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>如果您想关闭远程连接，恢复 mysql 的默认设置（只能本地连接），只需重复上述步骤，将<code>host=&#39;%&#39;</code>改为<code>host=&#39;localhost&#39;</code>就行了。</p><p>使用 Navicat Premium 来远程连接到数据库，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-17.png" alt="配图5-17"></p><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p>一般情况下我们不会使用公网 ip 来访问网站，这个时候我们需要为我们的服务器绑定域名，绑定域名后网站需要备案后才能访问，备案的过程可能会有点长，两到三周左右。你如果不想使用域名绑定，那么可以跳过这一小节，不使用域名也是可以的。当我们的网站备案好后，我们需要通过我们绑定的域名在服务器上创建虚拟主机以此来部署我们的项目文件。下面我们来看一下如何创建和删除虚拟主机。</p><p>添加虚拟主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/oneinstack</span><br><span class="line">./vhost.sh</span><br></pre></td></tr></table></figure><p>如图</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-21.png" alt="配图5-21"></p><p>删除虚拟主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  /root/oneinstack</span><br><span class="line">./vhost.sh del</span><br></pre></td></tr></table></figure><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-22.png" alt="配图5-22"></p><h2 id="上传项目文件到服务器"><a href="#上传项目文件到服务器" class="headerlink" title="上传项目文件到服务器"></a>上传项目文件到服务器</h2><p>上传项目文件到服务器上，我们需要用到 WinSCP,连接配置和其他远程连接需要输入的基本相同，这里就不列举了。我们需要把如下项目文件上传到服务器目录下。如果你创建了虚拟主机，那么你需要上传的服务器目录为<code>/data/wwwroot/你的域名/</code>。如果你未绑定域名，你可以上传到默认的服务器目录下<code>/data/wwwroot/default/</code>，如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-18.png" alt="配图5-18"></p><p>这里需要注意的是我们需要把 index.html 默认网站首页放在根目录下，要不然会出现403无法访问的错误。</p><p>是不是这样就能访问了呢？我们还需要做最后几步工作。</p><p>默认 Tomcat 是以一般 www 用户运行，所以我们要将网站代码权限改为 www，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R www.www /data/wwwroot</span><br></pre></td></tr></table></figure><p>如图:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-19.png" alt="配图5-19"></p><p>最后，我们重启一下 Tomcat 就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service tomcat restart</span><br></pre></td></tr></table></figure><h2 id="访问主页"><a href="#访问主页" class="headerlink" title="访问主页"></a>访问主页</h2><p>下面我们访问一下我们网站的主页试试，这里要注意网站的根目录是 default 目录，所以我们需要注意一下我们访问的页面的路径。这是我的图片分享网站的首页，大家可以参考一下:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu5-20.png" alt="配图5-20"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>好了，终于将我们的 javaweb 部署到服务器上了。虽然弄了很久…..但还是很高兴，感觉通过部署服务器学到了很多东西，对网站的创建和运行有了一定的了解。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu5-1.jpg&quot; alt=&quot;阿里云ECS基于Linux系统部署javaweb项目文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近发现阿里云上推出了一个云翼计划，大学生购买 ECS 实例最低只要 9.9 元/月(不是打广告),真的是太实惠了有没有。算一算我还有两年才毕业，这要是不申请一个来试试都不好意思说自己读过大学…本来对服务器这一块不是很了解，正好借此机会学习学习。纯基础教学，带你一步一步了解如何使用 ECS 部署你的 javaweb 项目。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://cavszhouyou.top/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="阿里云" scheme="http://cavszhouyou.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建Spring+SpringMVC+Mybatis</title>
    <link href="http://cavszhouyou.top/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BASpring-SpringMVC-Mybatis.html"/>
    <id>http://cavszhouyou.top/从零搭建Spring-SpringMVC-Mybatis.html</id>
    <published>2018-02-10T03:55:26.000Z</published>
    <updated>2018-04-23T09:12:32.346Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu4.jpg" alt="从零搭建 Spring+SpringMVC+Mybatis 文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在写一个图片分享网站类型的小 demo，后端采用了 Spring+SpringMVC+Mybatis 来进行框架的搭建。因为一直写前端，对后端的一些实现一直不太了解，也导致在项目开发中后端运行出现了什么问题，我也不能及时察觉到。所以希望通过写这个小 demo，能够了解后端项目是如何创建、管理和实现的。所以先总结一下如何从零搭建 Spring+SpringMVC+Mybatis。</p><a id="more"></a><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>IntelliJ IDEA 2017.3.3 x64</li><li>apache-maven-3.3.9</li><li>apache-tomcat-9.0.4</li></ul><p>具体下载方法及使用可以自行百度一下。</p><h2 id="创建-Maven-Web-项目"><a href="#创建-Maven-Web-项目" class="headerlink" title="创建 Maven Web 项目"></a>创建 Maven Web 项目</h2><p>第一步我们需要创建一个基本的使用 Maven 管理 的 web 项目。</p><ol><li><p>打开 idea 之后，在左上角点击 file -&gt; new -&gt; project，在弹出的 new project 页面，选择 maven -&gt; 勾选 Create from artifactype -&gt; 选中 webapp（注意：这个地方有两个 app，选择 maven-archetype-webapp）, next 。如下图</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-2.png" alt="配图4-2"></p></li><li><p>接下来就是填写 groupId 和 archetypeId 了，点击 next。这里需要注意的是 GroupID 实际对应 JAVA 的包的结构，是 main 目录里 java 的目录结构。 ArtifactID 就是项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。如下图</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-3.png" alt="配图4-3"></p></li><li><p>然后下一步，首先我们需要配置本地 maven 的安装路径，然后点击右侧的加号。如下图</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-4.png" alt="配图4-4"></p></li><li><p>输入对应的 name 和 value，然后点击 OK。点击 Next。这里需要注意 archetypeCatalog 表示插件使用的 archetype 元数据，不加这个参数时默认为 remote，local，即中央仓库 archetype 元数据，由于中央仓库的 archetype 太多了，所以导致很慢，指定 internal 来表示仅使用内部元数据。</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-5.png" alt="配图 4-5"></p></li><li><p>然后填写 project name 和 module name，并选择项目所在的路径。注意 module name 默认和 project name 一样的，但是如果这个项目只有这一个 module，不改无所谓的，如果有很多的 module，那肯定是修改一下。 填完点击 finish。如下图</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-6.png" alt="配图 4-6"></p></li><li><p>在创建过程中，这时候在 Idea 主窗口的右下角部分,我们可以看到一个滚动条在执行,说明我们的项目正在 build 中.右上角有一个提示框如下图所示:</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-7.png" alt="配图 4-7"></p><p> 这个提示框大概意思是:Maven 项目需要被导入.我们选择 Enable Auto-Import(自动导入)</p></li><li><p>当我们看见如下目录时，说明我们的项目已经创建好了。如下图</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-8.png" alt="配图 4-8"></p></li></ol><h2 id="修改项目目录"><a href="#修改项目目录" class="headerlink" title="修改项目目录"></a>修改项目目录</h2><p>创建完项目后，我们可以发现我们项目的目录不全，我们需要自己手动添加。</p><p>初始结构图如下:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-9.png" alt="配图 4-9"></p><p>修改后目录如下:</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-10.png" alt="配图 4-10"></p><p>需要的主体目录对应解释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src                            //源码、资源等文件的根目录</span><br><span class="line">  -main                        //项目开发主要目录之一,可以放java代码和一些资源文件.</span><br><span class="line">    -java                      //开发的主要的java代码存放目录</span><br><span class="line">      -com.photoshareweb        //我的应用程序的包名</span><br><span class="line">        -controller            //控制类代码</span><br><span class="line">        -dao                   //mybatis-generator生成的dao映射类</span><br><span class="line">        -entitys               //mybatis-generator生成的实体类</span><br><span class="line">        -mapping               //mybatis-generator生成的映射文件</span><br><span class="line">        -service               //服务器类代码</span><br><span class="line">    -resources                 //开发中的主要的资源文件存放目录</span><br><span class="line">    -webapp                    //web页面和其他web配置、资源文件存放目录</span><br><span class="line">  -test                        //项目开发中的测试模块存放路径,包含java代码和资源文件.</span><br><span class="line">    -java                      //测试代码存放目录</span><br><span class="line">    -resources                 //测试资源文件存放目录</span><br></pre></td></tr></table></figure><p>下面我们讲一下如何创建 main 下的 java 目录</p><ol><li><p>我们先右键点击 main 目录,接着选中 New→Directory,在弹出的对话框中输入 java。</p></li><li><p>接着我们需要把 java 目录标记为源文目录。</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-11.png" alt="配图 4-11"></p></li><li><p>在 java 目录下创建包，这里有一个很容易尴尬的地方就是，有的情况下我们创建的目录不能自动识别，然后直接会生成一串。如果遇到这个问题，大家可以参考一下这个<a href="https://jingyan.baidu.com/article/e5c39bf5d8abc039d660335f.html" target="_blank" rel="noopener">解决办法</a>。</p></li></ol><p>创建好相应目录后，一定要记得将该目录标记为相应的类型，如果是普通目录则不需要标记。</p><h2 id="配置-pom-xml-文件"><a href="#配置-pom-xml-文件" class="headerlink" title="配置 pom.xml 文件"></a>配置 pom.xml 文件</h2><p>我们根据项目引入相应的资源库，我的具体配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.photoshareweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>PhotoShareWeb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>PhotoShareWeb Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 2.数据库 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid==&gt;阿里巴巴数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.alibaba.druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- DAO: MyBatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.mybatis.mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.mybatis.mybatis_spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-generator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 3.Servlet web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--json工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.google.gson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Servlet版本设置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;javax.servlet.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 4.Spring --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1)Spring核心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2)Spring DAO层 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3)Spring web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 4)Spring test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- redis客户端:Jedis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;redis.clients.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protostuff-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.dyuproject.protostuff.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dyuproject.protostuff<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protostuff-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.dyuproject.protostuff.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Map工具类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件上传工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>PhotoShareWeb<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-generator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库驱动  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 自动生成 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 指定文件位置好像不起作用，始终默认读取src/main/resources/generatorConfig.xml文件 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--允许移动生成的文件--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--允许覆盖生成的文件--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.tld<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里是false，用true会报 数据库连接 错误 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.tld<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置可变版本号,也就是常说的版本管理 （Spring、SpringMvc、Mybatis、Gson、Druid） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要针对某个依赖进行升级的时候只需要更改下面对应的版本号 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在上面使用版本号的时候需要用固定格式,如: $&#123;包名.version&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.apache.slf4j.log4j.version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">org.apache.slf4j.log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.alibaba.druid.version</span>&gt;</span>1.0.25<span class="tag">&lt;/<span class="name">com.alibaba.druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.mybatis.mybatis.version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">com.mybatis.mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.mybatis.mybatis_spring.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">com.mybatis.mybatis_spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.google.gson.version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">com.google.gson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javax.servlet.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">javax.servlet.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.springframework.version</span>&gt;</span>4.3.2.RELEASE<span class="tag">&lt;/<span class="name">org.springframework.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">redis.clients.version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">redis.clients.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.dyuproject.protostuff.version</span>&gt;</span>1.0.8<span class="tag">&lt;/<span class="name">com.dyuproject.protostuff.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer.organization</span>&gt;</span>&lt;![CDATA[scengine]]&gt;<span class="tag">&lt;/<span class="name">developer.organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-generator.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">mybatis-generator.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="整合-Spring-SpringMVC-Mybatis"><a href="#整合-Spring-SpringMVC-Mybatis" class="headerlink" title="整合 Spring+SpringMVC+Mybatis"></a>整合 Spring+SpringMVC+Mybatis</h2><p>刚才我们已经配置好了基本的目录，也引入了相应的项目资源库，接下我们需要对 Spring+SpringMvc+Mybatis 进行整合。</p><p>我们先打开 webapp 目录下面的 WEB-INF 目录中的 web.xml 文件,web.xml 文件是整合 web 项目的配置中心.我们在 web.xml 中加入如下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"3.1"</span> <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认的首页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果是用maven命令生成的xml，需要修改servlet版本为3.1 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置DispatcherServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>MyDemo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span>    <span class="comment">&lt;!-- 项目名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> <span class="comment">&lt;!-- mvc调度器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置springMVC需要加载的配置文件</span></span><br><span class="line"><span class="comment">            spring-dao.xml,spring-service.xml,spring-web.xml</span></span><br><span class="line"><span class="comment">            Mybatis - &gt; spring -&gt; springmvc</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认匹配所有的静态资源,此处配置出错,会产生错误500 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/js/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/css/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/images/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/fonts/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--druid ==&gt; WEB方式监控配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/druid/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>druidWebStatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.alibaba.druid.support.http.WebStatFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>exclusions<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/public/*,*.js,*.css,/druid*,*.jsp,*.swf<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>principalSessionName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>sessionInfo<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>profileEnable<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>druidWebStatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/static/view/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置好 web.xml 文件后会报错，是因为我们有一些文件还没有创建。在 IDEA 中我们只需选中报错处，按下 Alt+Enter 即可生成相应的目录或文件。</p><ul><li>我们首先需要在 src→main→resources 下创建一个 spring 目录，然后在 spring 目录下创建 spring 相关的控制文件。</li></ul><p>在 spring 目录下创建 spring-dao.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis过程 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用数据库配置文件解耦 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 下面的druid配置都是基本配置,具体优化设置可以上网查询,也可以去github上面直接搜索druid --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultAutoCommit"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"select 1 "</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyFilters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"logFilter"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- cn.acheng1314是我的应用程序的包名,你们需要使用你们自己的包名,也就是前面我们提到过的GroupId --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.photoshareweb.entitys"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/photoshareweb/mapping/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.photoshareweb.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上面的druid的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logFilter"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.filter.logging.Slf4jLogFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"statementExecutableSqlLogEnable"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的配置中,肯定也会出现报错的情况,这时候我们只需要选中报错的地方按下 Alt+Enter 就能生成相关的资源.</p><p>在 spring 目录下创建 spring-service.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service包下所有使用注解的类型 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.photoshareweb为我们应用的包名,当然也是我们前面提到过的GroupId --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.photoshareweb.service"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置基于注解的声明式事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 spring 目录下创建 spring-web.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解模式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简化配置：</span></span><br><span class="line"><span class="comment">        (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter</span></span><br><span class="line"><span class="comment">        (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置</span></span><br><span class="line"><span class="comment">        (1)加入对静态资源的处理：js,gif,png</span></span><br><span class="line"><span class="comment">        (2)允许使用"/"做整体映射</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/static/css/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/static/images/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/view/**"</span> <span class="attr">location</span>=<span class="string">"/static/view/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.photoshareweb"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller注解的JAVA类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>现在我们会发现我们的 jdbc.properties 和 mybatis-config.xml 文件都是空的,我们需要继续写入内容。</li></ul><p>jdbc.properties 是数据库连接的配置文件.如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/photoshareweb</span><br><span class="line">jdbc.username=数据库用户名</span><br><span class="line">jdbc.password=数据库用户名对应的密码</span><br></pre></td></tr></table></figure><p>上面的 jdbc.driver 为数据库连接的驱动,jdbc.url 为数据库的连接地址.</p><p>mybatis-config.xml 顾名思义是 mybatis 的配置文件,如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置全局属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用列别名替换列名 默认:true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰命名转换:Table&#123;create_time&#125; -&gt; Entity&#123;createTime&#125; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们还需要为日志记录添加一个配置文件，我们需要在资源目录下面添加一个默认的配置文件 log4j2.xml 即可，如下:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- status=debug 可以查看log4j的装配过程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"off"</span> <span class="attr">monitorInterval</span>=<span class="string">"1800"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>/logs/webLog<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志备份目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"BACKUP_HOME"</span>&gt;</span>&#123;LOG_HOME&#125;/backup<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"STAT_NAME"</span>&gt;</span>stat<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SERVER_NAME"</span>&gt;</span>global<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义控制台输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span> <span class="attr">follow</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 程序员调试日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"DevLog"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/$&#123;SERVER_NAME&#125;"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">"$&#123;LOG_HOME&#125;/$&#123;SERVER_NAME&#125;.%d&#123;yyyy-MM-dd-HH&#125;.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"1"</span> <span class="attr">modulate</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 游戏产品数据分析日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"ProductLog"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/$&#123;SERVER_NAME&#125;_$&#123;STAT_NAME&#125;"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">"$&#123;LOG_HOME&#125;/$&#123;SERVER_NAME&#125;_$&#123;STAT_NAME&#125;.%d&#123;yyyy-MM-dd-HH&#125;.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">pattern</span>=<span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread][%file:%line] - %msg%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">modulate</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 3rdparty Loggers --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.core"</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.beans"</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.context"</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.jboss.netty"</span> <span class="attr">level</span>=<span class="string">"warn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.http"</span> <span class="attr">level</span>=<span class="string">"warn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mchange.v2"</span> <span class="attr">level</span>=<span class="string">"warn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Game Stat  logger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.u9.global.service.log"</span> <span class="attr">level</span>=<span class="string">"info"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ProductLog"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Root Logger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DevLog"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>因为我们使用的是 mybatis-generator 来自动生成实体类和映射文件，因此我们还需要在资源目录下添加 mybatis_generator.properties 和 generatorConfig 两个文件。</li></ul><p>mybatis_generator.properties 是 mybatis 连接数据库的文件，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jdbc_driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc_url=jdbc:mysql://localhost:3306/photoshareweb</span><br><span class="line">jdbc_username=数据库用户名</span><br><span class="line">jdbc_password=数据库用户名对应的密码</span><br><span class="line"></span><br><span class="line">targetProject=src/main/java</span><br><span class="line"></span><br><span class="line">modelPackage=com.photoshareweb.entitys</span><br><span class="line">sqlMapperPackage=com.photoshareweb.mapping</span><br><span class="line">daoMapperPackage=com.photoshareweb.dao</span><br></pre></td></tr></table></figure><p>generatorConfig 是 mybatis-generator 的配置文件，如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 该配置文件说明插件需要如何生成，以及生成对应的包名，路径等信息。</span></span><br><span class="line"><span class="comment">      还有重要的就是我们要生成的实体类所对应的的表或者试图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"mybatis_generator.properties"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MBG"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span> <span class="attr">defaultModelType</span>=<span class="string">"conditional"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection,</span></span><br><span class="line"><span class="comment">                javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,</span></span><br><span class="line"><span class="comment">                javaClientGenerator?,table+ --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" /&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&amp;lt;!&amp;ndash; 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不希望生成的注释中包含时间戳 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否  自动为每一个生成的类创建一个构造方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc_driver&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc_url&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">userId</span>=<span class="string">"$&#123;jdbc_username&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">"$&#123;jdbc_password&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定生成的类型为java类型，避免数据库中number等类型字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;modelPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"$&#123;targetProject&#125;"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对应的xml mapper文件  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;sqlMapperPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"$&#123;targetProject&#125;"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对应的dao接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"$&#123;daoMapperPackage&#125;"</span> <span class="attr">targetProject</span>=<span class="string">"$&#123;targetProject&#125;"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表名对应生成的实体 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"webuser"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>好啦，到这里具体的配置文件都搞定了！</p><h2 id="配置-Tomcat"><a href="#配置-Tomcat" class="headerlink" title="配置 Tomcat"></a>配置 Tomcat</h2><p>我们想要把项目跑起来，当然还需要配置 Tomcat 服务器啦！</p><ol><li><p>首先我们在主页面的点击右上角点击那个下拉框，再点击 Edit Configurations。</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-13.png" alt="配图4-13"></p></li><li><p>然后在弹出的对话框中点击+号，找到 Tomcat Server ，选择 Local.</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-14.png" alt="配图4-14"></p></li><li><p>在弹出的对话框中，选择 Deployment,点击右侧的+号，选择 Artifact。</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-15.png" alt="配图4-15"></p></li><li><p>在弹出的对话框中选择后缀为:exploded 的选项</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-16.png" alt="配图4-16"></p></li><li><p>最后回到 Server 选项卡，配置一下 Tomcat 的基本参数，最后点击 Ok 即可</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-17.png" alt="配图4-17"></p></li><li><p>回到主界面点击右上角的 Debug 按钮，如果出现以下界面，就说明服务器启动成功了。</p><p> <img src="http://p2p4htzmu.bkt.clouddn.com/peitu4-18.png" alt="配图4-18"></p></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>好啦，我们一个最基本的基于 Spring+SpringMVC+Mybatis 搭建的 web 项目就建好了，希望我的总结也能够给你提供一点帮助。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu4.jpg&quot; alt=&quot;从零搭建 Spring+SpringMVC+Mybatis 文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近在写一个图片分享网站类型的小 demo，后端采用了 Spring+SpringMVC+Mybatis 来进行框架的搭建。因为一直写前端，对后端的一些实现一直不太了解，也导致在项目开发中后端运行出现了什么问题，我也不能及时察觉到。所以希望通过写这个小 demo，能够了解后端项目是如何创建、管理和实现的。所以先总结一下如何从零搭建 Spring+SpringMVC+Mybatis。&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="http://cavszhouyou.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://cavszhouyou.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Spring" scheme="http://cavszhouyou.top/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://cavszhouyou.top/tags/SpringMVC/"/>
    
      <category term="Mybatis" scheme="http://cavszhouyou.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>通过Java生成七牛云uptoken</title>
    <link href="http://cavszhouyou.top/%E9%80%9A%E8%BF%87java%E7%94%9F%E6%88%90%E4%B8%83%E7%89%9B%E4%BA%91uptoken.html"/>
    <id>http://cavszhouyou.top/通过java生成七牛云uptoken.html</id>
    <published>2018-02-07T04:04:56.000Z</published>
    <updated>2018-04-23T09:13:00.050Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu3-1.jpg" alt="通过 java 生成七牛云 UpToken 文章配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在写一个图片分享网站类型的小 demo，使用七牛云图片上传需要服务端生成上传凭证 uptoken。本来对后端了解的不是很多，看了官网的说明，写了一个最基本的生成方法，所以总结一下生成 uptoken 的具体步骤。我这里介绍的是使用七牛云 Java SDK 的生成方法。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>此 SDK 适用于 Java 7 及以上版本。使用此 SDK 构建您的网络应用程序，能让您以非常便捷地方式将数据安全地存储 到七牛云上。无论您的网络应用是一个网站程序，还是包括从云端（服务端程序）到终端（手持设备应用）的架构服务或应 用，通过七牛云及其 SDK，都能让您应用程序的终端用户高速上传和下载，同时也让您的服务端更加轻盈。<br>Java SDK 属于七牛服务端 SDK 之一，主要有如下功能：</p><ul><li>提供生成客户端上传所需的上传凭证的功能</li><li>提供文件从服务端直接上传七牛的功能</li><li>提供对七牛空间中文件进行管理的功能</li><li>提供对七牛空间中文件进行处理的功能</li><li>提供七牛 CDN 相关的刷新，预取，日志功能</li></ul></blockquote><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://developer.qiniu.com/kodo/sdk/1239/java" target="_blank" rel="noopener">七牛云 java-sdk 官方文档</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我们需要安装七牛云的 java-sdk，我这里介绍的是 Maven 的安装方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>[7.2.0, 7.2.99]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 version 指定了一个版本范围，每次更新 pom.xml 的时候会尝试去下载 7.2.x 版本中的最新版本，我们也可以手动指定一个固定的版本。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>引入 java-sdk 以后，我们需要创建一个 Auth 类，这个类的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qiniu.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Mac;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Auth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传策略</span></span><br><span class="line"><span class="comment">     * 参考文档：&lt;a href="https://developer.qiniu.com/kodo/manual/put-policy"&gt;上传策略&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] policyFields = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"callbackUrl"</span>,</span><br><span class="line">            <span class="string">"callbackBody"</span>,</span><br><span class="line">            <span class="string">"callbackHost"</span>,</span><br><span class="line">            <span class="string">"callbackBodyType"</span>,</span><br><span class="line">            <span class="string">"callbackFetchKey"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"returnUrl"</span>,</span><br><span class="line">            <span class="string">"returnBody"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"endUser"</span>,</span><br><span class="line">            <span class="string">"saveKey"</span>,</span><br><span class="line">            <span class="string">"insertOnly"</span>,</span><br><span class="line">            <span class="string">"isPrefixalScope"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"detectMime"</span>,</span><br><span class="line">            <span class="string">"mimeLimit"</span>,</span><br><span class="line">            <span class="string">"fsizeLimit"</span>,</span><br><span class="line">            <span class="string">"fsizeMin"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"persistentOps"</span>,</span><br><span class="line">            <span class="string">"persistentNotifyUrl"</span>,</span><br><span class="line">            <span class="string">"persistentPipeline"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"deleteAfterDays"</span>,</span><br><span class="line">            <span class="string">"fileType"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] deprecatedPolicyFields = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">            <span class="string">"asyncOps"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecretKeySpec secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Auth</span><span class="params">(String accessKey, SecretKeySpec secretKeySpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accessKey = accessKey;</span><br><span class="line">        <span class="keyword">this</span>.secretKey = secretKeySpec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Auth <span class="title">create</span><span class="params">(String accessKey, String secretKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNullOrEmpty(accessKey) || StringUtils.isNullOrEmpty(secretKey)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"empty key"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] sk = StringUtils.utf8Bytes(secretKey);</span><br><span class="line">        SecretKeySpec secretKeySpec = <span class="keyword">new</span> SecretKeySpec(sk, <span class="string">"HmacSHA1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Auth(accessKey, secretKeySpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyPolicy</span><span class="params">(<span class="keyword">final</span> StringMap policy, StringMap originPolicy, <span class="keyword">final</span> <span class="keyword">boolean</span> strict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (originPolicy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        originPolicy.forEach(<span class="keyword">new</span> StringMap.Consumer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.inStringArray(key, deprecatedPolicyFields)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(key + <span class="string">" is deprecated!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!strict || StringUtils.inStringArray(key, policyFields)) &#123;</span><br><span class="line">                    policy.put(key, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mac <span class="title">createMac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mac mac;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mac = javax.crypto.Mac.getInstance(<span class="string">"HmacSHA1"</span>);</span><br><span class="line">            mac.init(secretKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GeneralSecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mac;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sign</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        Mac mac = createMac();</span><br><span class="line">        String encodedSign = UrlSafeBase64.encodeToString(mac.doFinal(data));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.accessKey + <span class="string">":"</span> + encodedSign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sign</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sign(StringUtils.utf8Bytes(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signWithData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        String s = UrlSafeBase64.encodeToString(data);</span><br><span class="line">        <span class="keyword">return</span> sign(StringUtils.utf8Bytes(s)) + <span class="string">":"</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signWithData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> signWithData(StringUtils.utf8Bytes(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成HTTP请求签名字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signRequest</span><span class="params">(String urlString, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        URI uri = URI.create(urlString);</span><br><span class="line">        String path = uri.getRawPath();</span><br><span class="line">        String query = uri.getRawQuery();</span><br><span class="line"></span><br><span class="line">        Mac mac = createMac();</span><br><span class="line"></span><br><span class="line">        mac.update(StringUtils.utf8Bytes(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (query != <span class="keyword">null</span> &amp;&amp; query.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            mac.update((<span class="keyword">byte</span>) (<span class="string">'?'</span>));</span><br><span class="line">            mac.update(StringUtils.utf8Bytes(query));</span><br><span class="line">        &#125;</span><br><span class="line">        mac.update((<span class="keyword">byte</span>) <span class="string">'\n'</span>);</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; Client.FormMime.equalsIgnoreCase(contentType)) &#123;</span><br><span class="line">            mac.update(body);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String digest = UrlSafeBase64.encodeToString(mac.doFinal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.accessKey + <span class="string">":"</span> + digest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证回调签名是否正确</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originAuthorization 待验证签名字符串，以 "QBox "作为起始字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url                 回调地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body                回调请求体。原始请求体，不要解析后再封装成新的请求体--可能导致签名不一致。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType         回调ContentType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidCallback</span><span class="params">(String originAuthorization, String url, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        String authorization = <span class="string">"QBox "</span> + signRequest(url, body, contentType);</span><br><span class="line">        <span class="keyword">return</span> authorization.equals(originAuthorization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseUrl 待签名文件url，如 http://img.domain.com/u/3.jpg 、</span></span><br><span class="line"><span class="comment">     *                http://img.domain.com/u/3.jpg?imageView2/1/w/120</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">privateDownloadUrl</span><span class="params">(String baseUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> privateDownloadUrl(baseUrl, <span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseUrl 待签名文件url，如 http://img.domain.com/u/3.jpg 、</span></span><br><span class="line"><span class="comment">     *                http://img.domain.com/u/3.jpg?imageView2/1/w/120</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expires 有效时长，单位秒。默认3600s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">privateDownloadUrl</span><span class="params">(String baseUrl, <span class="keyword">long</span> expires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> deadline = System.currentTimeMillis() / <span class="number">1000</span> + expires;</span><br><span class="line">        <span class="keyword">return</span> privateDownloadUrlWithDeadline(baseUrl, deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">privateDownloadUrlWithDeadline</span><span class="params">(String baseUrl, <span class="keyword">long</span> deadline)</span> </span>&#123;</span><br><span class="line">        StringBuilder b = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        b.append(baseUrl);</span><br><span class="line">        <span class="keyword">int</span> pos = baseUrl.indexOf(<span class="string">"?"</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            b.append(<span class="string">"&amp;e="</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            b.append(<span class="string">"?e="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        b.append(deadline);</span><br><span class="line">        String token = sign(StringUtils.utf8Bytes(b.toString()));</span><br><span class="line">        b.append(<span class="string">"&amp;token="</span>);</span><br><span class="line">        b.append(token);</span><br><span class="line">        <span class="keyword">return</span> b.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * scope = bucket</span></span><br><span class="line"><span class="comment">     * 一般情况下可通过此方法获取token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 空间名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的上传token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadToken</span><span class="params">(String bucket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadToken(bucket, <span class="keyword">null</span>, <span class="number">3600</span>, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * scope = bucket:key</span></span><br><span class="line"><span class="comment">     * 同名文件覆盖操作、只能上传指定key的文件可以可通过此方法获取token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 空间名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key，可为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的上传token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadToken</span><span class="params">(String bucket, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadToken(bucket, key, <span class="number">3600</span>, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成上传token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket  空间名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     key，可为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expires 有效时长，单位秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> policy  上传策略的其它参数，如 new StringMap().put("endUser", "uid").putNotEmpty("returnBody", "")。</span></span><br><span class="line"><span class="comment">     *                scope通过 bucket、key间接设置，deadline 通过 expires 间接设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的上传token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadToken</span><span class="params">(String bucket, String key, <span class="keyword">long</span> expires, StringMap policy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadToken(bucket, key, expires, policy, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成上传token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket  空间名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     key，可为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expires 有效时长，单位秒。默认3600s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> policy  上传策略的其它参数，如 new StringMap().put("endUser", "uid").putNotEmpty("returnBody", "")。</span></span><br><span class="line"><span class="comment">     *                scope通过 bucket、key间接设置，deadline 通过 expires 间接设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strict  是否去除非限定的策略字段，默认true</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的上传token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadToken</span><span class="params">(String bucket, String key, <span class="keyword">long</span> expires, StringMap policy, <span class="keyword">boolean</span> strict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> deadline = System.currentTimeMillis() / <span class="number">1000</span> + expires;</span><br><span class="line">        <span class="keyword">return</span> uploadTokenWithDeadline(bucket, key, deadline, policy, strict);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadTokenWithDeadline</span><span class="params">(String bucket, String key, <span class="keyword">long</span> deadline, StringMap policy, <span class="keyword">boolean</span> strict)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO   UpHosts Global</span></span><br><span class="line">        String scope = bucket;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">            scope = bucket + <span class="string">":"</span> + key;</span><br><span class="line">        &#125;</span><br><span class="line">        StringMap x = <span class="keyword">new</span> StringMap();</span><br><span class="line">        copyPolicy(x, policy, strict);</span><br><span class="line">        x.put(<span class="string">"scope"</span>, scope);</span><br><span class="line">        x.put(<span class="string">"deadline"</span>, deadline);</span><br><span class="line"></span><br><span class="line">        String s = Json.encode(x);</span><br><span class="line">        <span class="keyword">return</span> signWithData(StringUtils.utf8Bytes(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadTokenWithPolicy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        String s = Json.encode(obj);</span><br><span class="line">        <span class="keyword">return</span> signWithData(StringUtils.utf8Bytes(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringMap <span class="title">authorization</span><span class="params">(String url, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        String authorization = <span class="string">"QBox "</span> + signRequest(url, body, contentType);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringMap().put(<span class="string">"Authorization"</span>, authorization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringMap <span class="title">authorization</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorization(url, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成HTTP请求签名字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signRequestV2</span><span class="params">(String urlString, String method, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        URI uri = URI.create(urlString);</span><br><span class="line"></span><br><span class="line">        Mac mac = createMac();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        sb.append(String.format(<span class="string">"%s %s"</span>, method, uri.getPath()));</span><br><span class="line">        <span class="keyword">if</span> (uri.getQuery() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(String.format(<span class="string">"?%s"</span>, uri.getQuery()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.append(String.format(<span class="string">"\nHost: %s"</span>, uri.getHost()));</span><br><span class="line">        <span class="keyword">if</span> (uri.getPort() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sb.append(String.format(<span class="string">":%d"</span>, uri.getPort()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(String.format(<span class="string">"\nContent-Type: %s"</span>, contentType));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// body</span></span><br><span class="line">        sb.append(<span class="string">"\n\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.length &gt; <span class="number">0</span> &amp;&amp; !StringUtils.isNullOrEmpty(contentType)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contentType.equals(Client.FormMime)</span><br><span class="line">                    || contentType.equals(Client.JsonMime)) &#123;</span><br><span class="line">                sb.append(<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        mac.update(StringUtils.utf8Bytes(sb.toString()));</span><br><span class="line"></span><br><span class="line">        String digest = UrlSafeBase64.encodeToString(mac.doFinal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.accessKey + <span class="string">":"</span> + digest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringMap <span class="title">authorizationV2</span><span class="params">(String url, String method, <span class="keyword">byte</span>[] body, String contentType)</span> </span>&#123;</span><br><span class="line">        String authorization = <span class="string">"Qiniu "</span> + signRequestV2(url, method, body, contentType);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringMap().put(<span class="string">"Authorization"</span>, authorization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringMap <span class="title">authorizationV2</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorizationV2(url, <span class="string">"GET"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现报错，只要导入相应的包即可，Auth 代码的 github 地址为</p><ul><li><a href="https://github.com/qiniu/java-sdk/edit/master/src/main/java/com/qiniu/util/Auth.java" target="_blank" rel="noopener">Auth 代码 github 地址</a></li></ul><p>创建 Auth 类后，下面我们就来看一下如何生成一个最简单的上传凭证。最简单的上传凭证只需要 AccessKey，SecretKey 和 Bucket 就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String accessKey = <span class="string">"access key"</span>;<span class="comment">//七牛云账号对应的公匙</span></span><br><span class="line">String secretKey = <span class="string">"secret key"</span>;<span class="comment">//七牛云账号对应的司匙</span></span><br><span class="line">String bucket = <span class="string">"bucket name"</span>;<span class="comment">//上传图片到的存储空间</span></span><br><span class="line"></span><br><span class="line">Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">String upToken = auth.uploadToken(bucket);<span class="comment">//获取uptoken</span></span><br></pre></td></tr></table></figure><h2 id="接口示例"><a href="#接口示例" class="headerlink" title="接口示例"></a>接口示例</h2><p>我在这里展示一下我的 demo 中获取 uptoken 接口的示例，大家可以参考一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.photoshareweb.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.photoshareweb.common.Auth;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/PhotoShareWeb/share/auth"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过七牛云上传凭证</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getUpToken"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">getUpToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String accessKey = <span class="string">"access key"</span>;<span class="comment">//七牛云账号对应的公匙</span></span><br><span class="line">        String secretKey = <span class="string">"secret key"</span>;<span class="comment">//七牛云账号对应的司匙</span></span><br><span class="line">        String bucket = <span class="string">"bucket name"</span>;<span class="comment">//上传图片到的存储空间</span></span><br><span class="line">        Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">        String upToken = auth.uploadToken(bucket);</span><br><span class="line">        <span class="keyword">return</span> upToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>好啦，这样我们就可以生成一个最基本的 uptoken 了，当然只是最基本的，更多的用法大家可以参考官方文档。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu3-1.jpg&quot; alt=&quot;通过 java 生成七牛云 UpToken 文章配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近在写一个图片分享网站类型的小 demo，使用七牛云图片上传需要服务端生成上传凭证 uptoken。本来对后端了解的不是很多，看了官网的说明，写了一个最基本的生成方法，所以总结一下生成 uptoken 的具体步骤。我这里介绍的是使用七牛云 Java SDK 的生成方法。&lt;/p&gt;
    
    </summary>
    
      <category term="七牛云" scheme="http://cavszhouyou.top/categories/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
    
      <category term="七牛云" scheme="http://cavszhouyou.top/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="后端" scheme="http://cavszhouyou.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>通过JavaScript实现七牛云图片上传</title>
    <link href="http://cavszhouyou.top/%E9%80%9A%E8%BF%87JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0.html"/>
    <id>http://cavszhouyou.top/通过JavaScript实现七牛云图片上传.html</id>
    <published>2018-02-06T11:54:47.000Z</published>
    <updated>2018-04-23T09:12:48.666Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu2-1.jpg" alt="七牛云图片上传配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在做一个图片分享网站类型的小 demo，我的想法是将用户上传的图片保存到七牛云上，然后将获取的链接存入数据库中。虽然以前写博客一直都是用七牛云来存储配图，但对于如何通过七牛云 JS 的 SDK 来完成上传操作还真是不太了解。在看了官网的教程后，有一些地方不是很明确，查了一些资料，所以总结一下前端如何通过 js 上传图片到七牛云。</p><a id="more"></a><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://github.com/qiniu/js-sdk/#usage" title="七牛云Qiniu-JavaScript-SDK官方文档" target="_blank" rel="noopener">七牛云 Qiniu-JavaScript-SDK 官方文档</a></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Qiniu-JavaScript-SDK （下文简称为 JS-SDK）适用于 IE8+、Chrome、Firefox、Safari 等浏览器，基于七牛云存储官方 API 构建，其中上传功能基于 Plupload 插件封装。开发者基于 JS-SDK 可以方便的从浏览器端上传文件至七牛云存储，并对上传成功后的图片进行丰富的数据处理操作。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为七牛云的 JS-SDK 是基于 Plupload 插件封装的，所以我们需要在引入七牛云的 js 依赖文件前，引入 Plupload 的相关 js 依赖文件。我这里介绍使用 NPM 安装的方法。</p><ul><li><p>Plupload 下载</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install Plupload --save-dev</span><br></pre></td></tr></table></figure></li><li><p>qiniu-js 下载</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qiniu-js --save-dev</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在使用前我们需要在页面里引入相应的 js 依赖文件。</p><ul><li>在页面中引入 plupload，plupload.full.min.js（生产环境）或 引入 plupload.dev.js 和 moxie.js（开发调试）。这些 js 文件可在 node_modules 文件夹下的 plupload 的文件夹中找到。</li><li>在页面中引入 qiniu.min.js（生产环境）或 qiniu.js（开发调试）这些 js 文件可在 node_modules 文件夹下的 qiniu-js 的文件夹中找到。</li></ul><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import js 具体路径可能会不同</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../../js/qiniu/plupload/plupload.dev.js"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../../js/qiniu/plupload/moxie.js"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"../../js/qiniu/qiniu.js"</span>);</span><br></pre></td></tr></table></figure><p>然后需要在页面中初始化 uploader，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uploader = Qiniu.uploader(&#123;</span><br><span class="line">    disable_statistics_report: <span class="literal">false</span>, <span class="comment">// 禁止自动发送上传统计信息到七牛，默认允许发送</span></span><br><span class="line">    runtimes: <span class="string">"html5,flash,html4"</span>, <span class="comment">// 上传模式,依次退化</span></span><br><span class="line">    browse_button: <span class="string">"pickfiles"</span>, <span class="comment">// 上传选择的点选按钮，**必需**</span></span><br><span class="line">    <span class="comment">// 在初始化时，uptoken, uptoken_url, uptoken_func 三个参数中必须有一个被设置</span></span><br><span class="line">    <span class="comment">// 切如果提供了多个，其优先级为 uptoken &gt; uptoken_url &gt; uptoken_func</span></span><br><span class="line">    <span class="comment">// 其中 uptoken 是直接提供上传凭证，uptoken_url 是提供了获取上传凭证的地址，如果需要定制获取 uptoken 的过程则可以设置 uptoken_func</span></span><br><span class="line">    uptoken: <span class="string">"&lt;Your upload token&gt;"</span>, <span class="comment">// uptoken 是上传凭证，由其他程序生成</span></span><br><span class="line">    <span class="comment">// uptoken_url: "/uptoken", // Ajax 请求 uptoken 的 Url，**强烈建议设置**（服务端提供）</span></span><br><span class="line">    <span class="comment">// uptoken_func: function(file)&#123;    // 在需要获取 uptoken 时，该方法会被调用</span></span><br><span class="line">    <span class="comment">//    // do something</span></span><br><span class="line">    <span class="comment">//    return uptoken;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    get_new_uptoken: <span class="literal">false</span>, <span class="comment">// 设置上传文件的时候是否每次都重新获取新的 uptoken</span></span><br><span class="line">    <span class="comment">// downtoken_url: '/downtoken',</span></span><br><span class="line">    <span class="comment">// Ajax请求downToken的Url，私有空间时使用,JS-SDK 将向该地址POST文件的key和domain,服务端返回的JSON必须包含`url`字段，`url`值为该文件的下载地址</span></span><br><span class="line">    unique_names: <span class="literal">false</span>, <span class="comment">// 默认 false，key 为文件名。若开启该选项，JS-SDK 会为每个文件自动生成key（文件名）</span></span><br><span class="line">    save_key: <span class="literal">false</span>, <span class="comment">// 默认 false。若在服务端生成 uptoken 的上传策略中指定了 `save_key`，则开启，SDK在前端将不对key进行任何处理</span></span><br><span class="line">    domain: <span class="string">"&lt;Your upload token&gt;"</span>, <span class="comment">// bucket 域名（就是你在七牛云上创建的存储空间的测试域名），下载资源时用到，如：'http://xxx.bkt.clouddn.com/' **必需**</span></span><br><span class="line">    container: <span class="string">"container"</span>, <span class="comment">// 上传区域 DOM ID，默认是 browser_button 的父元素，</span></span><br><span class="line">    max_file_size: <span class="string">"10mb"</span>, <span class="comment">// 最大文件体积限制</span></span><br><span class="line">    flash_swf_url: <span class="string">"../plupload/Moxie.swf"</span>, <span class="comment">//引入 flash,相对路径，这个也可以在 plupload 的文件夹中找到</span></span><br><span class="line">    max_retries: <span class="number">3</span>, <span class="comment">// 上传失败最大重试次数</span></span><br><span class="line">    dragdrop: <span class="literal">true</span>, <span class="comment">// 开启可拖曳上传</span></span><br><span class="line">    drop_element: <span class="string">"photo-container"</span>, <span class="comment">// 拖曳上传区域元素的 ID，拖曳文件或文件夹后可触发上传</span></span><br><span class="line">    chunk_size: <span class="string">"4mb"</span>, <span class="comment">// 分块上传时，每块的体积</span></span><br><span class="line">    auto_start: <span class="literal">true</span>, <span class="comment">// 选择文件后自动上传，若关闭需要自己绑定事件触发上传,</span></span><br><span class="line">    <span class="comment">//x_vars : &#123;</span></span><br><span class="line">    <span class="comment">//    自定义变量，参考http://developer.qiniu.com/docs/v6/api/overview/up/response/vars.html</span></span><br><span class="line">    <span class="comment">//    'time' : function(up,file) &#123;</span></span><br><span class="line">    <span class="comment">//        var time = (new Date()).getTime();</span></span><br><span class="line">    <span class="comment">// do something with 'time'</span></span><br><span class="line">    <span class="comment">//        return time;</span></span><br><span class="line">    <span class="comment">//    &#125;,</span></span><br><span class="line">    <span class="comment">//    'size' : function(up,file) &#123;</span></span><br><span class="line">    <span class="comment">//        var size = file.size;</span></span><br><span class="line">    <span class="comment">// do something with 'size'</span></span><br><span class="line">    <span class="comment">//        return size;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//&#125;,</span></span><br><span class="line">    init: &#123;</span><br><span class="line">        FilesAdded: <span class="function"><span class="keyword">function</span>(<span class="params">up, files</span>) </span>&#123;</span><br><span class="line">            plupload.each(files, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 文件添加进队列后,处理相关的事情</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        BeforeUpload: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 每个文件上传前,处理相关的事情</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"上传开始"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        UploadProgress: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 每个文件上传时,处理相关的事情</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"上传中"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        FileUploaded: <span class="function"><span class="keyword">function</span>(<span class="params">up, file, info</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 每个文件上传成功后,处理相关的事情</span></span><br><span class="line">            <span class="comment">// 其中 info.response 是文件上传成功后，服务端返回的json，形式如</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",</span></span><br><span class="line">            <span class="comment">//    "key": "gogopher.jpg"</span></span><br><span class="line">            <span class="comment">//  &#125;</span></span><br><span class="line">            <span class="comment">// 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> domain = up.getOption(<span class="string">"domain"</span>);</span><br><span class="line">            <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(info.response);</span><br><span class="line">            <span class="keyword">var</span> sourceLink = domain + res.key; <span class="comment">//获取上传成功后的文件的Url;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">Error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, err, errTip</span>) </span>&#123;</span><br><span class="line">            base.hideLoading();</span><br><span class="line">            <span class="comment">//上传出错时,处理相关的事情</span></span><br><span class="line">            <span class="keyword">if</span> (file.code == <span class="string">"-600"</span>) &#123;</span><br><span class="line">                base.showAlertDialog(<span class="string">"上传图片的大小不能超过10mb！"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.code == <span class="string">"-601"</span>) &#123;</span><br><span class="line">                base.showAlertDialog(<span class="string">"上传图片的格式有误！"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                base.showAlertDialog(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        UploadComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//队列文件处理完毕后,处理相关的事情</span></span><br><span class="line">        &#125;,</span><br><span class="line">        Key: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 若想在前端对每个文件的key进行个性化处理，可以配置该函数</span></span><br><span class="line">            <span class="comment">// 我使用的是图片名加上当前时间来定义key</span></span><br><span class="line">            <span class="comment">// 该配置必须要在 unique_names: false , save_key: false 时才生效</span></span><br><span class="line">            <span class="comment">// do something with key here</span></span><br><span class="line">            <span class="keyword">var</span> timestamp = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">            <span class="keyword">var</span> key = file.name + <span class="string">"/"</span> + timestamp;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// domain 为七牛空间（bucket)对应的域名，选择某个空间后，可通过"空间设置-&gt;基本设置-&gt;域名设置"查看获取</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// uploader 为一个 plupload 对象，继承了所有 plupload 的方法，参考http://plupload.com/docs</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上 uploader 的配置适用于单文件上传的情况。相信小伙伴们看完都有一个疑惑，什么是 uptoken 呢？ uptoken 是 我们图片上传的上传凭证，它会根据你的 Access Key 和 Secret Key 还有你上传图片到的存储空间 bucket 来生成(最基本的三项)。那么怎么生成 uptoken 呢？这当然不是由我们前端自己来生成的，这个时候就需要我们后端的小伙伴来帮帮忙了。具体可以参考我的另一篇博客,通过 java 生成七牛云 uptoken。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>关于七牛云上传组件的用法还有很多，如对上传的图片生成水印等，大家可以好好参考一下官方文档。我总结的只是一些最简单的用法，目前我的小 demo 只需要用到这一些，以后有需要再继续拓展 :)</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu2-1.jpg&quot; alt=&quot;七牛云图片上传配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;最近在做一个图片分享网站类型的小 demo，我的想法是将用户上传的图片保存到七牛云上，然后将获取的链接存入数据库中。虽然以前写博客一直都是用七牛云来存储配图，但对于如何通过七牛云 JS 的 SDK 来完成上传操作还真是不太了解。在看了官网的教程后，有一些地方不是很明确，查了一些资料，所以总结一下前端如何通过 js 上传图片到七牛云。&lt;/p&gt;
    
    </summary>
    
      <category term="七牛云" scheme="http://cavszhouyou.top/categories/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
    
      <category term="前端" scheme="http://cavszhouyou.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://cavszhouyou.top/tags/JavaScript/"/>
    
      <category term="七牛云" scheme="http://cavszhouyou.top/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Markdown—文档解读</title>
    <link href="http://cavszhouyou.top/MarkdownStudy.html"/>
    <id>http://cavszhouyou.top/MarkdownStudy.html</id>
    <published>2018-01-17T06:04:45.000Z</published>
    <updated>2018-04-23T09:12:11.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1.jpg" alt="Markdown语法学习配图"></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>记得第一次接触 Markdown 应该是在 github 上，当时看每一个仓库里的 README 文档都是 md 格式的，文档内容的排版让我眼前一亮。诶这是什么东西，好奇的我赶紧百度了一下，看完官方文档，感觉自己推开了新世界的大门，有没有很方便！看完文档后，感觉文档一些东西介绍的有一点晦涩，不容易理解。所以我就想分享一下我对 Markdown 的一些认识。</p><a id="more"></a><h2 id="一、认识-Markdown"><a href="#一、认识-Markdown" class="headerlink" title="一、认识 Markdown"></a>一、认识 Markdown</h2><h3 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h3><blockquote><p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p></blockquote><ul><li><a href="https://daringfireball.net/projects/markdown/syntax" title="创始人 John Gruber 的 Markdown 语法说明" target="_blank" rel="noopener">创始人 John Gruber 的 Markdown 语法说明</a></li><li><a href="https://www.appinn.com/markdown/#link" title="Markdown 中文版语法说明" target="_blank" rel="noopener">Markdown 中文版语法说明</a></li></ul><p>Markdown 其实是一种文档编辑的标记语言，它的目标是实现「易读易写」，成为一种适用于网络的书写语言。那怎样才能算易读易写呢？我们在书写文档时，有时候最头疼的就是文章的排版问题，这个时候使用 Markdown 就很方便了。试想一下在写文档时，用键盘一气呵成敲好内容，而且这个时候文章已经排版好了，大声告诉我，是不是很方便。现在很多网站都支持 Markdown 形式的文档书写，比如简书、掘金、github……Markdown 在很大程度上能提高你的码字效率和体验，如果你想快速编写格式丰富并且美观的文章，Markdown 是你的不二选择，怎么有一种打广告的感觉……</p><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>相信大家对超文本标记语言 HTML 都不陌生，那么 Markdown 和 HTML 有什么关系呢？简单来说就是，HTML 是一种发布的格式，而 Markdown 是一种书写的格式。什么意思呢，就是你在浏览器里边看到的所有东西都是由 HTML 标记组成的。那么 Markdown 想要显示对应的内容该怎么办呢，答案就是将其解析为 HTML 的形式来显示内容。</p><p>举一个例子，在 Markdown 语法中，有序列表使用数字接着一个英文句点来表示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure><p>上面的列表所产生的 HTML 标记为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>McHale<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Parish<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的例子就是 Markdown 到 HTML 的转换。这个时候可能有的同学就会提问了，那如果我在 Markdown 里边插入 HTML 标签，这时候该怎么显示呢？这就是我想告诉大家的 Markdown 的一个特性<strong>兼容 HTML</strong>。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown 只要直接加标签就可以了。要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。也就是说你如果在 Markdown 文档里添加了一个<code>&lt;table&gt;</code>标签，最后解析完成后，它仍然是一个<code>&lt;table&gt;</code>标签，不会解析错误，当然你如果想以代码段的形式呈现就是另外的情况了。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>但你如果使用 Markdown，你就无需担心这些问题，它让你可以自然地书写字符，如果需要转换则全由它来处理。</p><h3 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h3><p>工欲善其事必先利其器，那么我们该用什么来编辑 Markdown 文档了？当然你用文本编辑器也是可以的…..现在支持 Markdown 语法编辑的有很多，每个人的习惯不同可能选择不同，只要自己用着顺手就行，这里我推荐几个比较热门的编辑器。</p><ul><li><p>在线编辑器 Dillinger</p><p>  <a href="https://dillinger.io/" title="Dillinger" target="_blank" rel="noopener">Dillinger</a> 简洁却不失强大，同样支持支持 md, styled HTML, pdf 文件导出。 支持 dropbox, onedrive，google drive, github 存储。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-1.png" alt="Dillinger编辑器" title="Dillinger编辑器"></p></li><li><p>Windows 平台编辑器 MarkdownPad</p><p>  <a href="http://markdownpad.com/" title="MarkdownPad" target="_blank" rel="noopener">MarkdownPad</a>一款非常强大的 win 系统桌面端编辑器，支持实时预览，PDF 导出及导出格式自定义，公式编辑代码，桌面端使用最为广泛的 markown 编辑工具之一，推荐适用 pro 版，有破解版。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-2.png" alt="MarkdownPad" title="MarkdownPad"></p></li><li><p>OS X 平台编辑器 Mou</p><p>  <a href="http://25.io/mou/" title="Mou" target="_blank" rel="noopener">Mou</a> 是 Mac 下杰出的 Markdown 编辑器，提供语法高亮、在线预览、同步滚动、全屏模式，支持自定保存、自动匹配，允许自定义主题，支持 CSS，HTML 和 PDF 导出等。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-3.png" alt="Mou" title="Mou"></p></li><li><p>多平台编辑器 vscode</p><p>  我现在一般使用 vscode 进行编辑，只需要安装<a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced" title="Markdown Preview Enhanced" target="_blank" rel="noopener">Markdown Preview Enhanced</a>插件，因为现在码代码基本都用 vscode，所以我用起来还是挺顺手的，强行安利一波。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-4.png" alt="Markdown Preview Enhanced" title="Markdown Preview Enhanced"></p></li></ul><p>下面再给大家提供一些 Markdown 编辑器参考网址，总能找到适合你的一款。</p><ul><li><a href="https://www.csdn.net/article/2014-05-05/2819623" title="10款流行的Markdown编辑器，总有一款适合你" target="_blank" rel="noopener">10 款流行的 Markdown 编辑器，总有一款适合你</a></li><li><a href="https://www.jianshu.com/p/6ea395a6a35b" title="Markdown编辑器一览,总有一款适合你" target="_blank" rel="noopener">Markdown 编辑器一览,总有一款适合你</a></li><li><a href="https://www.jianshu.com/p/dcffb6f60fe2" title="Markdown编辑器之比较" target="_blank" rel="noopener">Markdown 编辑器之比较</a></li><li><a href="http://www.williamlong.info/archives/4319.html" title="好用的Markdown编辑器一览" target="_blank" rel="noopener">好用的 Markdown 编辑器一览</a></li></ul><h2 id="二、Markdown-语法介绍"><a href="#二、Markdown-语法介绍" class="headerlink" title="二、Markdown 语法介绍"></a>二、Markdown 语法介绍</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。空行的定义即是在显示上看起来像是空的，便会被视为空行。比如，若某一行只包含空格和制表符，那么该行不会显示任何东西，则该行也会被视为空行。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-5-1.png" alt="段落" title="段落"></p><p>这里还需要注意的一点是，我们在写文章时，经常会习惯使用空格或制表符来<strong>缩进段落</strong>，但在 Markdown 语法里边普通段落是不能用空格或制表符来表示缩进的，即便加了也不会显示缩进。这是因为 Markdown 作为一种轻量级的文本编辑标记语言一开始只是为英文设计的，所以省去了缩进式的写法使书写更为简洁。那么如果我们一定要使用缩进呢？这里有四种方法可以实现。</p><ul><li>在段落开头插入半角空格: <code>&amp;ensp;</code>或 <code>&amp;#8194;</code></li><li>在段落开头插入全角空格: <code>&amp;emsp;</code>或 <code>&amp;#8195;</code></li><li>在段落开头插入不换行空格: <code>&amp;nbsp;</code>或 <code>&amp;#160;</code></li><li>如果是网页的话，最好使用样式表,将下段代码插入相应 css 即可。  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>; <span class="comment">/*首行缩进*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-6-1.png" alt="有缩进的段落" title="有缩进的段落"></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><blockquote><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符）</p></blockquote><p>在 Markdown 语法中，除了段落自动换行以外，我们可以通过插入换行符来使段落强制换行。这里需要注意的一点是 Markdown 语法中换行符的插入和其他大部分的 text-to-HTML 格式不一样。一般是点击回车即可换行，但在 Markdown 语法中必须<strong>在文字末尾输入 2 个及以上的空格，再点击回车才可实现换行</strong>。不过在一些编辑器中可以设置为回车换行，我使用的 Markdown Preview Enhanced 插件里默认的换行方式就是使用回车换行，当然你如果不习惯也可以更改设置。</p><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><p>刚开始使用 Markdown 语法时，我发现无论两个段落之间相距了多少行，在不做其他处理的情况下，最终显示时两个段落间的距离都只有一个空行。后来了解到 markdown 会把多余空行省略，这是它的成功之处之一，文章结构不靠空行来区分。但有时候我们需要添加空行来调整段落间的距离时，这个时候该怎么办呢？其实原理和实现缩进是一样的，这里有五种方法可以实现。</p><ul><li>使用半角空格来代表空行: <code>&amp;ensp;</code>或 <code>&amp;#8194;</code></li><li>使用全角空格来代表空行: <code>&amp;emsp;</code>或 <code>&amp;#8195;</code></li><li>使用换行空格来代表空行: <code>&amp;nbsp;</code>或 <code>&amp;#160;</code></li><li>直接插入换行符: <code>&lt;br/&gt;</code></li><li>调整 markdown 的 css，改变 <code>p</code> 的 <code>margin-bottom</code> 属性，也可以实现段落间的距离的调整，不过这种方式是全局性的，可能不会每种情况都适用。</li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-7.png" alt="空行展示" title="空行展示"></p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，<strong>类 Setext 形式</strong> 和<strong>类 Atx 形式</strong>。</p><ul><li><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。如下图:</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-8.png" alt="类 Setext 形式" title="类 Setext 形式"></p></li><li><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，这一种形式使用得相对多一些。这里需要注意一点就是在<code>#</code>和标题间最好隔一个空格，不然可能在有的编辑器下显示有问题，如下图:</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-9.png" alt="类 Atx 形式" title="类 Atx 形式"></p></li></ul><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。一共有两种方式，一种是在引用段落的每一行最前面加上<code>&gt;</code>，还有一种方式是只在引用段落的第一行最前面加上<code>&gt;</code>，这两种方式都能标记区块引用。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-10.png" alt="区块引用" title="区块引用"></p><ul><li>区块引用里还可以可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt;</li><li>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等</li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-11.png" alt="区块引用扩展" title="区块引用扩展"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持<strong>有序列表</strong>和<strong>无序列表</strong>。</p><ul><li><p>无序列表使用<code>*</code>、<code>+</code>或是<code>-</code>作为列表标记:</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-12.png" alt="无序列表" title="无序列表"></p></li><li><p>有序列表则使用数字接着一个英文句点,这里需要注意的一点是你在列表标记上使用的数字并不会影响最后输出的 HTML 结果，就是说</p><p>  不管你写成这样</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  这是有序列表</span><br><span class="line">1.  这是有序列表</span><br><span class="line">1.  这是有序列表</span><br></pre></td></tr></table></figure><p>  还是这样</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3.  这是有序列表</span><br><span class="line">1.  这是有序列表</span><br><span class="line">8.  这是有序列表</span><br></pre></td></tr></table></figure><p>  最后的输出结果左边的列表标记都是根据第一行的标记数字往后顺序递增，不会顺序混乱，如图:</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-13.png" alt="有序列表扩展" title="有序列表扩展"></p><p>  这里还需注意的是两个独立的有序列表间，如果中间没有其他的标记元素作为分隔，那么这两个有序列表则被视为一个有序列表来进行标记的顺序递增。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-14.png" alt="有序列表扩展" title="有序列表扩展"></p><p>  还需要注意几点的是</p><ul><li>列表的项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</li><li>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符</li><li><p>项目列表很可能会不小心产生，比方说如果在行首出现数字-句点-空白的情况，则会产生项目列表。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></table></figure><p>  可以通过在句点前面加上反斜杠来避免</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>作为一个程序猿，接触最多的自然是代码啦，那么在 Markdown 语法中该如何表示呢？简单说，插入代码可能的情况有以下两种:</p><ul><li><p>只需要标记一小段行内代码，这种情况需要使用反引号 ` 把需要标记的代码给包起来。注意，如果你要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段。</p><p>  <img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-15.png" alt="标记行内代码" title="标记行内代码"></p></li><li><p>需要标记一大段代码(即已经排版好的代码区块)，这里有两种方式来标记。</p><ul><li><p>一种方式是通过简单的缩进 4 个空格或是 1 个制表符来标记。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure></li><li><p>另一种 Fenced Code Block 方式是通过在第一行和最后一行添加三个反引号，中间的行为代码的形式来进行标记。在第一行的反引号加上代码类型，有助于代码在某些编辑器下的高亮显示。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&lt;代码块&gt;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-16-1.png" alt="代码块" title="代码块"></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>华丽的分割线该如何来显示呢？我们只需在一行内输入三个以上的<code>*</code>或<code>-</code>或<code>_</code>来建立分割线，并且这一行中不能够包含其他东西。恩..你如果想要在符号间加几个空格也是可以的，这样也可以建立分割线。</p><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-17.png" alt="华丽的分割线" title="华丽的分割线"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>在写文章时，我们经常会插入一些链接。在 Markdown 语法中一共支持两种形式的链接语法: <strong>行内式</strong>和<strong>参考式</strong>两种形式。</p><ul><li><p>参考式的形式，采用一个方括号来标记链接文字，方括号后紧跟一个圆括号标记链接地址，如果还想要加上链接的 title 文字，只需要在链接地址后面隔一个空格，用双引号把 title 文字包起来即可。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接文字](链接地址 &quot;title&quot;)</span><br></pre></td></tr></table></figure></li><li><p>参考式的形式，采用一个方括号来标记链接文字，方括号后紧跟一个方括号来填入辨识链接地址的标记，然后你可以在文件的任意处将该标记的内容标记出来。我认为这种形式一方面是比较好读，增加链接而不让文章的阅读感觉被打断，另一方面也适用于在文章的不同位置需要使用相同的链接地址这种情况，这时只需要定义一次，然后就可以全局引用。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接文字][链接标识]</span><br><span class="line"></span><br><span class="line">[链接标识]: 链接地址 &quot;title&quot;   (可在文件任何地方定义，title 内容，可以用单引号、双引号或是括弧包裹)</span><br></pre></td></tr></table></figure><p>  需要注意:</p><ul><li>链接标识可以由字母、数字、空白和标点符号组成，但是并不区分大小写。</li><li><p>链接标识可以为空，此时链接变为隐式链接，这种情况下，链接标识会视为等同于链接文字，链接内容通过链接文字来定义。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接文字][]</span><br><span class="line"></span><br><span class="line">[链接文字]: 链接地址 &quot;title&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/petu1-18.png" alt="链接" title="链接"></p><p>还有一种链接方式是自动链接，Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://www.baidu.com/?tn=90294326_hao_pg&gt;</span><br></pre></td></tr></table></figure><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>在 Markdown 语法中，使用<code>*</code>和<code>_</code>来作为标记强调字词的符号。</p><ul><li>被一个<code>*</code>或<code>_</code>包围的字词，最后显示的是斜体。</li><li>被两个<code>*</code>或<code>_</code>包围的字词，最后显示的是加粗体。</li></ul><p><img src="http://p2p4htzmu.bkt.clouddn.com/peitu1-19.png" alt="强调" title="强调"></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>在 Markdown 语法中，图片的引入方法和链接的方法很相似，也有两种形式，<strong>行内式</strong>和<strong>参考式</strong>。唯一不同的是，图片映入时需要在第一个方括号前添上一个感叹号<code>!</code>,因为基本类似，这里就不继续详说了，详细语法可参考链接。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.appinn.com/markdown/#link" title="Markdown 中文版语法说明" target="_blank" rel="noopener">Markdown 中文版语法说明</a></li><li><a href="https://www.jianshu.com/p/dcffb6f60fe2" title="Markdown编辑器之比较" target="_blank" rel="noopener">Markdown 编辑器之比较</a></li><li><a href="http://www.williamlong.info/archives/4319.html" title="好用的Markdown编辑器一览" target="_blank" rel="noopener">好用的 Markdown 编辑器一览</a></li><li><a href="https://www.zhihu.com/question/20409634" title="怎样引导新手使用 Markdown？" target="_blank" rel="noopener">怎样引导新手使用 Markdown？</a></li><li><a href="https://www.jianshu.com/p/1e402922ee32" title="Markdown——入门指南" target="_blank" rel="noopener">Markdown——入门指南</a></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>总结了一下对 Markdown 的认识后，感觉自己对 Markdown 的理解又有了一些新的收获，注意到了一些以前忽视的东西。写一写总结感觉对自己帮助真的好大 :) ,希望我的总结也能够给你了解学习 Markdown 提供一点帮助。</p><p><strong>本篇文章纯属于个人的学习总结，如果文章中出现错误或不严谨的地方，希望大家能够指出，谢谢！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2p4htzmu.bkt.clouddn.com/peitu1.jpg&quot; alt=&quot;Markdown语法学习配图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;记得第一次接触 Markdown 应该是在 github 上，当时看每一个仓库里的 README 文档都是 md 格式的，文档内容的排版让我眼前一亮。诶这是什么东西，好奇的我赶紧百度了一下，看完官方文档，感觉自己推开了新世界的大门，有没有很方便！看完文档后，感觉文档一些东西介绍的有一点晦涩，不容易理解。所以我就想分享一下我对 Markdown 的一些认识。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://cavszhouyou.top/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://cavszhouyou.top/tags/Markdown/"/>
    
  </entry>
  
</feed>
